{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"tinygrad documentation","text":"<p>Welcome to the docs for tinygrad. This page is for users of the tinygrad library. tinygrad is not 1.0 yet, but it will be soon. The API has been pretty stable for a while.</p> <p>While you can <code>pip install tinygrad</code>, we encourage you to install from source:</p> <pre><code>git clone https://github.com/tinygrad/tinygrad.git\ncd tinygrad\npython3 -m pip install -e .\n</code></pre> <p>After you have installed tinygrad, try the MNIST tutorial</p> <p>We also have developer docs, and Di Zhu has created a bunch of tutorials to help understand how tinygrad works.</p>"},{"location":"#tinygrad-usage","title":"tinygrad Usage","text":"<p>The main class you will interact with is Tensor. It functions very similarly to PyTorch, but has a bit more of a functional style. tinygrad supports many datatypes.  All operations in tinygrad are lazy, meaning they won't do anything until you realize.</p> <ul> <li>tinygrad has a built in neural network library with some classes, optimizers, and load/save state management.</li> <li>tinygrad has a JIT to make things fast. Decorate your pure function with <code>TinyJit</code></li> <li>tinygrad has amazing support for multiple GPUs, allowing you to shard your Tensors with <code>Tensor.shard</code></li> </ul> <p>To understand what training looks like in tinygrad, you should read <code>beautiful_mnist.py</code></p> <p>We have a quickstart guide and a showcase</p>"},{"location":"#differences-from-pytorch","title":"Differences from PyTorch","text":"<p>If you are migrating from PyTorch, welcome. Most of the API is the same. We hope you will find tinygrad both familiar and somehow more \"correct feeling\"</p>"},{"location":"#tinygrad-doesnt-have-nnmodule","title":"tinygrad doesn't have nn.Module","text":"<p>There's nothing special about a \"Module\" class in tinygrad, it's just a normal class. <code>nn.state.get_parameters</code> can be used to recursively search normal classes for valid tensors. Instead of the <code>forward</code> method in PyTorch, tinygrad just uses <code>__call__</code></p>"},{"location":"#tinygrad-is-functional","title":"tinygrad is functional","text":"<p>In tinygrad, you can do <code>x.conv2d(w, b)</code> or <code>x.sparse_categorical_cross_entropy(y)</code>. We do also have a <code>Conv2D</code> class like PyTorch if you want a place to keep the state, but all stateless operations don't have classes.</p>"},{"location":"#tinygrad-is-lazy","title":"tinygrad is lazy","text":"<p>When you do <code>a+b</code> in tinygrad, nothing happens. It's not until you <code>realize</code> the Tensor that the computation actually runs.</p>"},{"location":"#tinygrad-requires-tinyjit-to-be-fast","title":"tinygrad requires @TinyJit to be fast","text":"<p>PyTorch spends a lot of development effort to make dispatch very fast. tinygrad doesn't. We have a simple decorator that will replay the kernels used in the decorated function.</p>"},{"location":"developer/","title":"Developer","text":"<p>The tinygrad framework has four pieces</p> <ul> <li>a PyTorch like frontend.</li> <li>a scheduler which breaks the compute into kernels.</li> <li>a lowering engine which converts ASTs into code that can run on the accelerator.</li> <li>an execution engine which can run that code.</li> </ul> <p>There is a good bunch of tutorials by Di Zhu that go over tinygrad internals.</p>"},{"location":"developer/#frontend","title":"Frontend","text":"<p>Everything in Tensor is syntactic sugar around function.py, where the forwards and backwards passes are implemented for the different functions. There's about 25 of them, implemented using about 20 basic ops. Those basic ops go on to construct a graph of:</p> <p>The <code>LazyBuffer</code> graph specifies the compute in terms of low level tinygrad ops. Not all LazyBuffers will actually become realized. There's two types of LazyBuffers, base and view. base contains compute into a contiguous buffer, and view is a view (specified by a ShapeTracker). Inputs to a base can be either base or view, inputs to a view can only be a single base.</p>"},{"location":"developer/#tinygrad.lazy.LazyBuffer","title":"LazyBuffer","text":"<pre><code>LazyBuffer(\n    device: str,\n    st: ShapeTracker,\n    dtype: DType,\n    op: Optional[Op] = None,\n    arg: Any = None,\n    srcs: Tuple[LazyBuffer, ...] = (),\n    base: Optional[LazyBuffer] = None,\n    metadata: Optional[Metadata] = None,\n)\n</code></pre>"},{"location":"developer/#scheduling","title":"Scheduling","text":"<p>The scheduler converts the graph of LazyBuffers into a list of <code>ScheduleItem</code>. One <code>ScheduleItem</code> is one kernel on the GPU, and the scheduler is responsible for breaking the large compute graph into subgraphs that can fit in a kernel. <code>ast</code> specifies what compute to run, and <code>bufs</code> specifies what buffers to run it on.</p>"},{"location":"developer/#tinygrad.engine.schedule.ScheduleItem","title":"ScheduleItem  <code>dataclass</code>","text":"<pre><code>ScheduleItem(\n    ast: LazyOp,\n    bufs: Tuple[Buffer, ...],\n    metadata: Optional[List[Metadata]] = None,\n)\n</code></pre>"},{"location":"developer/#tinygrad.engine.schedule.ScheduleItem.inputs","title":"inputs  <code>property</code>","text":"<pre><code>inputs: Tuple[Buffer, ...]\n</code></pre> <p>Read only buffers in the schedule.</p>"},{"location":"developer/#tinygrad.engine.schedule.ScheduleItem.outputs","title":"outputs  <code>property</code>","text":"<pre><code>outputs: Tuple[Buffer, ...]\n</code></pre> <p>Read/write or write only buffers in the schedule.</p>"},{"location":"developer/#lowering","title":"Lowering","text":"<p>The code in realize lowers <code>ScheduleItem</code> to <code>ExecItem</code> with</p> <p>There's a ton of complexity hidden behind this, see the <code>codegen/</code> directory.</p> <p>First we lower the AST to UOps, which is a linear list of the compute to be run. This is where the BEAM search happens.</p> <p>Then we render the UOps into code with a <code>Renderer</code>, then we compile the code to binary with a <code>Compiler</code>.</p>"},{"location":"developer/#tinygrad.engine.realize.lower_schedule","title":"lower_schedule","text":"<pre><code>lower_schedule(\n    schedule: List[ScheduleItem],\n) -&gt; Generator[ExecItem, None, None]\n</code></pre> Source code in <code>tinygrad/engine/realize.py</code> <pre><code>def lower_schedule(schedule:List[ScheduleItem]) -&gt; Generator[ExecItem, None, None]:\n  while len(schedule):\n    si = schedule.pop(0)\n    try: yield lower_schedule_item(si)\n    except Exception as e:\n      if DEBUG &gt;= 2:\n        print(f\"error lowering {si.ast.op}\")\n        print(\"tensor operations:\")\n        pprint.pprint(si.metadata, indent=2)\n      raise e\n</code></pre>"},{"location":"developer/#execution","title":"Execution","text":"<p>Creating <code>ExecItem</code>, which has a run method</p> <p>Lists of <code>ExecItem</code> can be condensed into a single ExecItem with the Graph API (rename to Queue?)</p>"},{"location":"developer/#tinygrad.engine.realize.ExecItem","title":"ExecItem  <code>dataclass</code>","text":"<pre><code>ExecItem(\n    prg: Runner,\n    bufs: List[Optional[Buffer]],\n    metadata: Optional[List[Metadata]] = None,\n)\n</code></pre>"},{"location":"developer/#tinygrad.engine.realize.ExecItem.bufs","title":"bufs  <code>instance-attribute</code>","text":"<pre><code>bufs: List[Optional[Buffer]]\n</code></pre>"},{"location":"developer/#tinygrad.engine.realize.ExecItem.metadata","title":"metadata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>metadata: Optional[List[Metadata]] = None\n</code></pre>"},{"location":"developer/#tinygrad.engine.realize.ExecItem.prg","title":"prg  <code>instance-attribute</code>","text":"<pre><code>prg: Runner\n</code></pre>"},{"location":"developer/#tinygrad.engine.realize.ExecItem.run","title":"run","text":"<pre><code>run(\n    var_vals: Optional[Dict[Variable, int]] = None,\n    wait=False,\n    jit=False,\n    do_update_stats=True,\n) -&gt; Optional[float]\n</code></pre> Source code in <code>tinygrad/engine/realize.py</code> <pre><code>def run(self, var_vals:Optional[Dict[Variable, int]]=None, wait=False, jit=False, do_update_stats=True) -&gt; Optional[float]:\n  bufs = [cast(Buffer, x) for x in self.bufs] if jit else [cast(Buffer, x).ensure_allocated() for x in self.bufs]\n  et = self.prg(bufs, var_vals if var_vals is not None else {}, wait=wait or DEBUG &gt;= 2)\n  if do_update_stats:\n    GlobalCounters.kernel_count += 1\n    GlobalCounters.global_ops += (op_est:=sym_infer(self.prg.op_estimate, var_vals))\n    GlobalCounters.global_mem += (mem_est:=sym_infer(self.prg.mem_estimate, var_vals))\n    if et is not None: GlobalCounters.time_sum_s += et\n    if DEBUG &gt;= 2:\n      lds_est = sym_infer(self.prg.lds_estimate, var_vals)\n      ptm = (colored(f\"{et*1e3:9.2f}ms\", \"yellow\") if et &gt; 0.01 else f\"{et*1e6:9.2f}us\") if et is not None else \"\"\n      print(f\"{colored(f'*** {self.prg.dname[:7]:7s} {GlobalCounters.kernel_count:4d}', 'magenta' if jit else ('green' if self.prg.first_run else None))} {self.prg.display_name+' '*(38-ansilen(self.prg.display_name))} mem {GlobalCounters.mem_used/1e9:5.2f} GB \" +  # noqa: E501\n            (str() if et is None else f\"tm {ptm}/{GlobalCounters.time_sum_s*1e3:9.2f}ms ({op_est/((et or 1e-20)*1e9):8.2f} GFLOPS {mem_est/((et or 1e-20)*1e9):6.1f}|{lds_est/((et or 1e-20)*1e9):&lt;7.1f} GB/s)\" +  # noqa: E501\n             f\" {[repr(m) if TRACEMETA &gt;= 2 else str(m) for m in self.metadata] if self.metadata else ''}\"))\n    self.prg.first_run = False\n  return et\n</code></pre>"},{"location":"developer/#runtime","title":"Runtime","text":"<p>Runtimes are responsible for device-specific interactions. They handle tasks such as initializing devices, allocating memory, loading/launching programs, and more. You can find more information about the runtimes API on the runtime overview page.</p> <p>All runtime implementations can be found in the runtime directory.</p>"},{"location":"developer/#hcq-compatible-runtimes","title":"HCQ Compatible Runtimes","text":"<p>HCQ API is a lower-level API for defining runtimes. Interaction with HCQ-compatible devices occurs at a lower level, with commands issued directly to hardware queues. Some examples of such backends are NV and AMD, which are userspace drivers for NVIDIA and AMD devices respectively. You can find more information about the API on HCQ overview page</p>"},{"location":"dtypes/","title":"dtypes","text":""},{"location":"dtypes/#tinygrad.dtype.DType","title":"DType  <code>dataclass</code>","text":"<pre><code>DType(\n    priority: int,\n    itemsize: int,\n    name: str,\n    fmt: Optional[str],\n    count: int,\n)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes","title":"dtypes","text":""},{"location":"dtypes/#tinygrad.dtype.dtypes.bigint","title":"bigint","text":"<pre><code>bigint: Final[DType] = DType(-1, 0, 'bigint', None, 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.bool","title":"bool","text":"<pre><code>bool: Final[DType] = DType(0, 1, 'bool', '?', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.int8","title":"int8","text":"<pre><code>int8: Final[DType] = DType(1, 1, 'char', 'b', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.uint8","title":"uint8","text":"<pre><code>uint8: Final[DType] = DType(2, 1, 'unsigned char', 'B', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.int16","title":"int16","text":"<pre><code>int16: Final[DType] = DType(3, 2, 'short', 'h', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.uint16","title":"uint16","text":"<pre><code>uint16: Final[DType] = DType(4, 2, \"unsigned short\", \"H\", 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.int32","title":"int32","text":"<pre><code>int32: Final[DType] = DType(5, 4, 'int', 'i', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.uint32","title":"uint32","text":"<pre><code>uint32: Final[DType] = DType(6, 4, 'unsigned int', 'I', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.int64","title":"int64","text":"<pre><code>int64: Final[DType] = DType(7, 8, 'long', 'l', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.uint64","title":"uint64","text":"<pre><code>uint64: Final[DType] = DType(8, 8, 'unsigned long', 'L', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.float16","title":"float16","text":"<pre><code>float16: Final[DType] = DType(9, 2, 'half', 'e', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.bfloat16","title":"bfloat16","text":"<pre><code>bfloat16: Final[DType] = DType(10, 2, '__bf16', None, 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.float32","title":"float32","text":"<pre><code>float32: Final[DType] = DType(11, 4, 'float', 'f', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.float64","title":"float64","text":"<pre><code>float64: Final[DType] = DType(12, 8, 'double', 'd', 1)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.half","title":"half","text":"<pre><code>half = float16\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.float","title":"float","text":"<pre><code>float = float32\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.double","title":"double","text":"<pre><code>double = float64\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.uchar","title":"uchar","text":"<pre><code>uchar = uint8\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.ushort","title":"ushort","text":"<pre><code>ushort = uint16\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.uint","title":"uint","text":"<pre><code>uint = uint32\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.ulong","title":"ulong","text":"<pre><code>ulong = uint64\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.char","title":"char","text":"<pre><code>char = int8\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.short","title":"short","text":"<pre><code>short = int16\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.int","title":"int","text":"<pre><code>int = int32\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.long","title":"long","text":"<pre><code>long = int64\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.default_float","title":"default_float","text":"<pre><code>default_float: DType = float32\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.default_int","title":"default_int","text":"<pre><code>default_int: DType = int32\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.is_float","title":"is_float","text":"<pre><code>is_float(x: DType) -&gt; bool\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef is_float(x: DType) -&gt; bool: return x.scalar() in (dtypes.float16, dtypes.bfloat16, dtypes.float32, dtypes.float64)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.is_int","title":"is_int","text":"<pre><code>is_int(x: DType) -&gt; bool\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod # static methds on top, or bool in the type info will refer to dtypes.bool\ndef is_int(x: DType) -&gt; bool: return x.scalar() in (dtypes.int8, dtypes.int16, dtypes.int32, dtypes.int64, dtypes.bigint) or dtypes.is_unsigned(x)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.is_unsigned","title":"is_unsigned","text":"<pre><code>is_unsigned(x: DType) -&gt; bool\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef is_unsigned(x: DType) -&gt; bool: return x.scalar() in (dtypes.uint8, dtypes.uint16, dtypes.uint32, dtypes.uint64)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.from_py","title":"from_py","text":"<pre><code>from_py(x) -&gt; DType\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef from_py(x) -&gt; DType:\n  if x.__class__ is float: return dtypes.default_float\n  if x.__class__ is int: return dtypes.default_int\n  if x.__class__ is bool: return dtypes.bool\n  # put this in the last is faster because there are more items than lists/tuples to check\n  if x.__class__ is list or x.__class__ is tuple: return max(dtypes.from_py(xi) for xi in x) if x else dtypes.default_float\n  raise RuntimeError(f\"Could not infer dtype of {x} with type {type(x)}\")\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.as_const","title":"as_const","text":"<pre><code>as_const(val: ConstType, dtype: DType)\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef as_const(val: ConstType, dtype:DType): return int(val) if dtypes.is_int(dtype) else float(val) if dtypes.is_float(dtype) else bool(val)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.min","title":"min","text":"<pre><code>min(dtype: DType)\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef min(dtype:DType):\n  if dtypes.is_int(dtype): return 0 if dtypes.is_unsigned(dtype) else -2**(dtype.itemsize*8-1)\n  return -float(\"inf\") if dtypes.is_float(dtype) else False\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.max","title":"max","text":"<pre><code>max(dtype: DType)\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef max(dtype:DType):\n  if dtypes.is_int(dtype): return (2**(dtype.itemsize*8-(0 if dtypes.is_unsigned(dtype) else 1)))-1\n  return float(\"inf\") if dtypes.is_float(dtype) else True\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.fields","title":"fields","text":"<pre><code>fields() -&gt; Dict[str, DType]\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef fields() -&gt; Dict[str, DType]: return DTYPES_DICT\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.imageh","title":"imageh","text":"<pre><code>imageh(shp)\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef imageh(shp): return ImageDType(100, 2, \"imageh\", 'e', 1, shape=shp, base=dtypes.float32)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.dtypes.imagef","title":"imagef","text":"<pre><code>imagef(shp)\n</code></pre> Source code in <code>tinygrad/dtype.py</code> <pre><code>@staticmethod\ndef imagef(shp): return ImageDType(100, 4, \"imagef\", 'f', 1, shape=shp, base=dtypes.float32)\n</code></pre>"},{"location":"dtypes/#tinygrad.dtype.ConstType","title":"ConstType  <code>module-attribute</code>","text":"<pre><code>ConstType = Union[float, int, bool]\n</code></pre>"},{"location":"env_vars/","title":"List of environment variables that control tinygrad behavior.","text":"<p>This is a list of environment variable that control the runtime behavior of tinygrad and its examples. Most of these are self-explanatory, and are usually used to set an option at runtime.</p> <p>Example: <code>GPU=1 DEBUG=4 python3 -m pytest</code></p> <p>However you can also decorate a function to set a value only inside that function.</p> <pre><code># in tensor.py (probably only useful if you are a tinygrad developer)\n@Context(DEBUG=4)\ndef numpy(self) -&gt; ...\n</code></pre> <p>Or use contextmanager to temporarily set a value inside some scope:</p> <pre><code>with Context(DEBUG=0):\n  a = Tensor.ones(10, 10)\n  a *= 2\n</code></pre>"},{"location":"env_vars/#global-variables","title":"Global Variables","text":"<p>The columns of this list are are: Variable, Possible Value(s) and Description.</p> <ul> <li>A <code>#</code> means that the variable can take any integer value.</li> </ul> <p>These control the behavior of core tinygrad even when used as a library.</p> Variable Possible Value(s) Description DEBUG [1-6] enable debugging output, with 4 you get operations, timings, speed, generated code and more GPU [1] enable the GPU backend CUDA [1] enable CUDA backend AMD [1] enable AMD backend NV [1] enable NV backend METAL [1] enable Metal backend (for Mac M1 and after) METAL_XCODE [1] enable Metal using macOS Xcode SDK CLANG [1] enable Clang backend LLVM [1] enable LLVM backend BEAM [#] number of beams in kernel beam search GRAPH [1] create a graph of all operations (requires graphviz) GRAPHUOPS [1] create a graph of uops (requires graphviz and saves at /tmp/uops.{svg,dot}) GRAPHPATH [/path/to] where to put the generated graph DEFAULT_FLOAT [HALF, ...] specify the default float dtype (FLOAT32, HALF, BFLOAT16, FLOAT64, ...), default to FLOAT32 IMAGE [1-2] enable 2d specific optimizations FLOAT16 [1] use float16 for images instead of float32 PTX [1] enable the specialized PTX assembler for Nvidia GPUs. If not set, defaults to generic CUDA codegen backend. PROFILE [1] enable output of perfetto compatible profile. This feature is supported in NV and AMD backends. VISIBLE_DEVICES [list[int]] restricts the NV/AMD devices that are available. The format is a comma-separated list of identifiers (indexing starts with 0). JIT [0-2] 0=disabled, 1=jit enabled (default), 2=jit enabled, but graphs are disabled"},{"location":"function/","title":"Function","text":""},{"location":"function/#tinygrad.function","title":"function","text":"<p>This is where the forwards and backwards passes live.</p>"},{"location":"function/#tinygrad.function.Contiguous","title":"Contiguous","text":"<pre><code>Contiguous(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.ContiguousBackward","title":"ContiguousBackward","text":"<pre><code>ContiguousBackward(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Cast","title":"Cast","text":"<pre><code>Cast(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Neg","title":"Neg","text":"<pre><code>Neg(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Reciprocal","title":"Reciprocal","text":"<pre><code>Reciprocal(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Sin","title":"Sin","text":"<pre><code>Sin(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Relu","title":"Relu","text":"<pre><code>Relu(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Log","title":"Log","text":"<pre><code>Log(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Exp","title":"Exp","text":"<pre><code>Exp(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Sqrt","title":"Sqrt","text":"<pre><code>Sqrt(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Sigmoid","title":"Sigmoid","text":"<pre><code>Sigmoid(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Sign","title":"Sign","text":"<pre><code>Sign(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Less","title":"Less","text":"<pre><code>Less(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Xor","title":"Xor","text":"<pre><code>Xor(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Add","title":"Add","text":"<pre><code>Add(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Mul","title":"Mul","text":"<pre><code>Mul(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Div","title":"Div","text":"<pre><code>Div(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Where","title":"Where","text":"<pre><code>Where(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Sum","title":"Sum","text":"<pre><code>Sum(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Max","title":"Max","text":"<pre><code>Max(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Expand","title":"Expand","text":"<pre><code>Expand(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Reshape","title":"Reshape","text":"<pre><code>Reshape(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Permute","title":"Permute","text":"<pre><code>Permute(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Pad","title":"Pad","text":"<pre><code>Pad(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Shrink","title":"Shrink","text":"<pre><code>Shrink(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"function/#tinygrad.function.Flip","title":"Flip","text":"<pre><code>Flip(\n    device: Union[str, Tuple[str, ...]],\n    *tensors: Tensor,\n    metadata: Optional[Metadata] = None\n)\n</code></pre> <p>               Bases: <code>Function</code></p>"},{"location":"mnist/","title":"MNIST Tutorial","text":"<p>After you have installed tinygrad, this is a great first tutorial.</p> <p>Start up a notebook locally, or use colab. tinygrad is very lightweight, so it's easy to install anywhere and doesn't need a special colab image, but for speed we recommend a T4 GPU image.</p>"},{"location":"mnist/#one-liner-to-install-tinygrad-in-colab","title":"One-liner to install tinygrad in colab","text":"<pre><code>!pip install git+https://github.com/tinygrad/tinygrad.git\n</code></pre>"},{"location":"mnist/#whats-the-default-device","title":"What's the default device?","text":"<pre><code>from tinygrad import Device\nprint(Device.DEFAULT)\n</code></pre> <p>You will see <code>CUDA</code> here on a GPU instance, or <code>CLANG</code> here on a CPU instance.</p>"},{"location":"mnist/#a-simple-model","title":"A simple model","text":"<p>We'll use the model from the Keras tutorial.</p> <pre><code>from tinygrad import Tensor, nn\n\nclass Model:\n  def __init__(self):\n    self.l1 = nn.Conv2d(1, 32, kernel_size=(3,3))\n    self.l2 = nn.Conv2d(32, 64, kernel_size=(3,3))\n    self.l3 = nn.Linear(1600, 10)\n\n  def __call__(self, x:Tensor) -&gt; Tensor:\n    x = self.l1(x).relu().max_pool2d((2,2))\n    x = self.l2(x).relu().max_pool2d((2,2))\n    return self.l3(x.flatten(1).dropout(0.5))\n</code></pre> <p>Two key differences from PyTorch:</p> <ul> <li>Only the stateful layers are declared in <code>__init__</code></li> <li>There's no <code>nn.Module</code> class or <code>forward</code> function, just a normal class and <code>__call__</code></li> </ul>"},{"location":"mnist/#getting-the-dataset","title":"Getting the dataset","text":"<pre><code>from tinygrad.nn.datasets import mnist\nX_train, Y_train, X_test, Y_test = mnist()\nprint(X_train.shape, X_train.dtype, Y_train.shape, Y_train.dtype)\n# (60000, 1, 28, 28) dtypes.uchar (60000,) dtypes.uchar\n</code></pre> <p>tinygrad includes MNIST, it only adds four lines. Feel free to read the function.</p>"},{"location":"mnist/#using-the-model","title":"Using the model","text":"<p>MNIST is small enough that the <code>mnist()</code> function copies the dataset to the default device.</p> <p>So creating the model and evaluating it is a matter of:</p> <pre><code>model = Model()\nacc = (model(X_test).argmax(axis=1) == Y_test).mean()\n# NOTE: tinygrad is lazy, and hasn't actually run anything by this point\nprint(acc.item())  # ~10% accuracy, as expected from a random model\n</code></pre>"},{"location":"mnist/#training-the-model","title":"Training the model","text":"<p>We'll use the Adam optimizer. The <code>nn.state.get_parameters</code> will walk the model class and pull out the parameters for the optimizer. Also, in tinygrad, it's typical to write a function to do the training step so it can be jitted.</p> <pre><code>optim = nn.optim.Adam(nn.state.get_parameters(model))\nbatch_size = 128\ndef step():\n  Tensor.training = True  # makes dropout work\n  samples = Tensor.randint(batch_size, high=X_train.shape[0])\n  X, Y = X_train[samples], Y_train[samples]\n  optim.zero_grad()\n  loss = model(X).sparse_categorical_crossentropy(Y).backward()\n  optim.step()\n  return loss\n</code></pre> <p>You can time a step with:</p> <pre><code>import timeit\ntimeit.repeat(step, repeat=5, number=1)\n#[0.08268719699981375,\n# 0.07478952900009972,\n# 0.07714716600003158,\n# 0.07785399599970333,\n# 0.07605237000007037]\n</code></pre> <p>So around 75 ms on T4 colab.</p>"},{"location":"mnist/#why-so-slow","title":"Why so slow?","text":"<p>Unlike PyTorch, tinygrad isn't designed to be fast like that. While 75 ms for one step is plenty fast for debugging, it's not great for training. Here, we introduce the first quintessentially tinygrad concept, the <code>TinyJit</code>.</p> <pre><code>from tinygrad import TinyJit\njit_step = TinyJit(step)\n</code></pre> <p>Note</p> <p>It can also be used as a decorator <code>@TinyJit</code></p> <p>Now when we time it:</p> <pre><code>import timeit\ntimeit.repeat(jit_step, repeat=5, number=1)\n# [0.2596786549997887,\n#  0.08989566299987928,\n#  0.0012115650001760514,\n#  0.001010227999813651,\n#  0.0012164899999334011]\n</code></pre> <p>1.0 ms is 75x faster! Note that we aren't syncing the GPU, so GPU time may be slower.</p> <p>The slowness the first two times is the JIT capturing the kernels. And this JIT will not run any Python in the function, it will just replay the tinygrad kernels that were run, so be aware that non tinygrad Python operations won't work. Randomness functions work as expected.</p> <p>Unlike other JITs, we JIT everything, including the optimizer. Think of it as a dumb replay on different data.</p>"},{"location":"mnist/#putting-it-together","title":"Putting it together","text":"<p>Since we are just randomly sampling from the dataset, there's no real concept of an epoch. We have a batch size of 128, so the Keras example is taking about 7000 steps.</p> <pre><code>for step in range(7000):\n  loss = jit_step()\n  if step%100 == 0:\n    Tensor.training = False\n    acc = (model(X_test).argmax(axis=1) == Y_test).mean().item()\n    print(f\"step {step:4d}, loss {loss.item():.2f}, acc {acc*100.:.2f}%\")\n</code></pre> <p>It doesn't take long to reach 98%, and it usually reaches 99%.</p> <pre><code>step    0, loss 4.03, acc 71.43%\nstep  100, loss 0.34, acc 93.86%\nstep  200, loss 0.23, acc 95.97%\nstep  300, loss 0.18, acc 96.32%\nstep  400, loss 0.18, acc 96.76%\nstep  500, loss 0.13, acc 97.46%\nstep  600, loss 0.14, acc 97.45%\nstep  700, loss 0.10, acc 97.27%\nstep  800, loss 0.23, acc 97.49%\nstep  900, loss 0.13, acc 97.51%\nstep 1000, loss 0.13, acc 97.88%\nstep 1100, loss 0.11, acc 97.72%\nstep 1200, loss 0.14, acc 97.65%\nstep 1300, loss 0.12, acc 98.04%\nstep 1400, loss 0.25, acc 98.17%\nstep 1500, loss 0.11, acc 97.86%\nstep 1600, loss 0.21, acc 98.21%\nstep 1700, loss 0.14, acc 98.34%\n...\n</code></pre>"},{"location":"mnist/#from-here","title":"From here?","text":"<p>tinygrad is yours to play with now. It's pure Python and short, so unlike PyTorch, fixing library bugs is well within your abilities.</p> <ul> <li>It's two lines to add multiGPU support to this example (can you find them?). You have to <code>.shard</code> the model to all GPUs, and <code>.shard</code> the dataset by batch.</li> <li><code>with Context(DEBUG=2)</code> shows the running kernels, <code>DEBUG=4</code> shows the code. All <code>Context</code> variables can also be environment variables.</li> <li><code>with Context(BEAM=2)</code> will do a BEAM search on the kernels, searching many possible implementations for what runs the fastest on your hardware. After this search, tinygrad is usually speed competitive with PyTorch, and the results are cached so you won't have to search next time.</li> </ul> <p>Join our Discord for help, and if you want to be a tinygrad developer. Please read the Discord rules when you get there.</p> <p>Follow us on Twitter to keep up with the project.</p>"},{"location":"nn/","title":"nn (Neural Networks)","text":""},{"location":"nn/#neural-network-classes","title":"Neural Network classes","text":""},{"location":"nn/#tinygrad.nn.BatchNorm","title":"BatchNorm","text":"<pre><code>BatchNorm(\n    sz: int,\n    eps=1e-05,\n    affine=True,\n    track_running_stats=True,\n    momentum=0.1,\n)\n</code></pre> <p>Applies Batch Normalization over a 2D or 3D input.</p> <ul> <li>Described: https://paperswithcode.com/method/batch-normalization</li> <li>Paper: https://arxiv.org/abs/1502.03167v3</li> </ul> <p>See: <code>Tensor.batchnorm</code></p> <p></p> <p><pre><code>norm = nn.BatchNorm(3)\nt = Tensor.rand(2, 3, 4, 4)\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>0.5185545086860657 0.2764231860637665\n</code></pre> <pre><code>t = norm(t)\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>0.5185517072677612 0.27642181515693665\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, sz:int, eps=1e-5, affine=True, track_running_stats=True, momentum=0.1):\n  self.eps, self.track_running_stats, self.momentum = eps, track_running_stats, momentum\n\n  if affine: self.weight, self.bias = Tensor.ones(sz), Tensor.zeros(sz)\n  else: self.weight, self.bias = None, None\n\n  self.running_mean, self.running_var = Tensor.zeros(sz, requires_grad=False), Tensor.ones(sz, requires_grad=False)\n  self.num_batches_tracked = Tensor.zeros(1, requires_grad=False)\n</code></pre>"},{"location":"nn/#tinygrad.nn.Conv1d","title":"Conv1d","text":"<pre><code>Conv1d(\n    in_channels,\n    out_channels,\n    kernel_size,\n    stride=1,\n    padding=0,\n    dilation=1,\n    groups=1,\n    bias=True,\n)\n</code></pre> <p>Applies a 1D convolution over an input signal composed of several input planes.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.Conv1d</p> <p><pre><code>conv = nn.Conv1d(1, 1, 3)\nt = Tensor.rand(1, 1, 4)\nprint(t.numpy())\n</code></pre> <pre><code>[[[0.849  0.4653 0.416  0.7124]]]\n</code></pre> <pre><code>t = conv(t)\nprint(t.numpy())\n</code></pre> <pre><code>[[[0.4636 0.4361]]]\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def Conv1d(in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True):\n  \"\"\"\n  Applies a 1D convolution over an input signal composed of several input planes.\n\n  See: https://pytorch.org/docs/stable/generated/torch.nn.Conv1d\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  conv = nn.Conv1d(1, 1, 3)\n  t = Tensor.rand(1, 1, 4)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = conv(t)\n  print(t.numpy())\n  ```\n  \"\"\"\n  return Conv2d(in_channels, out_channels, (kernel_size,), stride, padding, dilation, groups, bias)\n</code></pre>"},{"location":"nn/#tinygrad.nn.Conv2d","title":"Conv2d","text":"<pre><code>Conv2d(\n    in_channels,\n    out_channels,\n    kernel_size,\n    stride=1,\n    padding=0,\n    dilation=1,\n    groups=1,\n    bias=True,\n)\n</code></pre> <p>Applies a 2D convolution over an input signal composed of several input planes.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.Conv2d</p> <p><pre><code>conv = nn.Conv2d(1, 1, 3)\nt = Tensor.rand(1, 1, 4, 4)\nprint(t.numpy())\n</code></pre> <pre><code>[[[[0.5548 0.1255 0.6857 0.3032]\n   [0.2659 0.4993 0.8691 0.4981]\n   [0.6811 0.7425 0.1552 0.7006]\n   [0.7574 0.5636 0.9477 0.7399]]]]\n</code></pre> <pre><code>t = conv(t)\nprint(t.numpy())\n</code></pre> <pre><code>[[[[ 0.0414  0.0665]\n   [ 0.0922 -0.1276]]]]\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True):\n  self.kernel_size = (kernel_size, kernel_size) if isinstance(kernel_size, int) else tuple(kernel_size)\n  self.stride, self.padding, self.dilation, self.groups = stride, padding, dilation, groups\n  scale = 1 / math.sqrt(in_channels * prod(self.kernel_size))\n  self.weight = Tensor.uniform(out_channels, in_channels//groups, *self.kernel_size, low=-scale, high=scale)\n  self.bias = Tensor.uniform(out_channels, low=-scale, high=scale) if bias else None\n</code></pre>"},{"location":"nn/#tinygrad.nn.ConvTranspose1d","title":"ConvTranspose1d","text":"<pre><code>ConvTranspose1d(\n    in_channels,\n    out_channels,\n    kernel_size,\n    stride=1,\n    padding=0,\n    output_padding=0,\n    dilation=1,\n    groups=1,\n    bias=True,\n)\n</code></pre> <p>Applies a 1D transposed convolution operator over an input signal composed of several input planes.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.ConvTranspose1d</p> <p><pre><code>conv = nn.ConvTranspose1d(1, 1, 3)\nt = Tensor.rand(1, 1, 4)\nprint(t.numpy())\n</code></pre> <pre><code>[[[0.4918 0.6903 0.1495 0.4074]]]\n</code></pre> <pre><code>t = conv(t)\nprint(t.numpy())\n</code></pre> <pre><code>[[[0.0637 0.2516 0.4782 0.2576 0.3133 0.1862]]]\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def ConvTranspose1d(in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, dilation=1, groups=1, bias=True):\n  \"\"\"\n  Applies a 1D transposed convolution operator over an input signal composed of several input planes.\n\n  See: https://pytorch.org/docs/stable/generated/torch.nn.ConvTranspose1d\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  conv = nn.ConvTranspose1d(1, 1, 3)\n  t = Tensor.rand(1, 1, 4)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = conv(t)\n  print(t.numpy())\n  ```\n  \"\"\"\n  return ConvTranspose2d(in_channels, out_channels, (kernel_size,), stride, padding, output_padding, dilation, groups, bias)\n</code></pre>"},{"location":"nn/#tinygrad.nn.ConvTranspose2d","title":"ConvTranspose2d","text":"<pre><code>ConvTranspose2d(\n    in_channels,\n    out_channels,\n    kernel_size,\n    stride=1,\n    padding=0,\n    output_padding=0,\n    dilation=1,\n    groups=1,\n    bias=True,\n)\n</code></pre> <p>               Bases: <code>Conv2d</code></p> <p>Applies a 2D transposed convolution operator over an input image.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.ConvTranspose2d</p> <p><pre><code>conv = nn.ConvTranspose2d(1, 1, 3)\nt = Tensor.rand(1, 1, 4, 4)\nprint(t.numpy())\n</code></pre> <pre><code>[[[[0.6364 0.7299 0.6797 0.5407]\n   [0.4421 0.5539 0.9338 0.2231]\n   [0.9422 0.9607 0.868  0.5773]\n   [0.0182 0.023  0.3357 0.2344]]]]\n</code></pre> <pre><code>t = conv(t)\nprint(t.numpy())\n</code></pre> <pre><code>[[[[ 0.2563  0.3424  0.3199  0.3183  0.3465  0.2755]\n   [ 0.4177  0.6419  0.6862  0.7631  0.4914  0.3617]\n   [ 0.2906  0.3477  0.5954  0.5924  0.5016  0.4339]\n   [ 0.4948  0.5715  0.6923  0.6136  0.7222  0.4205]\n   [ 0.2539 -0.0412  0.266   0.3684  0.436   0.481 ]\n   [ 0.3087  0.3027  0.2856  0.194   0.3183  0.3678]]]]\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0, output_padding=0, dilation=1, groups=1, bias=True):\n  super().__init__(in_channels, out_channels, kernel_size, stride, padding, dilation, groups, bias)\n  scale = 1 / math.sqrt(in_channels * prod(self.kernel_size))\n  self.weight = Tensor.uniform(in_channels, out_channels//groups, *self.kernel_size, low=-scale, high=scale)\n  self.output_padding = output_padding\n</code></pre>"},{"location":"nn/#tinygrad.nn.Linear","title":"Linear","text":"<pre><code>Linear(in_features, out_features, bias=True)\n</code></pre> <p>Applies a linear transformation to the incoming data.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.Linear</p> <p><pre><code>lin = nn.Linear(3, 4)\nt = Tensor.rand(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[0.4622 0.7327 0.3747]\n [0.6531 0.982  0.5189]]\n</code></pre> <pre><code>t = lin(t)\nprint(t.numpy())\n</code></pre> <pre><code>[[-0.8325  0.0843 -0.0462  0.1152]\n [-0.962  -0.0569  0.0601  0.1848]]\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, in_features, out_features, bias=True):\n  bound = 1 / math.sqrt(in_features)\n  self.weight = Tensor.uniform(out_features, in_features, low=-bound, high=bound)\n  self.bias = Tensor.uniform(out_features, low=-bound, high=bound) if bias else None\n</code></pre>"},{"location":"nn/#tinygrad.nn.GroupNorm","title":"GroupNorm","text":"<pre><code>GroupNorm(\n    num_groups: int,\n    num_channels: int,\n    eps: float = 1e-05,\n    affine: bool = True,\n)\n</code></pre> <p>Applies Group Normalization over a mini-batch of inputs.</p> <ul> <li>Described: https://paperswithcode.com/method/group-normalization</li> <li>Paper: https://arxiv.org/abs/1803.08494v3</li> </ul> <p><pre><code>norm = nn.GroupNorm(2, 12)\nt = Tensor.rand(2, 12, 4, 4) * 2 + 1\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>1.9784064292907715 0.5828914642333984\n</code></pre> <pre><code>t = norm(t)\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>-3.7925767060187354e-07 1.0012900829315186\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, num_groups:int, num_channels:int, eps:float=1e-5, affine:bool=True):\n  self.num_groups, self.num_channels, self.eps = num_groups, num_channels, eps\n  self.weight: Optional[Tensor] = Tensor.ones(num_channels) if affine else None\n  self.bias: Optional[Tensor] = Tensor.zeros(num_channels) if affine else None\n</code></pre>"},{"location":"nn/#tinygrad.nn.InstanceNorm","title":"InstanceNorm","text":"<pre><code>InstanceNorm(\n    num_features: int,\n    eps: float = 1e-05,\n    affine: bool = True,\n)\n</code></pre> <p>Applies Instance Normalization over a mini-batch of inputs.</p> <ul> <li>Described: https://paperswithcode.com/method/instance-normalization</li> <li>Paper: https://arxiv.org/abs/1607.08022v3</li> </ul> <p><pre><code>norm = nn.InstanceNorm(3)\nt = Tensor.rand(2, 3, 4, 4) * 2 + 1\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>2.005108118057251 0.5485775470733643\n</code></pre> <pre><code>t = norm(t)\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>8.034463405692804e-08 1.0052311420440674\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, num_features:int, eps:float=1e-5, affine:bool=True):\n  self.num_features, self.eps = num_features, eps\n  self.weight: Optional[Tensor] = Tensor.ones(num_features) if affine else None\n  self.bias: Optional[Tensor] = Tensor.zeros(num_features) if affine else None\n</code></pre>"},{"location":"nn/#tinygrad.nn.LayerNorm","title":"LayerNorm","text":"<pre><code>LayerNorm(\n    normalized_shape: Union[int, Tuple[int, ...]],\n    eps: float = 1e-05,\n    elementwise_affine: bool = True,\n)\n</code></pre> <p>Applies Layer Normalization over a mini-batch of inputs.</p> <ul> <li>Described: https://paperswithcode.com/method/layer-normalization</li> <li>Paper: https://arxiv.org/abs/1607.06450v1</li> </ul> <p><pre><code>norm = nn.LayerNorm(3)\nt = Tensor.rand(2, 5, 3) * 2 + 1\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>1.9599485397338867 0.592099130153656\n</code></pre> <pre><code>t = norm(t)\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>5.7727618241187884e-08 1.0170117616653442\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, normalized_shape:Union[int, Tuple[int, ...]], eps:float=1e-5, elementwise_affine:bool=True):\n  self.normalized_shape = (normalized_shape,) if isinstance(normalized_shape, int) else tuple(normalized_shape)\n  self.axis, self.eps, self.elementwise_affine = tuple(-1-i for i in range(len(self.normalized_shape))), eps, elementwise_affine\n  self.weight, self.bias = (Tensor.ones(*self.normalized_shape), Tensor.zeros(*self.normalized_shape)) if elementwise_affine else (None, None)\n</code></pre>"},{"location":"nn/#tinygrad.nn.LayerNorm2d","title":"LayerNorm2d","text":"<pre><code>LayerNorm2d(\n    normalized_shape: Union[int, Tuple[int, ...]],\n    eps: float = 1e-05,\n    elementwise_affine: bool = True,\n)\n</code></pre> <p>               Bases: <code>LayerNorm</code></p> <p>Applies Layer Normalization over a mini-batch of 2D inputs.</p> <p>See: <code>LayerNorm</code></p> <p><pre><code>norm = nn.LayerNorm2d(3)\nt = Tensor.rand(2, 3, 4, 4) * 2 + 1\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>2.023292064666748 0.5559021234512329\n</code></pre> <pre><code>t = norm(t)\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>-8.08504623250883e-08 1.005164384841919\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, normalized_shape:Union[int, Tuple[int, ...]], eps:float=1e-5, elementwise_affine:bool=True):\n  self.normalized_shape = (normalized_shape,) if isinstance(normalized_shape, int) else tuple(normalized_shape)\n  self.axis, self.eps, self.elementwise_affine = tuple(-1-i for i in range(len(self.normalized_shape))), eps, elementwise_affine\n  self.weight, self.bias = (Tensor.ones(*self.normalized_shape), Tensor.zeros(*self.normalized_shape)) if elementwise_affine else (None, None)\n</code></pre>"},{"location":"nn/#tinygrad.nn.RMSNorm","title":"RMSNorm","text":"<pre><code>RMSNorm(dim, eps=1e-06)\n</code></pre> <p>Applies Root Mean Square Normalization to input.</p> <ul> <li>Described: https://paperswithcode.com/method/rmsnorm</li> <li>Paper: https://arxiv.org/abs/1910.07467</li> </ul> <p><pre><code>norm = nn.RMSNorm(4)\nt = Tensor.arange(12, dtype=dtypes.float).reshape(3, 4)\nprint(t.numpy())\n</code></pre> <pre><code>[[ 0.  1.  2.  3.]\n [ 4.  5.  6.  7.]\n [ 8.  9. 10. 11.]]\n</code></pre> <pre><code>print(norm(t).numpy())\n</code></pre> <pre><code>[[0.     0.5345 1.069  1.6036]\n [0.7127 0.8909 1.069  1.2472]\n [0.8363 0.9409 1.0454 1.15  ]]\n</code></pre></p> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, dim, eps=1e-6): self.eps, self.weight = eps, Tensor.ones(dim)\n</code></pre>"},{"location":"nn/#tinygrad.nn.Embedding","title":"Embedding","text":"<pre><code>Embedding(vocab_size: int, embed_size: int)\n</code></pre> <p>A simple lookup table that stores embeddings of a fixed dictionary and size.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.Embedding</p> <pre><code>emb = nn.Embedding(10, 3)\nprint(emb(Tensor([1, 2, 3, 1])).numpy())\n</code></pre> <pre><code>[[[-0.0391 -0.6026 -0.3618]\n  [-0.1003 -0.2085 -0.3167]\n  [ 0.4834  0.2355  0.3284]\n  [-0.0391 -0.6026 -0.3618]]]\n</code></pre> Source code in <code>tinygrad/nn/__init__.py</code> <pre><code>def __init__(self, vocab_size:int, embed_size:int):\n  self.vocab_sz, self.embed_sz, self.weight = vocab_size, embed_size, Tensor.glorot_uniform(vocab_size, embed_size)\n</code></pre>"},{"location":"nn/#optimizers","title":"Optimizers","text":""},{"location":"nn/#tinygrad.nn.optim.SGD","title":"SGD","text":"<pre><code>SGD(\n    params: List[Tensor],\n    lr=0.001,\n    momentum=0.0,\n    weight_decay=0.0,\n    nesterov=False,\n    classic=False,\n)\n</code></pre> <p>Stochastic Gradient Descent (SGD) optimizer with optional momentum and weight decay.</p> <p><code>classic</code> is a boolean flag that determines whether to use the popular momentum update rule or the classic momentum update rule.</p> <ul> <li>Described: https://paperswithcode.com/method/sgd</li> </ul> Source code in <code>tinygrad/nn/optim.py</code> <pre><code>def SGD(params: List[Tensor], lr=0.001, momentum=0.0, weight_decay=0.0, nesterov=False, classic=False):\n  \"\"\"\n  Stochastic Gradient Descent (SGD) optimizer with optional momentum and weight decay.\n\n  `classic` is a boolean flag that determines whether to use the popular momentum update rule or the classic momentum update rule.\n\n  - Described: https://paperswithcode.com/method/sgd\n  \"\"\"\n  return LARS(params, lr, momentum, weight_decay, nesterov, classic, tcoef=0.0)\n</code></pre>"},{"location":"nn/#tinygrad.nn.optim.LARS","title":"LARS","text":"<pre><code>LARS(\n    params: List[Tensor],\n    lr=0.001,\n    momentum=0.9,\n    weight_decay=0.0001,\n    nesterov=False,\n    classic=True,\n    tcoef=0.001,\n)\n</code></pre> <p>               Bases: <code>Optimizer</code></p> <p>Layer-wise Adaptive Rate Scaling (LARS) optimizer with optional momentum and weight decay.</p> <ul> <li>Described: https://paperswithcode.com/method/lars</li> <li>Paper: https://arxiv.org/abs/1708.03888v3</li> </ul> Source code in <code>tinygrad/nn/optim.py</code> <pre><code>def __init__(self, params:List[Tensor], lr=0.001, momentum=0.9, weight_decay=1e-4, nesterov=False, classic=True, tcoef=0.001):\n  super().__init__(params, lr)\n  self.momentum, self.wd, self.nesterov, self.classic, self.tcoef = momentum, weight_decay, nesterov, classic, tcoef\n  self.b = [Tensor.zeros(*t.shape, dtype=t.dtype, device=t.device, requires_grad=False) for t in self.params] if self.momentum else []\n</code></pre>"},{"location":"nn/#tinygrad.nn.optim.AdamW","title":"AdamW","text":"<pre><code>AdamW(\n    params: List[Tensor],\n    lr=0.001,\n    b1=0.9,\n    b2=0.999,\n    eps=1e-08,\n    weight_decay=0.01,\n)\n</code></pre> <p>AdamW optimizer with optional weight decay.</p> <ul> <li>Described: https://paperswithcode.com/method/adamw</li> <li>Paper: https://arxiv.org/abs/1711.05101v3</li> </ul> Source code in <code>tinygrad/nn/optim.py</code> <pre><code>def AdamW(params: List[Tensor], lr=0.001, b1=0.9, b2=0.999, eps=1e-8, weight_decay=0.01):\n  \"\"\"\n  AdamW optimizer with optional weight decay.\n\n  - Described: https://paperswithcode.com/method/adamw\n  - Paper: https://arxiv.org/abs/1711.05101v3\n  \"\"\"\n  return LAMB(params, lr, b1, b2, eps, weight_decay, adam=True)\n</code></pre>"},{"location":"nn/#tinygrad.nn.optim.Adam","title":"Adam","text":"<pre><code>Adam(\n    params: List[Tensor],\n    lr=0.001,\n    b1=0.9,\n    b2=0.999,\n    eps=1e-08,\n)\n</code></pre> <p>Adam optimizer.</p> <ul> <li>Described: https://paperswithcode.com/method/adam</li> <li>Paper: https://arxiv.org/abs/1412.6980</li> </ul> Source code in <code>tinygrad/nn/optim.py</code> <pre><code>def Adam(params: List[Tensor], lr=0.001, b1=0.9, b2=0.999, eps=1e-8):\n  \"\"\"\n  Adam optimizer.\n\n  - Described: https://paperswithcode.com/method/adam\n  - Paper: https://arxiv.org/abs/1412.6980\n  \"\"\"\n  return LAMB(params, lr, b1, b2, eps, 0.0, adam=True)\n</code></pre>"},{"location":"nn/#tinygrad.nn.optim.LAMB","title":"LAMB","text":"<pre><code>LAMB(\n    params: List[Tensor],\n    lr=0.001,\n    b1=0.9,\n    b2=0.999,\n    eps=1e-06,\n    weight_decay=0.0,\n    adam=False,\n)\n</code></pre> <p>               Bases: <code>Optimizer</code></p> <p>LAMB optimizer with optional weight decay.</p> <ul> <li>Described: https://paperswithcode.com/method/lamb</li> <li>Paper: https://arxiv.org/abs/1904.00962</li> </ul> Source code in <code>tinygrad/nn/optim.py</code> <pre><code>def __init__(self, params: List[Tensor], lr=0.001, b1=0.9, b2=0.999, eps=1e-6, weight_decay=0.0, adam=False):\n  super().__init__(params, lr)\n  self.b1, self.b2, self.eps, self.wd, self.adam = b1, b2, eps, weight_decay, adam\n  self.b1_t, self.b2_t = (Tensor([1], dtype=dtypes.float32, device=self.device, requires_grad=False).realize() for _ in [b1, b2])\n  self.m = [Tensor.zeros(*t.shape, dtype=dtypes.float32, device=t.device, requires_grad=False).contiguous() for t in self.params]\n  self.v = [Tensor.zeros(*t.shape, dtype=dtypes.float32, device=t.device, requires_grad=False).contiguous() for t in self.params]\n</code></pre>"},{"location":"nn/#loadsave","title":"Load/Save","text":""},{"location":"nn/#tinygrad.nn.state.safe_load","title":"safe_load","text":"<pre><code>safe_load(fn: Union[Tensor, str]) -&gt; Dict[str, Tensor]\n</code></pre> <p>Loads a .safetensor file from disk, returning the state_dict.</p> <pre><code>state_dict = nn.state.safe_load(\"test.safetensor\")\n</code></pre> Source code in <code>tinygrad/nn/state.py</code> <pre><code>def safe_load(fn:Union[Tensor,str]) -&gt; Dict[str, Tensor]:\n  \"\"\"\n  Loads a .safetensor file from disk, returning the state_dict.\n\n  ```python\n  state_dict = nn.state.safe_load(\"test.safetensor\")\n  ```\n  \"\"\"\n  t, json_len, metadata = safe_load_metadata(fn)\n  ret = {}\n  for k,v in metadata.items():\n    if k == \"__metadata__\": continue\n    dtype = safe_dtypes[v['dtype']]\n    sz = (v['data_offsets'][1]-v['data_offsets'][0])\n    ret[k] = t[8+json_len+v['data_offsets'][0]:8+json_len+v['data_offsets'][0]+sz].bitcast(dtype).reshape(v['shape'])\n  return ret\n</code></pre>"},{"location":"nn/#tinygrad.nn.state.safe_save","title":"safe_save","text":"<pre><code>safe_save(\n    tensors: Dict[str, Tensor],\n    fn: str,\n    metadata: Optional[Dict[str, Any]] = None,\n)\n</code></pre> <p>Saves a state_dict to disk in a .safetensor file with optional metadata.</p> <pre><code>t = Tensor([1, 2, 3])\nnn.state.safe_save({'t':t}, \"test.safetensor\")\n</code></pre> Source code in <code>tinygrad/nn/state.py</code> <pre><code>def safe_save(tensors:Dict[str, Tensor], fn:str, metadata:Optional[Dict[str, Any]]=None):\n  \"\"\"\n  Saves a state_dict to disk in a .safetensor file with optional metadata.\n\n  ```python\n  t = Tensor([1, 2, 3])\n  nn.state.safe_save({'t':t}, \"test.safetensor\")\n  ```\n  \"\"\"\n  headers, offset = {}, 0\n  if metadata: headers['__metadata__'] = metadata\n  for k,v in tensors.items():\n    headers[k] = {'dtype': inverse_safe_dtypes[v.dtype], 'shape': list(v.shape), 'data_offsets':[offset, offset+v.nbytes()]}\n    offset += v.nbytes()\n  j = json.dumps(headers, separators=(',', ':'))\n  j += \"\\x20\"*((8-len(j)%8)%8)\n  pathlib.Path(fn).unlink(missing_ok=True)\n  t = Tensor.empty(8+len(j)+offset, dtype=dtypes.uint8, device=f\"disk:{fn}\")\n  t[0:8].bitcast(dtypes.int64).assign([len(j)])\n  t[8:8+len(j)].assign(list(j.encode('utf-8')))\n  for k,v in safe_load(t).items(): v.assign(tensors[k])\n</code></pre>"},{"location":"nn/#tinygrad.nn.state.get_state_dict","title":"get_state_dict","text":"<pre><code>get_state_dict(\n    obj, prefix: str = \"\", tensor_type=Tensor\n) -&gt; Dict[str, Tensor]\n</code></pre> <p>Returns a state_dict of the object, with optional prefix.</p> <pre><code>class Net:\n  def __init__(self):\n    self.l1 = nn.Linear(4, 5)\n    self.l2 = nn.Linear(5, 6)\n\nnet = Net()\nprint(nn.state.get_state_dict(net).keys())\n</code></pre> <pre><code>dict_keys(['l1.weight', 'l1.bias', 'l2.weight', 'l2.bias'])\n</code></pre> Source code in <code>tinygrad/nn/state.py</code> <pre><code>def get_state_dict(obj, prefix:str='', tensor_type=Tensor) -&gt; Dict[str, Tensor]:\n  \"\"\"\n  Returns a state_dict of the object, with optional prefix.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  class Net:\n    def __init__(self):\n      self.l1 = nn.Linear(4, 5)\n      self.l2 = nn.Linear(5, 6)\n\n  net = Net()\n  print(nn.state.get_state_dict(net).keys())\n  ```\n  \"\"\"\n  if isinstance(obj, tensor_type): return {prefix.strip('.'):obj}\n  if hasattr(obj, '_asdict'): return get_state_dict(obj._asdict(), prefix, tensor_type)  # namedtuple\n  if isinstance(obj, OrderedDict): return get_state_dict(dict(obj), prefix, tensor_type)\n  if hasattr(obj, '__dict__'): return get_state_dict(obj.__dict__, prefix, tensor_type)\n  state_dict = {}\n  if isinstance(obj, (list, tuple)):\n    for i,x in enumerate(obj): state_dict.update(get_state_dict(x, f\"{prefix}{str(i)}.\", tensor_type))\n  elif isinstance(obj, dict):\n    for k,v in obj.items(): state_dict.update(get_state_dict(v, f\"{prefix}{str(k)}.\", tensor_type))\n  return state_dict\n</code></pre>"},{"location":"nn/#tinygrad.nn.state.get_parameters","title":"get_parameters","text":"<pre><code>get_parameters(obj) -&gt; List[Tensor]\n</code></pre> <pre><code>class Net:\n  def __init__(self):\n    self.l1 = nn.Linear(4, 5)\n    self.l2 = nn.Linear(5, 6)\n\nnet = Net()\nprint(len(nn.state.get_parameters(net)))\n</code></pre> <pre><code>4\n</code></pre> Source code in <code>tinygrad/nn/state.py</code> <pre><code>def get_parameters(obj) -&gt; List[Tensor]:\n  \"\"\"\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  class Net:\n    def __init__(self):\n      self.l1 = nn.Linear(4, 5)\n      self.l2 = nn.Linear(5, 6)\n\n  net = Net()\n  print(len(nn.state.get_parameters(net)))\n  ```\n  \"\"\"\n  return list(get_state_dict(obj).values())\n</code></pre>"},{"location":"nn/#tinygrad.nn.state.load_state_dict","title":"load_state_dict","text":"<pre><code>load_state_dict(\n    model,\n    state_dict: Dict[str, Tensor],\n    strict=True,\n    verbose=True,\n    consume=False,\n) -&gt; None\n</code></pre> <p>Loads a state_dict into a model.</p> <pre><code>class Net:\n  def __init__(self):\n    self.l1 = nn.Linear(4, 5)\n    self.l2 = nn.Linear(5, 6)\n\nnet = Net()\nstate_dict = nn.state.get_state_dict(net)\nnn.state.load_state_dict(net, state_dict)\n</code></pre> Source code in <code>tinygrad/nn/state.py</code> <pre><code>def load_state_dict(model, state_dict:Dict[str, Tensor], strict=True, verbose=True, consume=False) -&gt; None:\n  \"\"\"\n  Loads a state_dict into a model.\n\n  ```python\n  class Net:\n    def __init__(self):\n      self.l1 = nn.Linear(4, 5)\n      self.l2 = nn.Linear(5, 6)\n\n  net = Net()\n  state_dict = nn.state.get_state_dict(net)\n  nn.state.load_state_dict(net, state_dict)\n  ```\n  \"\"\"\n  start_mem_used = GlobalCounters.mem_used\n  with Timing(\"loaded weights in \", lambda et_ns: f\", {(GlobalCounters.mem_used-start_mem_used)/1e9:.2f} GB loaded at {(GlobalCounters.mem_used-start_mem_used)/et_ns:.2f} GB/s\"):  # noqa: E501\n    model_state_dict = get_state_dict(model)\n    if DEBUG &gt;= 1 and len(state_dict) &gt; len(model_state_dict):\n      print(\"WARNING: unused weights in state_dict\", sorted(list(state_dict.keys() - model_state_dict.keys())))\n    for k,v in (t := tqdm(model_state_dict.items(), disable=CI or not verbose)):\n      t.desc = f\"ram used: {GlobalCounters.mem_used/1e9:5.2f} GB, {k:50s}: \"\n      if k not in state_dict and not strict:\n        if DEBUG &gt;= 1: print(f\"WARNING: not loading {k}\")\n        continue\n      if isinstance((mlb:=v.lazydata), MultiLazyBuffer):\n        if isinstance(state_dict[k].lazydata, MultiLazyBuffer): v.replace(state_dict[k]).realize()\n        else: v.replace(state_dict[k].shard(mlb.device, mlb.axis)).realize()\n      else: v.replace(state_dict[k].to(v.device)).realize()\n      if consume: del state_dict[k]\n</code></pre>"},{"location":"nn/#tinygrad.nn.state.torch_load","title":"torch_load","text":"<pre><code>torch_load(fn: str) -&gt; Dict[str, Tensor]\n</code></pre> <p>Loads a torch .pth file from disk.</p> <pre><code>state_dict = nn.state.torch_load(\"test.pth\")\n</code></pre> Source code in <code>tinygrad/nn/state.py</code> <pre><code>def torch_load(fn:str) -&gt; Dict[str, Tensor]:\n  \"\"\"\n  Loads a torch .pth file from disk.\n\n  ```python\n  state_dict = nn.state.torch_load(\"test.pth\")\n  ```\n  \"\"\"\n  t = Tensor.empty(os.stat(fn).st_size, dtype=dtypes.uint8, device=f\"disk:{fn}\")\n\n  offsets: Dict[Union[str, int], int] = {}\n  lens: Dict[Union[str, int], int] = {}\n  def _rebuild_tensor_v2(storage, storage_offset, size, stride, requires_grad=None, backward_hooks=None, metadata=None):\n    #print(storage, storage_offset, size, stride, requires_grad, backward_hooks, metadata)\n    lens[storage[2]] = storage[4] * storage[1].itemsize\n    if storage[2] not in offsets: return None\n    byte_offset = offsets[storage[2]]+storage_offset*storage[1].itemsize\n    ret = t[byte_offset:byte_offset+prod(size)*storage[1].itemsize].bitcast(storage[1])\n\n    # 7 lines to deal with permuted tensors. NOTE: this currently requires reading off the disk\n    shape_strides = [(s, st) for s,st in zip(size, stride) if s != 1]\n    permute_indexes = [len(shape_strides)-1-y for y in argsort([x[1] for x in shape_strides])]\n    if tuple(permute_indexes) != tuple(range(len(permute_indexes))):\n      intermediate_shape = tuple([shape_strides[x][0] for x in argsort(permute_indexes)])\n      assert tuple([shape_strides[i][1] for i in argsort(permute_indexes)]) == strides_for_shape(intermediate_shape), \"nonpermutable strides\"\n      if DEBUG &gt;= 3: print(f\"WARNING: this torch load is slow. CLANG to permute {intermediate_shape} with {permute_indexes}\")\n      assert storage[1] != dtypes.bfloat16, \"can't CLANG permute BF16\"\n      # TODO: find a nice way to support all shapetracker on disktensors\n      ret = ret.clang().reshape(intermediate_shape).permute(permute_indexes)\n\n    return ret.reshape(size)\n\n  class Parameter:\n    def __setstate__(self, state): self.tensor = state[0]\n\n  deserialized_objects: Dict[str, Any] = {}\n  intercept = {\"HalfStorage\": dtypes.float16, \"FloatStorage\": dtypes.float32, \"BFloat16Storage\": dtypes.bfloat16, \"IntStorage\": dtypes.int32,\n               \"LongStorage\": dtypes.int64, \"_rebuild_tensor_v2\": _rebuild_tensor_v2, \"FloatTensor\": None, \"Parameter\": Parameter}\n  whitelist = {\"torch\", \"collections\", \"numpy\", \"_codecs\"}  # NOTE: this is not for security, only speed\n  class Dummy: pass\n  class TorchPickle(pickle.Unpickler):\n    def find_class(self, module, name):\n      module_root = module.split(\".\")[0]\n      if module_root not in whitelist:\n        if DEBUG &gt;= 2: print(f\"WARNING: returning Dummy for {module} {name}\")\n        return Dummy\n      return intercept[name] if module_root == \"torch\" else super().find_class(module, name)\n    def persistent_load(self, pid): return deserialized_objects.get(pid, pid)\n\n  if zipfile.is_zipfile(fn):\n    myzip = zipfile.ZipFile(fn, 'r')\n    base_name = myzip.namelist()[0].split('/', 1)[0]\n    for n in myzip.namelist():\n      if n.startswith(f'{base_name}/data/'):\n        with myzip.open(n) as myfile:\n          offsets[n.split(\"/\")[-1]] = myfile._orig_compress_start # type: ignore\n    with myzip.open(f'{base_name}/data.pkl') as myfile:\n      return TorchPickle(myfile).load()\n  elif tarfile.is_tarfile(fn):\n    with tarfile.open(fn, \"r\") as tar:\n      storages_offset = tar.getmember('storages').offset_data\n      f = unwrap(tar.extractfile('storages'))\n      for i in range(TorchPickle(f).load()):  # num_storages\n        (key, _, storage_type), sz = TorchPickle(f).load(), struct.unpack('&lt;q', f.read(8))[0]\n        offsets[key] = storages_offset + f.tell()\n        f.seek(sz*storage_type.itemsize, 1)\n      f = unwrap(tar.extractfile('tensors'))\n      for _ in range(TorchPickle(f).load()):  # num_tensors\n        (key, storage_id, _), ndim, _ = TorchPickle(f).load(), struct.unpack('&lt;i', f.read(4))[0], f.read(4)\n        size, stride = struct.unpack(f'&lt;{ndim}q', f.read(8 * ndim)), struct.unpack(f'&lt;{ndim}q', f.read(8 * ndim))\n        storage_offset = struct.unpack('&lt;q', f.read(8))[0]\n        deserialized_objects[str(key)] = _rebuild_tensor_v2((None, storage_type, storage_id, None, -1), storage_offset, size, stride)\n      return {k:v.tensor if isinstance(v, Parameter) else v for k,v in TorchPickle(unwrap(tar.extractfile('pickle'))).load().items()}\n  else:\n    with open(fn, \"rb\") as f:\n      pkl = TorchPickle(f)\n      _, _, _, rwd, _, ids, base_offset = pkl.load(), pkl.load(), pkl.load(), f.tell(), pkl.load(), pkl.load(), f.tell()\n      for i in ids:\n        offsets[i] = base_offset + 8\n        base_offset += 8 + lens[i]\n      f.seek(rwd)\n      return TorchPickle(f).load()\n</code></pre>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>This guide assumes no prior knowledge of pytorch or any other deep learning framework, but does assume some basic knowledge of neural networks. It is intended to be a very quick overview of the high level API that tinygrad provides.</p> <p>This guide is also structured as a tutorial which at the end of it you will have a working model that can classify handwritten digits.</p> <p>We need some imports to get started:</p> <pre><code>import numpy as np\nfrom tinygrad.helpers import Timing\n</code></pre>"},{"location":"quickstart/#tensors","title":"Tensors","text":"<p>Tensors are the base data structure in tinygrad. They can be thought of as a multidimensional array of a specific data type. All high level operations in tinygrad operate on these tensors.</p> <p>The tensor class can be imported like so:</p> <pre><code>from tinygrad import Tensor\n</code></pre> <p>Tensors can be created from an existing data structure like a python list or numpy ndarray:</p> <pre><code>t1 = Tensor([1, 2, 3, 4, 5])\nna = np.array([1, 2, 3, 4, 5])\nt2 = Tensor(na)\n</code></pre> <p>Tensors can also be created using one of the many factory methods:</p> <pre><code>full = Tensor.full(shape=(2, 3), fill_value=5) # create a tensor of shape (2, 3) filled with 5\nzeros = Tensor.zeros(2, 3) # create a tensor of shape (2, 3) filled with 0\nones = Tensor.ones(2, 3) # create a tensor of shape (2, 3) filled with 1\n\nfull_like = Tensor.full_like(full, fill_value=2) # create a tensor of the same shape as `full` filled with 2\nzeros_like = Tensor.zeros_like(full) # create a tensor of the same shape as `full` filled with 0\nones_like = Tensor.ones_like(full) # create a tensor of the same shape as `full` filled with 1\n\neye = Tensor.eye(3) # create a 3x3 identity matrix\narange = Tensor.arange(start=0, stop=10, step=1) # create a tensor of shape (10,) filled with values from 0 to 9\n\nrand = Tensor.rand(2, 3) # create a tensor of shape (2, 3) filled with random values from a uniform distribution\nrandn = Tensor.randn(2, 3) # create a tensor of shape (2, 3) filled with random values from a standard normal distribution\nuniform = Tensor.uniform(2, 3, low=0, high=10) # create a tensor of shape (2, 3) filled with random values from a uniform distribution between 0 and 10\n</code></pre> <p>There are even more of these factory methods, you can find them in the Tensor Creation file.</p> <p>All the tensors creation methods can take a <code>dtype</code> argument to specify the data type of the tensor, find the supported <code>dtype</code> in dtypes.</p> <pre><code>from tinygrad import dtypes\n\nt3 = Tensor([1, 2, 3, 4, 5], dtype=dtypes.int32)\n</code></pre> <p>Tensors allow you to perform operations on them like so:</p> <pre><code>t4 = Tensor([1, 2, 3, 4, 5])\nt5 = (t4 + 1) * 2\nt6 = (t5 * t4).relu().log_softmax()\n</code></pre> <p>All of these operations are lazy and are only executed when you realize the tensor using <code>.realize()</code> or <code>.numpy()</code>.</p> <pre><code>print(t6.numpy())\n# [-56. -48. -36. -20.   0.]\n</code></pre> <p>There are a lot more operations that can be performed on tensors, you can find them in the Tensor Ops file. Additionally reading through abstractions2.py will help you understand how operations on these tensors make their way down to your hardware.</p>"},{"location":"quickstart/#models","title":"Models","text":"<p>Neural networks in tinygrad are really just represented by the operations performed on tensors. These operations are commonly grouped into the <code>__call__</code> method of a class which allows modularization and reuse of these groups of operations. These classes do not need to inherit from any base class, in fact if they don't need any trainable parameters they don't even need to be a class!</p> <p>An example of this would be the <code>nn.Linear</code> class which represents a linear layer in a neural network.</p> <pre><code>class Linear:\n  def __init__(self, in_features, out_features, bias=True, initialization: str='kaiming_uniform'):\n    self.weight = getattr(Tensor, initialization)(out_features, in_features)\n    self.bias = Tensor.zeros(out_features) if bias else None\n\n  def __call__(self, x):\n    return x.linear(self.weight.transpose(), self.bias)\n</code></pre> <p>There are more neural network modules already implemented in nn, and you can also implement your own.</p> <p>We will be implementing a simple neural network that can classify handwritten digits from the MNIST dataset. Our classifier will be a simple 2 layer neural network with a Leaky ReLU activation function. It will use a hidden layer size of 128 and an output layer size of 10 (one for each digit) with no bias on either Linear layer.</p> <pre><code>class TinyNet:\n  def __init__(self):\n    self.l1 = Linear(784, 128, bias=False)\n    self.l2 = Linear(128, 10, bias=False)\n\n  def __call__(self, x):\n    x = self.l1(x)\n    x = x.leakyrelu()\n    x = self.l2(x)\n    return x\n\nnet = TinyNet()\n</code></pre> <p>We can see that the forward pass of our neural network is just the sequence of operations performed on the input tensor <code>x</code>. We can also see that functional operations like <code>leakyrelu</code> are not defined as classes and instead are just methods we can just call. Finally, we just initialize an instance of our neural network, and we are ready to start training it.</p>"},{"location":"quickstart/#training","title":"Training","text":"<p>Now that we have our neural network defined we can start training it. Training neural networks in tinygrad is super simple. All we need to do is define our neural network, define our loss function, and then call <code>.backward()</code> on the loss function to compute the gradients. They can then be used to update the parameters of our neural network using one of the many Optimizers.</p> <p>For our loss function we will be using sparse categorical cross entropy loss. The implementation below is taken from tensor.py, it's copied below to highlight an important detail of tinygrad.</p> <pre><code>def sparse_categorical_crossentropy(self, Y, ignore_index=-1) -&gt; Tensor:\n    loss_mask = Y != ignore_index\n    y_counter = Tensor.arange(self.shape[-1], dtype=dtypes.int32, requires_grad=False, device=self.device).unsqueeze(0).expand(Y.numel(), self.shape[-1])\n    y = ((y_counter == Y.flatten().reshape(-1, 1)).where(-1.0, 0) * loss_mask.reshape(-1, 1)).reshape(*Y.shape, self.shape[-1])\n    return self.log_softmax().mul(y).sum() / loss_mask.sum()\n</code></pre> <p>As we can see in this implementation of cross entropy loss, there are certain operations that tinygrad does not support natively. Load/store ops are not supported in tinygrad natively because they add complexity when trying to port to different backends, 90% of the models out there don't use/need them, and they can be implemented like it's done above with an <code>arange</code> mask.</p> <p>For our optimizer we will be using the traditional stochastic gradient descent optimizer with a learning rate of 3e-4.</p> <pre><code>from tinygrad.nn.optim import SGD\n\nopt = SGD([net.l1.weight, net.l2.weight], lr=3e-4)\n</code></pre> <p>We can see that we are passing in the parameters of our neural network to the optimizer. This is due to the fact that the optimizer needs to know which parameters to update. There is a simpler way to do this just by using <code>get_parameters(net)</code> from <code>tinygrad.nn.state</code> which will return a list of all the parameters in the neural network. The parameters are just listed out explicitly here for clarity.</p> <p>Now that we have our network, loss function, and optimizer defined all we are missing is the data to train on! There are a couple of dataset loaders in tinygrad located in /extra/datasets. We will be using the MNIST dataset loader.</p> <pre><code>from extra.datasets import fetch_mnist\n</code></pre> <p>Now we have everything we need to start training our neural network. We will be training for 1000 steps with a batch size of 64.</p> <p>We use <code>with Tensor.train()</code> set the internal flag <code>Tensor.training</code> to <code>True</code> during training. Upon exit, the flag is restored to its previous value by the context manager.</p> <pre><code>X_train, Y_train, X_test, Y_test = fetch_mnist()\n\nwith Tensor.train():\n  for step in range(1000):\n    # random sample a batch\n    samp = np.random.randint(0, X_train.shape[0], size=(64))\n    batch = Tensor(X_train[samp], requires_grad=False)\n    # get the corresponding labels\n    labels = Tensor(Y_train[samp])\n\n    # forward pass\n    out = net(batch)\n\n    # compute loss\n    loss = sparse_categorical_crossentropy(out, labels)\n\n    # zero gradients\n    opt.zero_grad()\n\n    # backward pass\n    loss.backward()\n\n    # update parameters\n    opt.step()\n\n    # calculate accuracy\n    pred = out.argmax(axis=-1)\n    acc = (pred == labels).mean()\n\n    if step % 100 == 0:\n      print(f\"Step {step+1} | Loss: {loss.numpy()} | Accuracy: {acc.numpy()}\")\n</code></pre>"},{"location":"quickstart/#evaluation","title":"Evaluation","text":"<p>Now that we have trained our neural network we can evaluate it on the test set. We will be using the same batch size of 64 and will be evaluating for 1000 of those batches.</p> <pre><code>with Timing(\"Time: \"):\n  avg_acc = 0\n  for step in range(1000):\n    # random sample a batch\n    samp = np.random.randint(0, X_test.shape[0], size=(64))\n    batch = Tensor(X_test[samp], requires_grad=False)\n    # get the corresponding labels\n    labels = Y_test[samp]\n\n    # forward pass\n    out = net(batch)\n\n    # calculate accuracy\n    pred = out.argmax(axis=-1).numpy()\n    avg_acc += (pred == labels).mean()\n  print(f\"Test Accuracy: {avg_acc / 1000}\")\n</code></pre>"},{"location":"quickstart/#and-thats-it","title":"And that's it","text":"<p>Highly recommend you check out the examples/ folder for more examples of using tinygrad. Reading the source code of tinygrad is also a great way to learn how it works. Specifically the tests in test/ are a great place to see how to use and the semantics of the different operations. There are also a bunch of models implemented in models/ that you can use as a reference.</p> <p>Additionally, feel free to ask questions in the <code>#learn-tinygrad</code> channel on the discord. Don't ask to ask, just ask!</p>"},{"location":"quickstart/#extras","title":"Extras","text":""},{"location":"quickstart/#jit","title":"JIT","text":"<p>Additionally, it is possible to speed up the computation of certain neural networks by using the JIT. Currently, this does not support models with varying input sizes and non tinygrad operations.</p> <p>To use the JIT we just need to add a function decorator to the forward pass of our neural network and ensure that the input and output are realized tensors. Or in this case we will create a wrapper function and decorate the wrapper function to speed up the evaluation of our neural network.</p> <pre><code>from tinygrad import TinyJit\n\n@TinyJit\ndef jit(x):\n  return net(x).realize()\n\nwith Timing(\"Time: \"):\n  avg_acc = 0\n  for step in range(1000):\n    # random sample a batch\n    samp = np.random.randint(0, X_test.shape[0], size=(64))\n    batch = Tensor(X_test[samp], requires_grad=False)\n    # get the corresponding labels\n    labels = Y_test[samp]\n\n    # forward pass with jit\n    out = jit(batch)\n\n    # calculate accuracy\n    pred = out.argmax(axis=-1).numpy()\n    avg_acc += (pred == labels).mean()\n  print(f\"Test Accuracy: {avg_acc / 1000}\")\n</code></pre> <p>You will find that the evaluation time is much faster than before and that your accelerator utilization is much higher.</p>"},{"location":"quickstart/#saving-and-loading-models","title":"Saving and Loading Models","text":"<p>The standard weight format for tinygrad is safetensors. This means that you can load the weights of any model also using safetensors into tinygrad. There are functions in state.py to save and load models to and from this format.</p> <pre><code>from tinygrad.nn.state import safe_save, safe_load, get_state_dict, load_state_dict\n\n# first we need the state dict of our model\nstate_dict = get_state_dict(net)\n\n# then we can just save it to a file\nsafe_save(state_dict, \"model.safetensors\")\n\n# and load it back in\nstate_dict = safe_load(\"model.safetensors\")\nload_state_dict(net, state_dict)\n</code></pre> <p>Many of the models in the models/ folder have a <code>load_from_pretrained</code> method that will download and load the weights for you. These usually are pytorch weights meaning that you would need pytorch installed to load them.</p>"},{"location":"quickstart/#environment-variables","title":"Environment Variables","text":"<p>There exist a bunch of environment variables that control the runtime behavior of tinygrad. Some of the commons ones are <code>DEBUG</code> and the different backend enablement variables.</p> <p>You can find a full list and their descriptions in env_vars.md.</p>"},{"location":"quickstart/#visualizing-the-computation-graph","title":"Visualizing the Computation Graph","text":"<p>It is possible to visualize the computation graph of a neural network using graphviz.</p> <p>This is easily done by running a single pass (forward or backward!) of the neural network with the environment variable <code>GRAPH</code> set to <code>1</code>. The graph will be saved to <code>/tmp/net.svg</code> by default.</p>"},{"location":"showcase/","title":"Showcase","text":"<p>Despite being a tiny library, tinygrad is capable of doing a lot of things. From state-of-the-art vision to state-of-the-art language models.</p>"},{"location":"showcase/#vision","title":"Vision","text":""},{"location":"showcase/#efficientnet","title":"EfficientNet","text":"<p>You can either pass in the URL of a picture to discover what it is: <pre><code>python3 examples/efficientnet.py ./test/models/efficientnet/Chicken.jpg\n</code></pre> Or, if you have a camera and OpenCV installed, you can detect what is in front of you: <pre><code>python3 examples/efficientnet.py webcam\n</code></pre></p>"},{"location":"showcase/#yolov8","title":"YOLOv8","text":"<p>Take a look at yolov8.py.</p> <p></p>"},{"location":"showcase/#audio","title":"Audio","text":""},{"location":"showcase/#whisper","title":"Whisper","text":"<p>Take a look at whisper.py. You need pyaudio and torchaudio installed.</p> <pre><code>SMALL=1 python3 examples/whisper.py\n</code></pre>"},{"location":"showcase/#generative","title":"Generative","text":""},{"location":"showcase/#stable-diffusion","title":"Stable Diffusion","text":"<pre><code>python3 examples/stable_diffusion.py\n</code></pre> <p>\"a horse sized cat eating a bagel\"</p>"},{"location":"showcase/#llama","title":"LLaMA","text":"<p>You will need to download and put the weights into the <code>weights/LLaMA</code> directory, which may need to be created.</p> <p>Then you can have a chat with Stacy: <pre><code>python3 examples/llama.py\n</code></pre></p>"},{"location":"showcase/#conversation","title":"Conversation","text":"<p>Make sure you have espeak installed and <code>PHONEMIZER_ESPEAK_LIBRARY</code> set.</p> <p>Then you can talk to Stacy: <pre><code>python3 examples/conversation.py\n</code></pre></p>"},{"location":"tinybox/","title":"tinybox","text":"<p>Although these docs live in tinygrad, they pertain to deep learning hardware sold by the tiny corp. tinyboxes are used heavily in tinygrad's CI, and are the best tested platform to use tinygrad with. They appeared running tinygrad on MLPerf Training 4.0</p> <p>If you don't have a tinybox and you want one, see tinygrad.org. If you don't want one, that's okay too.</p>"},{"location":"tinybox/#welcome","title":"Welcome","text":"<p>Welcome to your tinybox! The tinybox is the universal system purpose-built for all AI infrastructure and workloads, from training to inference. The red box includes six 7900XTX GPUs, and the green box includes six 4090 GPUs. Whether you bought a red one or a green one, we want you to love it.</p> <p>We don't have a stupid cloud service, you don't have to create a tiny account to set it up, and we aren't tracking how you use the box. We're just happy you bought one. This petaflop is your petaflop.</p>"},{"location":"tinybox/#plugging-it-in","title":"Plugging it in","text":"<p>tinybox has two 1600W PSUs, which together exceed the capacity of most 120V household circuits. Fortunately, it comes with two plugs. You'll want to plug each plug into a different circuit. You can verify that they are different circuits by flipping the breaker and seeing what turns off. If you have at least a 120V 30A or 220V 15A circuit, you are welcome to use only that one.</p> <p>You'll also want to connect the Ethernet port without a rubber stopper to your home network.</p> <p>While it's designed primarily for the home or office, the tinybox is 12U rack mountable using these rails.</p>"},{"location":"tinybox/#power-limiting-the-box","title":"Power limiting the box","text":"<p>While a tinybox should ideally be run without power limits, there are cases where you might want to run the box off of a single outlet.</p> <p>In such cases, it is possible to power limit the box using the provided <code>power-limit</code> script, which will power limit all of the GPUs to a specified wattage.</p> <p><code>sudo power-limit 150</code> should be good to run off of a single 120V 15A outlet.</p>"},{"location":"tinybox/#connecting-to-the-box","title":"Connecting to the box","text":"<p>tinybox ships with a relatively basic install of Ubuntu 22.04. To do initial setup, you can either plug in a VGA monitor and keyboard, or you can connect remotely to the machine using the BMC. The BMC IP and password are displayed on the screen.</p> <p><code>ipmitool -H &lt;BMC IP&gt; -U admin -P &lt;BMC PW&gt; -I lanplus sol activate</code></p> <p>The default username is <code>tiny</code> and the default password is <code>tiny</code>. Once you are logged in, you can add an SSH key to authorized keys to connect over SSH (on the normal IP). Exit <code>ipmitool</code> with <code>~~.</code></p> <p>The BMC also has a web interface you can use if you find that easier.</p>"},{"location":"tinybox/#changing-the-bmc-password","title":"Changing the BMC password","text":"<p>If you try to change the BMC password over IPMI or over the web interface, you will notice that it does not persist across reboots, and the password will revert to the one displayed on the screen.</p> <p>If you want to change the password imperatively, remove the <code>/root/.bmc_password</code> file and then set the password, the BMC password will also no longer be displayed on the screen. Additionally, you may modify the password stored in the <code>/root/.bmc_password</code> file to one that you choose if you still want it displayed on the screen.</p> <p>Reboot after making these changes.</p>"},{"location":"tinybox/#what-do-i-use-it-for","title":"What do I use it for?","text":"<p>The default tinybox image ships with tinygrad and PyTorch. While we develop tinygrad, the box is universal hardware. Use whatever framework you desire, run notebooks, download demos, install more things, train, inference, live, laugh, love, you aren't paying per hour for this box so the only limit is your imagination.</p>"},{"location":"tinybox/#tinychat","title":"tinychat","text":"<p>Since LLMs are so popular, we ship with a built in tinygrad based chatbot using a LLaMA-3 finetune. Visit the IP (not the BMC IP) of your tinybox in a web browser on your computer or phone, and you'll find a friendly looking chat interface. This chatbot also provides an OpenAI compatible LLM API on that port, so you can script it.</p> <p>The conversations you have with this chatbot are between you and your tinybox. Also, the history in the web app is saved on the client, not the tinybox.</p>"},{"location":"runtime/hcq/","title":"HCQ Compatible Runtime","text":""},{"location":"runtime/hcq/#overview","title":"Overview","text":"<p>The main aspect of HCQ-compatible runtimes is how they interact with devices. In HCQ, all interactions with devices occur in a hardware-friendly manner using command queues. This approach allows commands to be issued directly to devices, bypassing runtime overhead such as HIP or CUDA. Additionally, by using the HCQ API, these runtimes can benefit from various optimizations and features, including HCQGraph and built-in profiling capabilities.</p>"},{"location":"runtime/hcq/#command-queues","title":"Command Queues","text":"<p>To interact with devices, there are 2 types of queues: <code>HWComputeQueue</code> and <code>HWCopyQueue</code>. Commands which are defined in a base <code>HWCommandQueue</code> class should be supported by both queues. These methods are timestamp and synchronization methods like signal and wait.</p> <p>For example, the following Python code enqueues a wait, execute, and signal command on the HCQ-compatible device: <pre><code>HWComputeQueue().wait(signal_to_wait, value_to_wait) \\\n                .exec(program, kernargs_ptr, global_dims, local_dims) \\\n                .signal(signal_to_fire, value_to_fire) \\\n                .submit(your_device)\n</code></pre></p> <p>Each runtime should implement the required functions that are defined in the <code>HWCommandQueue</code>, <code>HWComputeQueue</code>, and <code>HWCopyQueue</code> classes.</p>"},{"location":"runtime/hcq/#tinygrad.device.HWCommandQueue","title":"HWCommandQueue","text":"<pre><code>HWCommandQueue()\n</code></pre> <p>A base class for hardware command queues in the HCQ (Hardware Command Queue) API. Both compute and copy queues should have the following commands implemented.</p>"},{"location":"runtime/hcq/#tinygrad.device.HWCommandQueue.signal","title":"signal","text":"<pre><code>signal(signal: HCQSignal, value: int)\n</code></pre> <p>Enqueues a signal command which sets the signal to the given value, ensuring all previous operations are completed.</p> <p>Parameters:</p> <ul> <li> <code>signal</code>               (<code>HCQSignal</code>)           \u2013            <p>The signal to set</p> </li> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The value to set the signal to</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWCommandQueue.wait","title":"wait","text":"<pre><code>wait(signal: HCQSignal, value: int)\n</code></pre> <p>Enqueues a wait command which halts execution until the signal is greater than or equal to a specific value.</p> <p>Parameters:</p> <ul> <li> <code>signal</code>               (<code>HCQSignal</code>)           \u2013            <p>The signal to wait on</p> </li> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The value to wait for</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWCommandQueue.timestamp","title":"timestamp","text":"<pre><code>timestamp(signal: HCQSignal)\n</code></pre> <p>Enqueues a timestamp command which records the current time in a signal after all previously enqueued commands are completed.</p> <p>Parameters:</p> <ul> <li> <code>signal</code>               (<code>HCQSignal</code>)           \u2013            <p>The signal to store the timestamp</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWCommandQueue.update_signal","title":"update_signal","text":"<pre><code>update_signal(\n    cmd_idx: int,\n    signal: Optional[Any] = None,\n    value: Optional[int] = None,\n)\n</code></pre> <p>Updates a previously queued signal command.</p> <p>Parameters:</p> <ul> <li> <code>cmd_idx</code>               (<code>int</code>)           \u2013            <p>Index of the signal command to update</p> </li> <li> <code>signal</code>               (<code>Optional[Any]</code>, default:                   <code>None</code> )           \u2013            <p>New signal to set (if None, keeps the original)</p> </li> <li> <code>value</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>New value to set (if None, keeps the original)</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWCommandQueue.update_wait","title":"update_wait","text":"<pre><code>update_wait(\n    cmd_idx: int,\n    signal: Optional[Any] = None,\n    value: Optional[int] = None,\n)\n</code></pre> <p>Updates a previously queued wait command.</p> <p>Parameters:</p> <ul> <li> <code>cmd_idx</code>               (<code>int</code>)           \u2013            <p>Index of the wait command to update</p> </li> <li> <code>signal</code>               (<code>Optional[Any]</code>, default:                   <code>None</code> )           \u2013            <p>New signal to wait on (if None, keeps the original)</p> </li> <li> <code>value</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>New value to wait for (if None, keeps the original)</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWCommandQueue.submit","title":"submit","text":"<pre><code>submit(device: HCQCompiled)\n</code></pre> <p>Submits the command queue to a specific device for execution.</p> <p>Parameters:</p> <ul> <li> <code>device</code>               (<code>HCQCompiled</code>)           \u2013            <p>The device to submit the queue to</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWComputeQueue","title":"HWComputeQueue","text":"<pre><code>HWComputeQueue()\n</code></pre> <p>               Bases: <code>HWCommandQueue</code></p>"},{"location":"runtime/hcq/#tinygrad.device.HWComputeQueue.memory_barrier","title":"memory_barrier","text":"<pre><code>memory_barrier()\n</code></pre> <p>Enqueues a memory barrier command to ensure memory coherence between agents.</p>"},{"location":"runtime/hcq/#tinygrad.device.HWComputeQueue.exec","title":"exec","text":"<pre><code>exec(\n    prg: HCQProgram,\n    kernargs: int,\n    global_size: Tuple[int, int, int],\n    local_size: Tuple[int, int, int],\n)\n</code></pre> <p>Enqueues an execution command for a kernel program.</p> <p>Parameters:</p> <ul> <li> <code>prg</code>               (<code>HCQProgram</code>)           \u2013            <p>The program to execute</p> </li> <li> <code>kernargs</code>               (<code>int</code>)           \u2013            <p>The pointer to kernel arguments</p> </li> <li> <code>global_size</code>               (<code>Tuple[int, int, int]</code>)           \u2013            <p>The global work size</p> </li> <li> <code>local_size</code>               (<code>Tuple[int, int, int]</code>)           \u2013            <p>The local work size</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWComputeQueue.update_exec","title":"update_exec","text":"<pre><code>update_exec(\n    cmd_idx: int,\n    global_size: Tuple[int, int, int],\n    local_size: Tuple[int, int, int],\n)\n</code></pre> <p>Updates a previously queued execution command.</p> <p>Parameters:</p> <ul> <li> <code>cmd_idx</code>               (<code>int</code>)           \u2013            <p>Index of the execution command to update</p> </li> <li> <code>global_size</code>               (<code>Tuple[int, int, int]</code>)           \u2013            <p>New global work size</p> </li> <li> <code>local_size</code>               (<code>Tuple[int, int, int]</code>)           \u2013            <p>New local work size</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWCopyQueue","title":"HWCopyQueue","text":"<pre><code>HWCopyQueue()\n</code></pre> <p>               Bases: <code>HWCommandQueue</code></p>"},{"location":"runtime/hcq/#tinygrad.device.HWCopyQueue.copy","title":"copy","text":"<pre><code>copy(dest: HCQBuffer, src: HCQBuffer, copy_size: int)\n</code></pre> <p>Enqueues a copy command to transfer data.</p> <p>Parameters:</p> <ul> <li> <code>dest</code>               (<code>HCQBuffer</code>)           \u2013            <p>The destination of the copy</p> </li> <li> <code>src</code>               (<code>HCQBuffer</code>)           \u2013            <p>The source of the copy</p> </li> <li> <code>copy_size</code>               (<code>int</code>)           \u2013            <p>The size of data to copy</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HWCopyQueue.update_copy","title":"update_copy","text":"<pre><code>update_copy(\n    cmd_idx: int,\n    dest: Optional[HCQBuffer] = None,\n    src: Optional[HCQBuffer] = None,\n)\n</code></pre> <p>Updates a previously queued copy command.</p> <p>Parameters:</p> <ul> <li> <code>cmd_idx</code>               (<code>int</code>)           \u2013            <p>Index of the copy command to update</p> </li> <li> <code>dest</code>               (<code>Optional[HCQBuffer]</code>, default:                   <code>None</code> )           \u2013            <p>New destination of the copy (if None, keeps the original)</p> </li> <li> <code>src</code>               (<code>Optional[HCQBuffer]</code>, default:                   <code>None</code> )           \u2013            <p>New source of the copy (if None, keeps the original)</p> </li> </ul>"},{"location":"runtime/hcq/#implementing-custom-commands","title":"Implementing custom commands","text":"<p>To implement custom commands in the queue, use the @hcq_command decorator for your command implementations.</p>"},{"location":"runtime/hcq/#tinygrad.device.hcq_command","title":"hcq_command","text":"<pre><code>hcq_command(func)\n</code></pre> <p>Decorator for HWCommandQueue commands. Enables command indexing and stores metadata for command updates.</p> For example <pre><code>  @hcq_command\n  def command_method(self, ...): ...\n</code></pre>"},{"location":"runtime/hcq/#hcq-compatible-device","title":"HCQ Compatible Device","text":"<p>The <code>HCQCompiled</code> class defines the API for HCQ-compatible devices. This class serves as an abstract base class that device-specific implementations should inherit from and implement.</p>"},{"location":"runtime/hcq/#tinygrad.device.HCQCompiled","title":"HCQCompiled","text":"<pre><code>HCQCompiled(\n    device: str,\n    allocator: Allocator,\n    renderer: Renderer,\n    compiler: Compiler,\n    runtime,\n    signal_t: Type[HCQSignal],\n    comp_queue_t: Type[HWComputeQueue],\n    copy_queue_t: Type[HWCopyQueue],\n    timeline_signals: Tuple[HCQSignal, HCQSignal],\n)\n</code></pre> <p>               Bases: <code>Compiled</code></p> <p>A base class for devices compatible with the HCQ (Hardware Command Queue) API.</p>"},{"location":"runtime/hcq/#signals","title":"Signals","text":"<p>Signals are device-dependent structures used for synchronization and timing in HCQ-compatible devices. They should be designed to record both a <code>value</code> and a <code>timestamp</code> within the same signal. HCQ-compatible backend implementations should use <code>HCQSignal</code> as a base class.</p> <p>The following Python code demonstrates the usage of signals:</p> <pre><code>signal = your_device.signal_t()\n\nHWComputeQueue().timestamp(signal) \\\n                .signal(signal, value_to_fire) \\\n                .submit(your_device)\n\nsignal.wait(value_to_fire)\nsignaled_value = signal.value # should be the same as `value_to_fire`\ntimestamp = signal.timestamp\n</code></pre>"},{"location":"runtime/hcq/#tinygrad.device.HCQSignal","title":"HCQSignal","text":""},{"location":"runtime/hcq/#tinygrad.device.HCQSignal.value","title":"value  <code>property</code> <code>writable</code>","text":"<pre><code>value: int\n</code></pre>"},{"location":"runtime/hcq/#tinygrad.device.HCQSignal.timestamp","title":"timestamp  <code>property</code>","text":"<pre><code>timestamp: float\n</code></pre> <p>Get the timestamp field of the signal.</p> <p>This property provides read-only access to the signal's timestamp.</p> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>The timestamp in microseconds.</p> </li> </ul>"},{"location":"runtime/hcq/#tinygrad.device.HCQSignal.wait","title":"wait","text":"<pre><code>wait(value: int, timeout: int = 10000)\n</code></pre> <p>Waits the signal is greater than or equal to a specific value.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>int</code>)           \u2013            <p>The value to wait for.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>10000</code> )           \u2013            <p>Maximum time to wait in milliseconds. Defaults to 10s.</p> </li> </ul>"},{"location":"runtime/hcq/#synchronization-signals","title":"Synchronization signals","text":"<p>Each HCQ-compatible device must allocate two signals for global synchronization purposes. These signals are passed to the <code>HCQCompiled</code> base class during initialization: an active timeline signal <code>self.timeline_signal</code> and a shadow timeline signal <code>self._shadow_timeline_signal</code> which helps to handle signal value overflow issues. You can find more about synchronization in the synchronization section</p>"},{"location":"runtime/hcq/#hcq-compatible-allocator","title":"HCQ Compatible Allocator","text":"<p>The <code>HCQAllocator</code> base class simplifies allocator logic by leveraging command queues abstractions. This class efficiently handles copy and transfer operations, leaving only the alloc and free functions to be implemented by individual backends.</p>"},{"location":"runtime/hcq/#tinygrad.device.HCQAllocator","title":"HCQAllocator","text":"<pre><code>HCQAllocator(\n    device: HCQCompiled,\n    batch_size: int = 2 &lt;&lt; 20,\n    batch_cnt: int = 32,\n)\n</code></pre> <p>               Bases: <code>LRUAllocator</code></p> <p>A base allocator class compatible with the HCQ (Hardware Command Queue) API.</p> <p>This class implements basic copy operations following the HCQ API, utilizing both <code>HWComputeQueue</code> and <code>HWCopyQueue</code>.</p>"},{"location":"runtime/hcq/#tinygrad.device.HCQAllocator._alloc","title":"_alloc","text":"<pre><code>_alloc(size: int, options: BufferOptions) -&gt; HCQBuffer\n</code></pre>"},{"location":"runtime/hcq/#hcq-allocator-result-protocol","title":"HCQ Allocator Result Protocol","text":"<p>Backends must adhere to the <code>HCQBuffer</code> protocol when returning allocation results.</p>"},{"location":"runtime/hcq/#tinygrad.device.HCQBuffer","title":"HCQBuffer","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"runtime/hcq/#tinygrad.device.HCQBuffer.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size: int\n</code></pre>"},{"location":"runtime/hcq/#tinygrad.device.HCQBuffer.va_addr","title":"va_addr  <code>instance-attribute</code>","text":"<pre><code>va_addr: int\n</code></pre>"},{"location":"runtime/hcq/#hcq-compatible-program","title":"HCQ Compatible Program","text":"<p>The <code>HCQProgram</code> is a helper base class for defining programs compatible with HCQ-compatible devices. Currently, the arguments consist of pointers to buffers, followed by <code>vals</code> fields. The convention expects a packed struct containing the passed pointers, followed by <code>vals</code> located at <code>kernargs_args_offset</code>.</p>"},{"location":"runtime/hcq/#tinygrad.device.HCQProgram","title":"HCQProgram","text":"<pre><code>HCQProgram(\n    device: HCQCompiled,\n    name: str,\n    kernargs_alloc_size: int,\n    kernargs_args_offset: int = 0,\n)\n</code></pre>"},{"location":"runtime/hcq/#tinygrad.device.HCQProgram.__call__","title":"__call__","text":"<pre><code>__call__(\n    *args,\n    global_size: Tuple[int, int, int] = (1, 1, 1),\n    local_size: Tuple[int, int, int] = (1, 1, 1),\n    vals: Tuple[int, ...] = (),\n    wait=False\n)\n</code></pre>"},{"location":"runtime/hcq/#tinygrad.device.HCQProgram._fill_kernargs","title":"_fill_kernargs","text":"<pre><code>_fill_kernargs(\n    kernargs_ptr: int,\n    bufs: Tuple[Any, ...],\n    vals: Tuple[int, ...] = (),\n)\n</code></pre>"},{"location":"runtime/hcq/#tinygrad.device.HCQProgram.fill_kernargs","title":"fill_kernargs","text":"<pre><code>fill_kernargs(\n    bufs: Tuple[Any, ...],\n    vals: Tuple[int, ...] = (),\n    kernargs_ptr: Optional[int] = None,\n)\n</code></pre> <p>Fills arguments for the kernel, optionally allocating space from device if kernargs_ptr is not set.</p>"},{"location":"runtime/hcq/#synchronization","title":"Synchronization","text":"<p>HCQ-compatible devices use a global timeline signal for synchronizing all operations. This mechanism ensures proper ordering and completion of tasks across the device. By convention, <code>self.timeline_value</code> points to the next value to signal. So, to wait for all previous operations on the device to complete, wait for <code>self.timeline_value - 1</code> value. The following Python code demonstrates the typical usage of signals to synchronize execution to other operations on the device:</p> <pre><code>HWComputeQueue().wait(your_device.timeline_signal, your_device.timeline_value - 1) \\\n                .exec(...)\n                .signal(your_device.timeline_signal, your_device.timeline_value) \\\n                .submit(your_device)\nyour_device.timeline_value += 1\n\n# Optionally wait for execution\nyour_device.timeline_signal.wait(your_device.timeline_value - 1)\n</code></pre>"},{"location":"runtime/hcq/#hcqgraph","title":"HCQGraph","text":"<p>HCQGraph is a core feature that implements <code>GraphRunner</code> for HCQ-compatible devices. <code>HCQGraph</code> builds a static <code>HWComputeQueue</code> and <code>HWCopyQueue</code> for all operations per device. To optimize enqueue time, only the necessary parts of the queues are updated for each run using the update APIs of the queues, avoiding a complete rebuild. Optionally, queues can implement a <code>bind</code> API, which allows further optimization by eliminating the need to copy the queues into the device ring.</p>"},{"location":"runtime/overview/","title":"Runtime Overview","text":""},{"location":"runtime/overview/#overview","title":"Overview","text":"<p>A typical runtime consists of the following parts:</p> <ul> <li>Compiled</li> <li>Allocator</li> <li>Program</li> <li>Compiler</li> </ul>"},{"location":"runtime/overview/#compiled","title":"Compiled","text":"<p>The <code>Compiled</code> class is responsible for initializing and managing a device.</p>"},{"location":"runtime/overview/#tinygrad.device.Compiled","title":"Compiled","text":"<pre><code>Compiled(\n    device: str,\n    allocator: Allocator,\n    renderer: Optional[Renderer],\n    compiler: Optional[Compiler],\n    runtime,\n    graph=None,\n)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Compiled.synchronize","title":"synchronize","text":"<pre><code>synchronize()\n</code></pre> <p>Synchronize all pending operations on the device.</p> <p>This method ensures that all previously queued operations on the device have been completed before proceeding.</p>"},{"location":"runtime/overview/#allocator","title":"Allocator","text":"<p>The <code>Allocator</code> class is responsible for managing memory on the device. There is also a version called the <code>LRUAllocator</code>, which caches allocated buffers to optimize performance.</p>"},{"location":"runtime/overview/#tinygrad.device.Allocator","title":"Allocator","text":""},{"location":"runtime/overview/#tinygrad.device.Allocator._alloc","title":"_alloc","text":"<pre><code>_alloc(size: int, options: BufferOptions)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Allocator._free","title":"_free","text":"<pre><code>_free(opaque, options: BufferOptions)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Allocator.alloc","title":"alloc","text":"<pre><code>alloc(size: int, options: Optional[BufferOptions] = None)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Allocator.copyin","title":"copyin","text":"<pre><code>copyin(dest, src: memoryview)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Allocator.copyout","title":"copyout","text":"<pre><code>copyout(dest: memoryview, src)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Allocator.free","title":"free","text":"<pre><code>free(\n    opaque,\n    size: int,\n    options: Optional[BufferOptions] = None,\n)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.LRUAllocator","title":"LRUAllocator","text":"<pre><code>LRUAllocator()\n</code></pre> <p>               Bases: <code>Allocator</code></p> <p>The LRU Allocator is responsible for caching buffers. It ensures that buffers are not freed until it is absolutely necessary, optimizing performance.</p>"},{"location":"runtime/overview/#tinygrad.device.LRUAllocator.cache","title":"cache  <code>instance-attribute</code>","text":"<pre><code>cache: Dict[Tuple[int, Optional[BufferOptions]], Any] = (\n    defaultdict(list)\n)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.LRUAllocator.alloc","title":"alloc","text":"<pre><code>alloc(size: int, options: Optional[BufferOptions] = None)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.LRUAllocator.free","title":"free","text":"<pre><code>free(\n    opaque: Any,\n    size: int,\n    options: Optional[BufferOptions] = None,\n)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.LRUAllocator.free_cache","title":"free_cache","text":"<pre><code>free_cache()\n</code></pre>"},{"location":"runtime/overview/#program","title":"Program","text":"<p>The <code>Program</code> class is created for each loaded program. It is responsible for compiling and executing the program on the device. As an example, here is a <code>ClangProgram</code> implementation which loads program and runs it.</p>"},{"location":"runtime/overview/#tinygrad.runtime.ops_clang.ClangProgram","title":"ClangProgram","text":"<pre><code>ClangProgram(name: str, lib: bytes)\n</code></pre> Source code in <code>tinygrad/runtime/ops_clang.py</code> <pre><code>def __init__(self, name:str, lib:bytes):\n  if DEBUG &gt;= 6: cpu_objdump(lib)\n  self.name, self.lib = name, lib\n  # write to disk so we can load it\n  with tempfile.NamedTemporaryFile(delete=True) as cached_file_path:\n    pathlib.Path(cached_file_path.name).write_bytes(lib)\n    self.fxn = ctypes.CDLL(str(cached_file_path.name))[name]\n</code></pre>"},{"location":"runtime/overview/#tinygrad.runtime.ops_clang.ClangProgram.fxn","title":"fxn  <code>instance-attribute</code>","text":"<pre><code>fxn = CDLL(str(name))[name]\n</code></pre>"},{"location":"runtime/overview/#tinygrad.runtime.ops_clang.ClangProgram.__call__","title":"__call__","text":"<pre><code>__call__(*bufs, vals=(), wait=False)\n</code></pre> Source code in <code>tinygrad/runtime/ops_clang.py</code> <pre><code>def __call__(self, *bufs, vals=(), wait=False): return cpu_time_execution(lambda: self.fxn(*bufs, *vals), enable=wait)\n</code></pre>"},{"location":"runtime/overview/#compiler","title":"Compiler","text":"<p>The <code>Compiler</code> class compiles the output from the <code>Renderer</code> and produces it in a device-specific format.</p>"},{"location":"runtime/overview/#tinygrad.device.Compiler","title":"Compiler","text":"<pre><code>Compiler(cachekey: Optional[str] = None)\n</code></pre> Source code in <code>tinygrad/device.py</code> <pre><code>def __init__(self, cachekey:Optional[str]=None): self.cachekey = None if getenv(\"DISABLE_COMPILER_CACHE\") else cachekey\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Compiler.cachekey","title":"cachekey  <code>instance-attribute</code>","text":"<pre><code>cachekey = (\n    None if getenv(\"DISABLE_COMPILER_CACHE\") else cachekey\n)\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Compiler.compile","title":"compile","text":"<pre><code>compile(src: str) -&gt; bytes\n</code></pre> Source code in <code>tinygrad/device.py</code> <pre><code>def compile(self, src:str) -&gt; bytes: raise NotImplementedError(\"need a compile function\")\n</code></pre>"},{"location":"runtime/overview/#tinygrad.device.Compiler.compile_cached","title":"compile_cached","text":"<pre><code>compile_cached(src: str) -&gt; bytes\n</code></pre> Source code in <code>tinygrad/device.py</code> <pre><code>def compile_cached(self, src:str) -&gt; bytes:\n  if self.cachekey is None or (lib := diskcache_get(self.cachekey, src)) is None:\n    assert not getenv(\"ASSERT_COMPILE\"), f\"tried to compile with ASSERT_COMPILE set\\n{src}\"\n    lib = self.compile(src)\n    if self.cachekey is not None: diskcache_put(self.cachekey, src, lib)\n  return lib\n</code></pre>"},{"location":"tensor/","title":"Tensor","text":""},{"location":"tensor/#tinygrad.Tensor","title":"Tensor","text":"<pre><code>Tensor(\n    data: Union[\n        None,\n        ConstType,\n        List,\n        Tuple,\n        LazyBuffer,\n        ndarray,\n        bytes,\n        MultiLazyBuffer,\n        Variable,\n    ],\n    device: Optional[Union[str, tuple, list]] = None,\n    dtype: Optional[DType] = None,\n    requires_grad: Optional[bool] = None,\n)\n</code></pre> <p>A <code>Tensor</code> is a multi-dimensional matrix containing elements of a single data type.</p> <p></p>"},{"location":"tensor/#properties","title":"Properties","text":""},{"location":"tensor/#tinygrad.Tensor.shape","title":"shape  <code>property</code>","text":"<pre><code>shape: Tuple[sint, ...]\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.dtype","title":"dtype  <code>property</code>","text":"<pre><code>dtype: DType\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.device","title":"device  <code>property</code>","text":"<pre><code>device: Union[str, Tuple[str, ...]]\n</code></pre>"},{"location":"tensor/#data-access","title":"Data Access","text":""},{"location":"tensor/#tinygrad.Tensor.data","title":"data","text":"<pre><code>data() -&gt; memoryview\n</code></pre> <p>Returns the data of this tensor as a memoryview.</p> <pre><code>t = Tensor([1, 2, 3, 4])\nprint(np.frombuffer(t.data(), dtype=np.int32))\n</code></pre> <pre><code>[1 2 3 4]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def data(self) -&gt; memoryview:\n  \"\"\"\n  Returns the data of this tensor as a memoryview.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1, 2, 3, 4])\n  print(np.frombuffer(t.data(), dtype=np.int32))\n  ```\n  \"\"\"\n  assert self.dtype.fmt is not None, f\"no fmt dtype for {self.dtype}\"\n  assert all_int(self.shape), f\"no data if shape is symbolic, {self.shape=}\"\n  return self._data().cast(self.dtype.fmt, self.shape)\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.item","title":"item","text":"<pre><code>item() -&gt; ConstType\n</code></pre> <p>Returns the value of this tensor as a standard Python number.</p> <pre><code>t = Tensor(42)\nprint(t.item())\n</code></pre> <pre><code>42\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def item(self) -&gt; ConstType:\n  \"\"\"\n  Returns the value of this tensor as a standard Python number.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor(42)\n  print(t.item())\n  ```\n  \"\"\"\n  assert self.dtype.fmt is not None, f\"no fmt dtype for {self.dtype}\"\n  assert self.numel() == 1, \"must have one element for item\"\n  return self._data().cast(self.dtype.fmt)[0]\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.tolist","title":"tolist","text":"<pre><code>tolist() -&gt; Union[Sequence[ConstType], ConstType]\n</code></pre> <p>Returns the value of this tensor as a nested list.</p> <pre><code>t = Tensor([1, 2, 3, 4])\nprint(t.tolist())\n</code></pre> <pre><code>[1, 2, 3, 4]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def tolist(self) -&gt; Union[Sequence[ConstType], ConstType]:\n  \"\"\"\n  Returns the value of this tensor as a nested list.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1, 2, 3, 4])\n  print(t.tolist())\n  ```\n  \"\"\"\n  return self.data().tolist()\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.numpy","title":"numpy","text":"<pre><code>numpy() -&gt; ndarray\n</code></pre> <p>Returns the value of this tensor as a <code>numpy.ndarray</code>.</p> <pre><code>t = Tensor([1, 2, 3, 4])\nprint(repr(t.numpy()))\n</code></pre> <pre><code>array([1, 2, 3, 4], dtype=int32)\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def numpy(self) -&gt; np.ndarray:\n  \"\"\"\n  Returns the value of this tensor as a `numpy.ndarray`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1, 2, 3, 4])\n  print(repr(t.numpy()))\n  ```\n  \"\"\"\n  if self.dtype == dtypes.bfloat16: return self.float().numpy()\n  assert _to_np_dtype(self.dtype) is not None, f\"no np dtype for {self.dtype}\"\n  assert all_int(self.shape), f\"no data if shape is symbolic, {self.shape=}\"\n  return np.frombuffer(self._data(), dtype=_to_np_dtype(self.dtype)).reshape(self.shape)\n</code></pre>"},{"location":"tensor/#tinygrad-ops","title":"tinygrad ops","text":""},{"location":"tensor/#tinygrad.Tensor.schedule_with_vars","title":"schedule_with_vars","text":"<pre><code>schedule_with_vars(\n    *lst: Tensor, seen: Optional[Set[LazyBuffer]] = None\n) -&gt; Tuple[List[ScheduleItem], Dict[Variable, int]]\n</code></pre> <p>Creates the schedule needed to realize these Tensor(s), with Variables.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def schedule_with_vars(self, *lst:Tensor, seen:Optional[Set[LazyBuffer]]=None) -&gt; Tuple[List[ScheduleItem], Dict[Variable, int]]:\n  \"\"\"Creates the schedule needed to realize these Tensor(s), with Variables.\"\"\"\n  if getenv(\"FUZZ_SCHEDULE\"):\n    from test.external.fuzz_schedule import fuzz_schedule\n    fuzz_schedule(flatten([x.lazydata.lbs for x in (self,)+lst]))\n  schedule, var_vals = create_schedule_with_vars(flatten([x.lazydata.lbs for x in (self,)+lst]), seen)\n  return memory_planner(schedule), var_vals\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.schedule","title":"schedule","text":"<pre><code>schedule(\n    *lst: Tensor, seen: Optional[Set[LazyBuffer]] = None\n) -&gt; List[ScheduleItem]\n</code></pre> <p>Creates the schedule needed to realize these Tensor(s).</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def schedule(self, *lst:Tensor, seen:Optional[Set[LazyBuffer]]=None) -&gt; List[ScheduleItem]:\n  \"\"\"Creates the schedule needed to realize these Tensor(s).\"\"\"\n  schedule, var_vals = self.schedule_with_vars(*lst, seen=seen)\n  assert len(var_vals) == 0\n  return schedule\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.realize","title":"realize","text":"<pre><code>realize(*lst: Tensor, do_update_stats=True) -&gt; Tensor\n</code></pre> <p>Triggers the computation needed to create these Tensor(s).</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def realize(self, *lst:Tensor, do_update_stats=True) -&gt; Tensor:\n  \"\"\"Triggers the computation needed to create these Tensor(s).\"\"\"\n  run_schedule(*self.schedule_with_vars(*lst), do_update_stats=do_update_stats)\n  return self\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.replace","title":"replace","text":"<pre><code>replace(x: Tensor) -&gt; Tensor\n</code></pre> <p>Replaces the data of this tensor with the data of another tensor. Only the shape of the tensors must match.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def replace(self, x:Tensor) -&gt; Tensor:\n  \"\"\"\n  Replaces the data of this tensor with the data of another tensor. Only the shape of the tensors must match.\n  \"\"\"\n  # used for replacing a Tensor with a new version of it (potentially with a different device and dtype)\n  assert not x.requires_grad and getattr(self, '_ctx', None) is None\n  assert self.shape == x.shape, f\"replace shape mismatch {self.shape} != {x.shape}\"\n  self.lazydata = x.lazydata\n  return self\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.assign","title":"assign","text":"<pre><code>assign(x) -&gt; Tensor\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def assign(self, x) -&gt; Tensor:\n  # TODO: this is a hack for writing to DISK. remove with working assign\n  if isinstance(self.device, str) and self.device.startswith(\"DISK\"):\n    if x.__class__ is not Tensor: x = Tensor(x, device=\"NPY\", dtype=self.dtype)\n    self.contiguous().realize().lazydata.base.realized.copyin(x.numpy().data)\n    return self\n  if x.__class__ is not Tensor: x = Tensor(x, device=self.device, dtype=self.dtype)\n  if DEBUG &gt;= 4: print(f\"assign {self.lazydata} &lt;- {x.lazydata}\")\n  if self.lazydata is x.lazydata: return self  # a self assign is a NOOP\n  # NOTE: we allow cross device assign\n  assert self.shape == x.shape, f\"assign shape mismatch {self.shape} != {x.shape}\"\n  assert self.device == x.device, f\"assign device mismatch {self.device} != {x.device}\"\n  assert self.dtype == x.dtype, f\"assign dtype mismatch {self.dtype} != {x.dtype}\"\n  assert not isinstance(self.lazydata, MultiLazyBuffer) or self.lazydata.axis == x.lazydata.axis, \"axis must match on MultiLazyBuffer\"\n  assert not x.requires_grad  # self requires_grad is okay?\n  if not self.lazydata.is_realized(): return self.replace(x)\n  self.lazydata = self.lazydata.assign(x.lazydata)\n  return self\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.detach","title":"detach","text":"<pre><code>detach() -&gt; Tensor\n</code></pre> <p>Returns a new tensor with the same data as this tensor, but detached from the autograd graph.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def detach(self) -&gt; Tensor:\n  \"\"\"\n  Returns a new tensor with the same data as this tensor, but detached from the autograd graph.\n  \"\"\"\n  return Tensor(self.lazydata, device=self.device, requires_grad=False)\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.to","title":"to","text":"<pre><code>to(device: Optional[Union[str, Tuple[str, ...]]]) -&gt; Tensor\n</code></pre> <p>Moves the tensor to the given device.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def to(self, device:Optional[Union[str, Tuple[str, ...]]]) -&gt; Tensor:\n  \"\"\"\n  Moves the tensor to the given device.\n  \"\"\"\n  device = tuple(Device.canonicalize(x) for x in device) if isinstance(device, (tuple, list)) else Device.canonicalize(device)\n  if device == self.device: return self\n  if not isinstance(device, str): return self.shard(device)\n  ret = Tensor(self.lazydata, device, requires_grad=self.requires_grad)\n  if self.grad is not None: ret.grad = self.grad.to(device)\n  if hasattr(self, '_ctx'): ret._ctx = self._ctx\n  return ret\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.to_","title":"to_","text":"<pre><code>to_(device: Optional[Union[str, Tuple[str, ...]]])\n</code></pre> <p>Moves the tensor to the given device in place.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def to_(self, device:Optional[Union[str, Tuple[str, ...]]]):\n  \"\"\"\n  Moves the tensor to the given device in place.\n  \"\"\"\n  real = self.to(device)\n  # TODO: is this assign?\n  if self.grad is not None and real.grad is not None: self.grad.lazydata = real.grad.lazydata\n  self.lazydata = real.lazydata\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.shard","title":"shard","text":"<pre><code>shard(\n    devices: Tuple[str, ...], axis: Optional[int] = None\n) -&gt; Tensor\n</code></pre> <p>Shards the tensor across the given devices.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def shard(self, devices:Tuple[str, ...], axis:Optional[int]=None) -&gt; Tensor:\n  \"\"\"\n  Shards the tensor across the given devices.\n  \"\"\"\n  assert isinstance(self.lazydata, LazyBuffer), \"can't shard a MultiLazyBuffer\"\n  canonical_devices = tuple(Device.canonicalize(x) for x in devices)\n  if axis is not None and axis &lt; 0: axis += len(self.shape)\n  return Tensor(MultiLazyBuffer.from_sharded(self.lazydata, canonical_devices, axis), device=canonical_devices, requires_grad=self.requires_grad)\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.shard_","title":"shard_","text":"<pre><code>shard_(\n    devices: Tuple[str, ...], axis: Optional[int] = None\n)\n</code></pre> <p>Shards the tensor across the given devices in place.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def shard_(self, devices:Tuple[str, ...], axis:Optional[int]=None):\n  \"\"\"\n  Shards the tensor across the given devices in place.\n  \"\"\"\n  self.lazydata = self.shard(devices, axis).lazydata\n  return self\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.contiguous","title":"contiguous","text":"<pre><code>contiguous()\n</code></pre> <p>Returns a contiguous tensor.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def contiguous(self):\n  \"\"\"\n  Returns a contiguous tensor.\n  \"\"\"\n  return F.Contiguous.apply(self)\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.contiguous_backward","title":"contiguous_backward","text":"<pre><code>contiguous_backward()\n</code></pre> <p>Inserts a contiguous operation in the backward pass.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def contiguous_backward(self):\n  \"\"\"\n  Inserts a contiguous operation in the backward pass.\n  \"\"\"\n  return F.ContiguousBackward.apply(self)\n</code></pre>"},{"location":"tensor/#tinygrad.Tensor.backward","title":"backward","text":"<pre><code>backward() -&gt; Tensor\n</code></pre> <p>Propagates the gradient of a tensor backwards through the computation graph. Must be used on a scalar tensor.</p> <pre><code>t = Tensor([1.0, 2.0, 3.0, 4.0], requires_grad=True)\nt.sum().backward()\nprint(t.grad.numpy())\n</code></pre> <pre><code>[1. 1. 1. 1.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def backward(self) -&gt; Tensor:\n  \"\"\"\n  Propagates the gradient of a tensor backwards through the computation graph.\n  Must be used on a scalar tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1.0, 2.0, 3.0, 4.0], requires_grad=True)\n  t.sum().backward()\n  print(t.grad.numpy())\n  ```\n  \"\"\"\n  assert self.shape == tuple(), f\"backward can only be called for scalar tensors, but it has shape {self.shape})\"\n\n  # fill in the first grad with one. don't use Tensor.ones because we don't need contiguous\n  # this is \"implicit gradient creation\"\n  self.grad = Tensor(1.0, dtype=self.dtype, device=self.device, requires_grad=False)\n\n  for t0 in reversed(self._deepwalk()):\n    if t0.grad is None: raise RuntimeError(f\"tensor {t0} has no grad\")\n    token = _METADATA.set(dataclasses.replace(md, backward=True) if (md := t0._ctx.metadata) is not None else None)\n    grads = t0._ctx.backward(t0.grad.lazydata)\n    _METADATA.reset(token)\n    grads = [Tensor(g, device=self.device, requires_grad=False) if g is not None else None\n      for g in ([grads] if len(t0._ctx.parents) == 1 else grads)]\n    for t, g in zip(t0._ctx.parents, grads):\n      if g is not None and t.requires_grad:\n        assert g.shape == t.shape, f\"grad shape must match tensor shape, {g.shape!r} != {t.shape!r}\"\n        t.grad = g if t.grad is None else (t.grad + g)\n    del t0._ctx\n  return self\n</code></pre>"},{"location":"tensor/creation/","title":"Creation","text":""},{"location":"tensor/creation/#creation-basic","title":"Creation (basic)","text":""},{"location":"tensor/creation/#tinygrad.Tensor.empty","title":"empty  <code>staticmethod</code>","text":"<pre><code>empty(*shape, **kwargs)\n</code></pre> <p>Creates an empty tensor with the given shape.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>t = Tensor.empty(2, 3)\nprint(t.shape)\n</code></pre> <pre><code>(2, 3)\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef empty(*shape, **kwargs):\n  \"\"\"\n  Creates an empty tensor with the given shape.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.empty(2, 3)\n  print(t.shape)\n  ```\n  \"\"\"\n  return Tensor._metaop(MetaOps.EMPTY, argfix(*shape), **kwargs)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.zeros","title":"zeros  <code>staticmethod</code>","text":"<pre><code>zeros(*shape, **kwargs)\n</code></pre> <p>Creates a tensor with the given shape, filled with zeros.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <p><pre><code>print(Tensor.zeros(2, 3).numpy())\n</code></pre> <pre><code>[[0. 0. 0.]\n [0. 0. 0.]]\n</code></pre> <pre><code>print(Tensor.zeros(2, 3, dtype=dtypes.int32).numpy())\n</code></pre> <pre><code>[[0 0 0]\n [0 0 0]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef zeros(*shape, **kwargs):\n  \"\"\"\n  Creates a tensor with the given shape, filled with zeros.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.zeros(2, 3).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.zeros(2, 3, dtype=dtypes.int32).numpy())\n  ```\n  \"\"\"\n  return Tensor.full(argfix(*shape), 0.0, **kwargs)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.ones","title":"ones  <code>staticmethod</code>","text":"<pre><code>ones(*shape, **kwargs)\n</code></pre> <p>Creates a tensor with the given shape, filled with ones.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <p><pre><code>print(Tensor.ones(2, 3).numpy())\n</code></pre> <pre><code>[[1. 1. 1.]\n [1. 1. 1.]]\n</code></pre> <pre><code>print(Tensor.ones(2, 3, dtype=dtypes.int32).numpy())\n</code></pre> <pre><code>[[1 1 1]\n [1 1 1]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef ones(*shape, **kwargs):\n  \"\"\"\n  Creates a tensor with the given shape, filled with ones.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.ones(2, 3).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.ones(2, 3, dtype=dtypes.int32).numpy())\n  ```\n  \"\"\"\n  return Tensor.full(argfix(*shape), 1.0, **kwargs)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.full","title":"full  <code>staticmethod</code>","text":"<pre><code>full(\n    shape: Tuple[sint, ...], fill_value: ConstType, **kwargs\n)\n</code></pre> <p>Creates a tensor with the given shape, filled with the given value.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <p><pre><code>print(Tensor.full((2, 3), 42).numpy())\n</code></pre> <pre><code>[[42 42 42]\n [42 42 42]]\n</code></pre> <pre><code>print(Tensor.full((2, 3), False).numpy())\n</code></pre> <pre><code>[[False False False]\n [False False False]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef full(shape:Tuple[sint, ...], fill_value:ConstType, **kwargs):\n  \"\"\"\n  Creates a tensor with the given shape, filled with the given value.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.full((2, 3), 42).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.full((2, 3), False).numpy())\n  ```\n  \"\"\"\n  return Tensor(fill_value, **kwargs).reshape((1, )*len(new_shape := argfix(shape))).expand(new_shape)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.arange","title":"arange  <code>staticmethod</code>","text":"<pre><code>arange(start, stop=None, step=1, **kwargs)\n</code></pre> <p>Returns a 1-D tensor of size <code>ceil((stop - start) / step)</code> with values from <code>[start, stop)</code>, with spacing between values given by <code>step</code>.</p> <p>If <code>stop</code> is not specified, values are generated from <code>[0, start)</code> with the given <code>step</code>.</p> <p>If <code>stop</code> is specified, values are generated from <code>[start, stop)</code> with the given <code>step</code>.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <p><pre><code>print(Tensor.arange(5).numpy())\n</code></pre> <pre><code>[0 1 2 3 4]\n</code></pre> <pre><code>print(Tensor.arange(5, 10).numpy())\n</code></pre> <pre><code>[5 6 7 8 9]\n</code></pre> <pre><code>print(Tensor.arange(5, 10, 2).numpy())\n</code></pre> <pre><code>[5 7 9]\n</code></pre> <pre><code>print(Tensor.arange(5.5, 10, 2).numpy())\n</code></pre> <pre><code>[5.5 7.5 9.5]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef arange(start, stop=None, step=1, **kwargs):\n  \"\"\"\n  Returns a 1-D tensor of size `ceil((stop - start) / step)` with values from `[start, stop)`, with spacing between values given by `step`.\n\n  If `stop` is not specified, values are generated from `[0, start)` with the given `step`.\n\n  If `stop` is specified, values are generated from `[start, stop)` with the given `step`.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.arange(5).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.arange(5, 10).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.arange(5, 10, 2).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.arange(5.5, 10, 2).numpy())\n  ```\n  \"\"\"\n  if stop is None: stop, start = start, 0\n  assert all(isinstance(s, (int, float)) for s in (start, stop, step)), f\"symbolic arange not supported {start=}, {stop=}, {step=}\"\n  dtype = kwargs.pop(\"dtype\", dtypes.default_float if any(isinstance(x, float) for x in (start, stop, step)) else dtypes.default_int)\n  return (Tensor.full((math.ceil((stop-start)/step),), step, dtype=dtype, **kwargs)._cumsum() + (start - step)).cast(dtype)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.eye","title":"eye  <code>staticmethod</code>","text":"<pre><code>eye(n: int, m: Optional[int] = None, **kwargs)\n</code></pre> <p>Returns a 2-D tensor with <code>n</code> rows and <code>m</code> columns, with ones on the diagonal and zeros elsewhere.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>print(Tensor.eye(3).numpy())\n</code></pre> <pre><code>[[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n</code></pre> <pre><code>print(Tensor.eye(2, 4).numpy())\n</code></pre> <pre><code>[[1. 0. 0. 0.]\n [0. 1. 0. 0.]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef eye(n:int, m:Optional[int]=None, **kwargs):\n  \"\"\"\n  Returns a 2-D tensor with `n` rows and `m` columns, with ones on the diagonal and zeros elsewhere.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.eye(3).numpy())\n  ```\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.eye(2, 4).numpy())\n  ```\n  \"\"\"\n  return Tensor.ones((n,1),**kwargs).pad((None,(0,n))).flatten().shrink(((0,n*n),)).reshape(n,n)._slice((None,(0,n if m is None else m)))\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.full_like","title":"full_like","text":"<pre><code>full_like(fill_value: ConstType, **kwargs)\n</code></pre> <p>Creates a tensor with the same shape as <code>self</code>, filled with the given value. If <code>dtype</code> is not specified, the dtype of <code>self</code> is used.</p> <p>You can pass in the <code>device</code> keyword argument to control device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>t = Tensor.ones(2, 3)\nprint(Tensor.full_like(t, 42).numpy())\n</code></pre> <pre><code>[[42. 42. 42.]\n [42. 42. 42.]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def full_like(self, fill_value:ConstType, **kwargs):\n  \"\"\"\n  Creates a tensor with the same shape as `self`, filled with the given value.\n  If `dtype` is not specified, the dtype of `self` is used.\n\n  You can pass in the `device` keyword argument to control device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.ones(2, 3)\n  print(Tensor.full_like(t, 42).numpy())\n  ```\n  \"\"\"\n  return Tensor.full(self.shape, fill_value, dtype=kwargs.pop(\"dtype\", self.dtype), device=kwargs.pop(\"device\", self.device), **kwargs)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.zeros_like","title":"zeros_like","text":"<pre><code>zeros_like(**kwargs)\n</code></pre> <p>Creates a tensor with the same shape as <code>self</code>, filled with zeros.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>t = Tensor.ones(2, 3)\nprint(Tensor.zeros_like(t).numpy())\n</code></pre> <pre><code>[[0. 0. 0.]\n [0. 0. 0.]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def zeros_like(self, **kwargs):\n  \"\"\"\n  Creates a tensor with the same shape as `self`, filled with zeros.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.ones(2, 3)\n  print(Tensor.zeros_like(t).numpy())\n  ```\n  \"\"\"\n  return self.full_like(0, **kwargs)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.ones_like","title":"ones_like","text":"<pre><code>ones_like(**kwargs)\n</code></pre> <p>Creates a tensor with the same shape as <code>self</code>, filled with ones.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>t = Tensor.zeros(2, 3)\nprint(Tensor.ones_like(t).numpy())\n</code></pre> <pre><code>[[1. 1. 1.]\n [1. 1. 1.]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def ones_like(self, **kwargs):\n  \"\"\"\n  Creates a tensor with the same shape as `self`, filled with ones.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.zeros(2, 3)\n  print(Tensor.ones_like(t).numpy())\n  ```\n  \"\"\"\n  return self.full_like(1, **kwargs)\n</code></pre>"},{"location":"tensor/creation/#creation-random","title":"Creation (random)","text":""},{"location":"tensor/creation/#tinygrad.Tensor.manual_seed","title":"manual_seed  <code>staticmethod</code>","text":"<pre><code>manual_seed(seed=0)\n</code></pre> <p>Sets the seed for random operations.</p> <p><pre><code>Tensor.manual_seed(42)\nprint(Tensor.rand(5).numpy())\nprint(Tensor.rand(5).numpy())\n</code></pre> <pre><code>[0.5053 0.6523 0.4013 0.0438 0.5772]\n[0.6669 0.1226 0.8191 0.2581 0.6659]\n</code></pre> <pre><code>Tensor.manual_seed(42)  # reset to the same seed\nprint(Tensor.rand(5).numpy())\nprint(Tensor.rand(5).numpy())\n</code></pre> <pre><code>[0.5053 0.6523 0.4013 0.0438 0.5772]\n[0.6669 0.1226 0.8191 0.2581 0.6659]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef manual_seed(seed=0):\n  \"\"\"\n  Sets the seed for random operations.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.rand(5).numpy())\n  print(Tensor.rand(5).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)  # reset to the same seed\n  print(Tensor.rand(5).numpy())\n  print(Tensor.rand(5).numpy())\n  ```\n  \"\"\"\n  Tensor._seed, Tensor._rng_counter = seed, Tensor([0], dtype=dtypes.uint32, requires_grad=False)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.rand","title":"rand  <code>staticmethod</code>","text":"<pre><code>rand(\n    *shape,\n    device: Optional[Union[Tuple[str, ...], str]] = None,\n    dtype: Optional[DType] = None,\n    **kwargs\n)\n</code></pre> <p>Creates a tensor with the given shape, filled with random values from a uniform distribution over the interval <code>[0, 1)</code>.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nt = Tensor.rand(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[0.5053 0.6523 0.4013]\n [0.0438 0.5772 0.02  ]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef rand(*shape, device:Optional[Union[Tuple[str, ...], str]]=None, dtype:Optional[DType]=None, **kwargs):\n  \"\"\"\n  Creates a tensor with the given shape, filled with random values from a uniform distribution over the interval `[0, 1)`.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.rand(2, 3)\n  print(t.numpy())\n  ```\n  \"\"\"\n  if Tensor._rng_counter is None: Tensor._rng_counter = Tensor([0], dtype=dtypes.uint32, requires_grad=False)\n  if not THREEFRY.value:\n    # for bfloat16, numpy rand passes buffer in float\n    if (dtype or dtypes.default_float) == dtypes.bfloat16:\n      return Tensor.rand(*shape, **kwargs, device=device, dtype=dtypes.float).cast(dtypes.bfloat16)\n    return Tensor._metaop(MetaOps.CUSTOM, argfix(*shape), arg=custom_random, device=device, dtype=dtype, **kwargs)\n\n  # threefry\n  if (num := prod((shape:=argfix(*shape)))) == 0: return Tensor.zeros(shape, device=device, dtype=dtype, **kwargs)\n  counts1 = (Tensor.arange(math.ceil(num / 2), device=device, dtype=dtypes.uint32, requires_grad=False)+Tensor._rng_counter.to(device)).realize()\n  counts2 = counts1 + math.ceil(num / 2)\n  Tensor._rng_counter.assign(Tensor._rng_counter + num).realize()\n\n  x = counts2.cast(dtypes.uint64) &lt;&lt; 32 | counts1.cast(dtypes.uint64)\n  x = F.Threefry.apply(*x._broadcasted(Tensor._seed))\n  counts1, counts2 = (x &amp; 0xffffffff).cast(dtypes.uint32), ((x &gt;&gt; 32) &amp; 0xffffffff).cast(dtypes.uint32)\n\n  out = counts1.cat(counts2).rshift(8).cast(dtypes.float32).div(2 ** 24)[:num]\n  out = out.reshape(shape).cast(dtypes.default_float if dtype is None else dtype)\n  out.requires_grad = kwargs.get(\"requires_grad\")\n  return out.contiguous()\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.randn","title":"randn  <code>staticmethod</code>","text":"<pre><code>randn(\n    *shape, dtype: Optional[DType] = None, **kwargs\n) -&gt; Tensor\n</code></pre> <p>Creates a tensor with the given shape, filled with random values from a normal distribution with mean <code>0</code> and standard deviation <code>1</code>. If <code>dtype</code> is not specified, the default type is used.</p> <p>You can pass in the <code>device</code> keyword argument to control device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nprint(Tensor.randn(2, 3).numpy())\n</code></pre> <pre><code>[[-0.8042 -1.1013 -0.9095]\n [ 1.2802 -2.2883  0.7078]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef randn(*shape, dtype:Optional[DType]=None, **kwargs) -&gt; Tensor:\n  \"\"\"\n  Creates a tensor with the given shape, filled with random values from a normal distribution with mean `0` and standard deviation `1`.\n  If `dtype` is not specified, the default type is used.\n\n  You can pass in the `device` keyword argument to control device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.randn(2, 3).numpy())\n  ```\n  \"\"\"\n  # https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\n  src = Tensor.rand((2, *argfix(*shape)), **{**kwargs, \"dtype\": dtypes.float32})\n  return src[0].mul(2*math.pi).cos().mul((1 - src[1]).log().mul(-2).sqrt()).cast(dtype or dtypes.default_float)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.randint","title":"randint  <code>staticmethod</code>","text":"<pre><code>randint(*shape, low=0, high=10, **kwargs) -&gt; Tensor\n</code></pre> <p>Creates a tensor with the given shape, filled with random integer values generated uniformly from the interval <code>[low, high)</code>. If <code>dtype</code> is not specified, the default type is used.</p> <p>You can pass in the <code>device</code> keyword argument to control device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nprint(Tensor.randint(2, 3, low=5, high=10).numpy())\n</code></pre> <pre><code>[[7 8 7]\n [5 7 5]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef randint(*shape, low=0, high=10, **kwargs) -&gt; Tensor:\n  \"\"\"\n  Creates a tensor with the given shape, filled with random integer values generated uniformly from the interval `[low, high)`.\n  If `dtype` is not specified, the default type is used.\n\n  You can pass in the `device` keyword argument to control device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.randint(2, 3, low=5, high=10).numpy())\n  ```\n  \"\"\"\n  if not isinstance(low, int) or not isinstance(high, int): raise TypeError(f\"{low=} and {high=} must be integers\")\n  dtype = kwargs.pop(\"dtype\", dtypes.int32)\n  if not dtypes.is_int(dtype): raise TypeError(f\"{dtype=} must be int\")\n  return Tensor.uniform(*shape, low=low, high=high, dtype=dtype, **kwargs)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.normal","title":"normal  <code>staticmethod</code>","text":"<pre><code>normal(*shape, mean=0.0, std=1.0, **kwargs) -&gt; Tensor\n</code></pre> <p>Creates a tensor with the given shape, filled with random values from a normal distribution with the given <code>mean</code> and standard deviation <code>std</code>.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nprint(Tensor.normal(2, 3, mean=10, std=2).numpy())\n</code></pre> <pre><code>[[ 8.3915  7.7974  8.181 ]\n [12.5603  5.4234 11.4156]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef normal(*shape, mean=0.0, std=1.0, **kwargs) -&gt; Tensor:\n  \"\"\"\n  Creates a tensor with the given shape, filled with random values from a normal distribution with the given `mean` and standard deviation `std`.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.normal(2, 3, mean=10, std=2).numpy())\n  ```\n  \"\"\"\n  return (std * Tensor.randn(*shape, **kwargs)) + mean\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.uniform","title":"uniform  <code>staticmethod</code>","text":"<pre><code>uniform(*shape, low=0.0, high=1.0, **kwargs) -&gt; Tensor\n</code></pre> <p>Creates a tensor with the given shape, filled with random values from a uniform distribution over the interval <code>[low, high)</code>.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nprint(Tensor.uniform(2, 3, low=2, high=10).numpy())\n</code></pre> <pre><code>[[6.0426 7.2184 5.2105]\n [2.3502 6.6172 2.1602]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef uniform(*shape, low=0.0, high=1.0, **kwargs) -&gt; Tensor:\n  \"\"\"\n  Creates a tensor with the given shape, filled with random values from a uniform distribution over the interval `[low, high)`.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.uniform(2, 3, low=2, high=10).numpy())\n  ```\n  \"\"\"\n  dtype = kwargs.pop(\"dtype\", dtypes.default_float)\n  return ((high-low) * Tensor.rand(*shape, **kwargs)).cast(dtype) + low\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.scaled_uniform","title":"scaled_uniform  <code>staticmethod</code>","text":"<pre><code>scaled_uniform(*shape, **kwargs) -&gt; Tensor\n</code></pre> <p>Creates a tensor with the given shape, filled with random values from a uniform distribution over the interval <code>[-prod(shape)**-0.5, prod(shape)**-0.5)</code>.</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nprint(Tensor.scaled_uniform(2, 3).numpy())\n</code></pre> <pre><code>[[ 0.0043  0.1244 -0.0806]\n [-0.3725  0.063  -0.3919]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef scaled_uniform(*shape, **kwargs) -&gt; Tensor:\n  \"\"\"\n  Creates a tensor with the given shape, filled with random values from a uniform distribution\n  over the interval `[-prod(shape)**-0.5, prod(shape)**-0.5)`.\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.scaled_uniform(2, 3).numpy())\n  ```\n  \"\"\"\n  return Tensor.uniform(*shape, low=-1.0, high=1.0, **kwargs).mul(prod(argfix(*shape))**-0.5)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.glorot_uniform","title":"glorot_uniform  <code>staticmethod</code>","text":"<pre><code>glorot_uniform(*shape, **kwargs) -&gt; Tensor\n</code></pre> <p>https://www.tensorflow.org/api_docs/python/tf/keras/initializers/GlorotUniform</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nprint(Tensor.glorot_uniform(2, 3).numpy())\n</code></pre> <pre><code>[[ 0.0117  0.3337 -0.2162]\n [-0.9995  0.169  -1.0516]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef glorot_uniform(*shape, **kwargs) -&gt; Tensor:\n  \"\"\"\n  &lt;https://www.tensorflow.org/api_docs/python/tf/keras/initializers/GlorotUniform&gt;\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.glorot_uniform(2, 3).numpy())\n  ```\n  \"\"\"\n  return Tensor.uniform(*shape, low=-1.0, high=1.0, **kwargs).mul((6/(argfix(*shape)[0]+prod(argfix(*shape)[1:])))**0.5)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.kaiming_uniform","title":"kaiming_uniform  <code>staticmethod</code>","text":"<pre><code>kaiming_uniform(\n    *shape, a: float = 0.01, **kwargs\n) -&gt; Tensor\n</code></pre> <p>https://pytorch.org/docs/stable/_modules/torch/nn/init.html#kaiming_uniform_</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nprint(Tensor.kaiming_uniform(2, 3).numpy())\n</code></pre> <pre><code>[[ 0.0151  0.4307 -0.2791]\n [-1.2903  0.2182 -1.3575]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef kaiming_uniform(*shape, a:float = 0.01, **kwargs) -&gt; Tensor:\n  \"\"\"\n  &lt;https://pytorch.org/docs/stable/_modules/torch/nn/init.html#kaiming_uniform_&gt;\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.kaiming_uniform(2, 3).numpy())\n  ```\n  \"\"\"\n  bound = math.sqrt(3.0) * math.sqrt(2.0 / (1 + a ** 2)) / math.sqrt(prod(argfix(*shape)[1:]))\n  return Tensor.uniform(*shape, low=-bound, high=bound, **kwargs)\n</code></pre>"},{"location":"tensor/creation/#tinygrad.Tensor.kaiming_normal","title":"kaiming_normal  <code>staticmethod</code>","text":"<pre><code>kaiming_normal(*shape, a: float = 0.01, **kwargs) -&gt; Tensor\n</code></pre> <p>https://pytorch.org/docs/stable/_modules/torch/nn/init.html#kaiming_normal_</p> <p>You can pass in <code>dtype</code> and <code>device</code> keyword arguments to control the data type and device of the tensor. Additionally, all other keyword arguments are passed to the constructor of the tensor.</p> <pre><code>Tensor.manual_seed(42)\nprint(Tensor.kaiming_normal(2, 3).numpy())\n</code></pre> <pre><code>[[-0.6566 -0.8992 -0.7426]\n [ 1.0452 -1.8683  0.5779]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef kaiming_normal(*shape, a:float = 0.01, **kwargs) -&gt; Tensor:\n  \"\"\"\n  &lt;https://pytorch.org/docs/stable/_modules/torch/nn/init.html#kaiming_normal_&gt;\n\n  You can pass in `dtype` and `device` keyword arguments to control the data type and device of the tensor.\n  Additionally, all other keyword arguments are passed to the constructor of the tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  print(Tensor.kaiming_normal(2, 3).numpy())\n  ```\n  \"\"\"\n  std = math.sqrt(2.0 / (1 + a ** 2)) / math.sqrt(prod(argfix(*shape)[1:]))\n  return Tensor.normal(*shape, mean=0.0, std=std, **kwargs)\n</code></pre>"},{"location":"tensor/movement/","title":"Movement","text":""},{"location":"tensor/movement/#movement-low-level","title":"Movement (low level)","text":""},{"location":"tensor/movement/#tinygrad.Tensor.view","title":"view","text":"<pre><code>view(*shape) -&gt; Tensor\n</code></pre> <p><code>.view</code> is an alias for <code>.reshape</code>.</p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def view(self, *shape) -&gt; Tensor:\n  \"\"\"`.view` is an alias for `.reshape`.\"\"\"\n  return self.reshape(shape)\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.reshape","title":"reshape","text":"<pre><code>reshape(shape, *args) -&gt; Tensor\n</code></pre> <p>Returns a tensor with the same data as the original tensor but with a different shape. <code>shape</code> can be passed as a tuple or as separate arguments.</p> <pre><code>t = Tensor.arange(6)\nprint(t.reshape(2, 3).numpy())\n</code></pre> <pre><code>[[0 1 2]\n [3 4 5]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def reshape(self, shape, *args) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor with the same data as the original tensor but with a different shape.\n  `shape` can be passed as a tuple or as separate arguments.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(6)\n  print(t.reshape(2, 3).numpy())\n  ```\n  \"\"\"\n  # resolve None and args\n  new_shape = tuple([s if s is not None else self.shape[i] for i,s in enumerate(argfix(shape, *args))])\n  # resolve -1\n  if (c := new_shape.count(-1)) &gt; 1: raise RuntimeError(f\"only one dimension can be inferred using -1, getting {new_shape}\")\n  if c: new_shape = tuple([-prod(self.shape) // prod(new_shape) if s == -1 else s for s in new_shape])\n  return F.Reshape.apply(self, shape=new_shape) if new_shape != self.shape else self\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.expand","title":"expand","text":"<pre><code>expand(shape, *args) -&gt; Tensor\n</code></pre> <p>Returns a tensor that is expanded to the shape that is specified. Expand can also increase the number of dimensions that a tensor has.</p> <p>Passing a <code>-1</code> or <code>None</code> to a dimension means that its size will not be changed.</p> <pre><code>t = Tensor([1, 2, 3])\nprint(t.expand(4, -1).numpy())\n</code></pre> <pre><code>[[1 2 3]\n [1 2 3]\n [1 2 3]\n [1 2 3]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def expand(self, shape, *args) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor that is expanded to the shape that is specified.\n  Expand can also increase the number of dimensions that a tensor has.\n\n  Passing a `-1` or `None` to a dimension means that its size will not be changed.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1, 2, 3])\n  print(t.expand(4, -1).numpy())\n  ```\n  \"\"\"\n  return self._broadcast_to(tuple(from_ if to == -1 or to is None else to for from_, to in zip(*(_pad_left(self.shape, argfix(shape, *args))))))\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.permute","title":"permute","text":"<pre><code>permute(order, *args) -&gt; Tensor\n</code></pre> <p>Returns a tensor that is a permutation of the original tensor. The new tensor has the same data as the original tensor but with the dimensions permuted according to the order specified. <code>order</code> can be passed as a tuple or as separate arguments.</p> <p><pre><code>t = Tensor.arange(6).reshape(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[0 1 2]\n [3 4 5]]\n</code></pre> <pre><code>print(t.permute(1, 0).numpy())\n</code></pre> <pre><code>[[0 3]\n [1 4]\n [2 5]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def permute(self, order, *args) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor that is a permutation of the original tensor.\n  The new tensor has the same data as the original tensor but with the dimensions permuted according to the order specified.\n  `order` can be passed as a tuple or as separate arguments.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(6).reshape(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.permute(1, 0).numpy())\n  ```\n  \"\"\"\n  order_arg = tuple(self._resolve_dim(x) for x in argfix(order, *args))\n  if sorted(order_arg) != list(range(self.ndim)): raise RuntimeError(f\"order is not a valid permutation, getting {order_arg}\")\n  return F.Permute.apply(self, order=order_arg)\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.flip","title":"flip","text":"<pre><code>flip(axis, *args) -&gt; Tensor\n</code></pre> <p>Returns a tensor that reverses the order of the original tensor along given <code>axis</code>. <code>axis</code> can be passed as a tuple or as separate arguments.</p> <p><pre><code>t = Tensor.arange(6).reshape(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[0 1 2]\n [3 4 5]]\n</code></pre> <pre><code>print(t.flip(0).numpy())\n</code></pre> <pre><code>[[3 4 5]\n [0 1 2]]\n</code></pre> <pre><code>print(t.flip((0, 1)).numpy())\n</code></pre> <pre><code>[[5 4 3]\n [2 1 0]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def flip(self, axis, *args) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor that reverses the order of the original tensor along given `axis`.\n  `axis` can be passed as a tuple or as separate arguments.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(6).reshape(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.flip(0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.flip((0, 1)).numpy())\n  ```\n  \"\"\"\n  axis_arg = tuple(self._resolve_dim(x) for x in argfix(axis, *args))\n  if len(axis_arg) != len(dedup(axis_arg)): raise RuntimeError(f\"dim can appear at least once, getting {axis_arg}\")\n  return F.Flip.apply(self, axis=axis_arg)\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.shrink","title":"shrink","text":"<pre><code>shrink(\n    arg: Tuple[Optional[Tuple[sint, sint]], ...]\n) -&gt; Tensor\n</code></pre> <p>Returns a tensor that shrinks the each axis based on input arg. <code>arg</code> must have the same length as <code>self.ndim</code>. For each axis, it can be <code>None</code>, which means no shrink, or a tuple <code>(start, end)</code> that works the same as Python slice.</p> <p><pre><code>t = Tensor.arange(9).reshape(3, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[0 1 2]\n [3 4 5]\n [6 7 8]]\n</code></pre> <pre><code>print(t.shrink(((None, (1, 3)))).numpy())\n</code></pre> <pre><code>[[1 2]\n [4 5]\n [7 8]]\n</code></pre> <pre><code>print(t.shrink((((0, 2), (0, 2)))).numpy())\n</code></pre> <pre><code>[[0 1]\n [3 4]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def shrink(self, arg:Tuple[Optional[Tuple[sint, sint]], ...]) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor that shrinks the each axis based on input arg.\n  `arg` must have the same length as `self.ndim`.\n  For each axis, it can be `None`, which means no shrink, or a tuple `(start, end)` that works the same as Python slice.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(9).reshape(3, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.shrink(((None, (1, 3)))).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.shrink((((0, 2), (0, 2)))).numpy())\n  ```\n  \"\"\"\n  if all(x is None or x == (0,s) for x,s in zip(arg, self.shape)): return self\n  return F.Shrink.apply(self, arg=tuple(x if x is not None else (0,s) for x,s in zip(arg, self.shape)))\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.pad","title":"pad","text":"<pre><code>pad(\n    arg: Tuple[Optional[Tuple[sint, sint]], ...],\n    value: float = 0.0,\n) -&gt; Tensor\n</code></pre> <p>Returns a tensor that pads the each axis based on input arg. <code>arg</code> must have the same length as <code>self.ndim</code>. For each axis, it can be <code>None</code>, which means no pad, or a tuple <code>(pad_before, pad_after)</code>. If <code>value</code> is specified, the tensor is padded with <code>value</code> instead of <code>0.0</code>.</p> <p><pre><code>t = Tensor.arange(6).reshape(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[0 1 2]\n [3 4 5]]\n</code></pre> <pre><code>print(t.pad(((None, (1, 2)))).numpy())\n</code></pre> <pre><code>[[0 0 1 2 0 0]\n [0 3 4 5 0 0]]\n</code></pre> <pre><code>print(t.pad(((None, (1, 2))), -2).numpy())\n</code></pre> <pre><code>[[-2  0  1  2 -2 -2]\n [-2  3  4  5 -2 -2]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def pad(self, arg:Tuple[Optional[Tuple[sint, sint]], ...], value:float=0.0) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor that pads the each axis based on input arg.\n  `arg` must have the same length as `self.ndim`.\n  For each axis, it can be `None`, which means no pad, or a tuple `(pad_before, pad_after)`.\n  If `value` is specified, the tensor is padded with `value` instead of `0.0`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(6).reshape(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.pad(((None, (1, 2)))).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.pad(((None, (1, 2))), -2).numpy())\n  ```\n  \"\"\"\n  if all(x is None or x == (0,0) for x in arg): return self\n  ret = F.Pad.apply(self, arg=(narg:=tuple(x if x is not None else (0,0) for x in arg)))\n  return ret if 0 == value else ret + F.Pad.apply(Tensor.ones_like(self), arg=narg).where(0, value)\n</code></pre>"},{"location":"tensor/movement/#movement-high-level","title":"Movement (high level)","text":""},{"location":"tensor/movement/#tinygrad.Tensor.gather","title":"gather","text":"<pre><code>gather(dim: int, index: Tensor) -&gt; Tensor\n</code></pre> <p>Gathers values along an axis specified by <code>dim</code>.</p> <p><pre><code>t = Tensor([[1, 2], [3, 4]])\nprint(t.numpy())\n</code></pre> <pre><code>[[1 2]\n [3 4]]\n</code></pre> <pre><code>print(t.gather(1, Tensor([[0, 0], [1, 0]])).numpy())\n</code></pre> <pre><code>[[1 1]\n [4 3]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def gather(self:Tensor, dim:int, index:Tensor) -&gt; Tensor:\n  \"\"\"\n  Gathers values along an axis specified by `dim`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 2], [3, 4]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.gather(1, Tensor([[0, 0], [1, 0]])).numpy())\n  ```\n  \"\"\"\n  assert index.ndim == self.ndim, f\"self.ndim must equal index.ndim, {self.ndim=}, {index.ndim=}\"\n  dim = self._resolve_dim(dim)\n  assert all(s &gt;= i for d,(s,i) in enumerate(zip(self.shape, index.shape)) if d != dim), \"requires self.shape[d] &gt;= index.shape[d] for all d != dim\"\n  index = index.to(self.device)\n  x = self.shrink(tuple((0, i) if d != dim else None for d,i in enumerate(index.shape))).unsqueeze(-1).transpose(-1, dim)\n  return ((index.unsqueeze(-1) == Tensor.arange(self.shape[dim], requires_grad=False, device=self.device)) * x).sum(-1, acc_dtype=self.dtype)\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.cat","title":"cat","text":"<pre><code>cat(*args: Tensor, dim: int = 0) -&gt; Tensor\n</code></pre> <p>Concatenates self with other <code>Tensor</code> in <code>args</code> along an axis specified by <code>dim</code>. All tensors must have the same shape except in the concatenating dimension.</p> <p><pre><code>t0, t1, t2 = Tensor([[1, 2]]), Tensor([[3, 4]]), Tensor([[5, 6]])\nprint(t0.cat(t1, t2, dim=0).numpy())\n</code></pre> <pre><code>[[1 2]\n [3 4]\n [5 6]]\n</code></pre> <pre><code>print(t0.cat(t1, t2, dim=1).numpy())\n</code></pre> <pre><code>[[1 2 3 4 5 6]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def cat(self:Tensor, *args:Tensor, dim:int=0) -&gt; Tensor:\n  \"\"\"\n  Concatenates self with other `Tensor` in `args` along an axis specified by `dim`.\n  All tensors must have the same shape except in the concatenating dimension.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t0, t1, t2 = Tensor([[1, 2]]), Tensor([[3, 4]]), Tensor([[5, 6]])\n  print(t0.cat(t1, t2, dim=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t0.cat(t1, t2, dim=1).numpy())\n  ```\n  \"\"\"\n  dim = self._resolve_dim(dim)\n  assert all(len(y.shape) == len(self.shape) and all(y.shape[i] == s for i,s in enumerate(self.shape) if i != dim) for y in args)\n  catargs = [self, *args]\n  cat_dims = [s.shape[dim] for s in catargs]\n  cat_dim_cumsum = [0, *itertools.accumulate(cat_dims)]\n  slc:List[List[Optional[Tuple[sint, sint]]]] = [[None for _ in self.shape] for _ in catargs]\n  for d,k,s in zip(cat_dims, cat_dim_cumsum[:-1], slc): s[dim] = (k, cat_dim_cumsum[-1] - k - d)\n  return functools.reduce(Tensor.__add__, [arg.pad(tuple(s)) for arg,s in zip(catargs, slc)])\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.stack","title":"stack","text":"<pre><code>stack(*args: Tensor, dim: int = 0) -&gt; Tensor\n</code></pre> <p>Concatenates self with other <code>Tensor</code> in <code>args</code> along a new dimension specified by <code>dim</code>.</p> <p><pre><code>t0, t1, t2 = Tensor([1, 2]), Tensor([3, 4]), Tensor([5, 6])\nprint(t0.stack(t1, t2, dim=0).numpy())\n</code></pre> <pre><code>[[1 2]\n [3 4]\n [5 6]]\n</code></pre> <pre><code>print(t0.stack(t1, t2, dim=1).numpy())\n</code></pre> <pre><code>[[1 3 5]\n [2 4 6]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def stack(self:Tensor, *args:Tensor, dim:int=0) -&gt; Tensor:\n  \"\"\"\n  Concatenates self with other `Tensor` in `args` along a new dimension specified by `dim`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t0, t1, t2 = Tensor([1, 2]), Tensor([3, 4]), Tensor([5, 6])\n  print(t0.stack(t1, t2, dim=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t0.stack(t1, t2, dim=1).numpy())\n  ```\n  \"\"\"\n  # checks for shapes and number of dimensions delegated to cat\n  return self.unsqueeze(dim).cat(*[t.unsqueeze(dim) for t in args], dim=dim)\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.repeat","title":"repeat","text":"<pre><code>repeat(repeats, *args) -&gt; Tensor\n</code></pre> <p>Repeats tensor number of times along each dimension specified by <code>repeats</code>. <code>repeats</code> can be passed as a tuple or as separate arguments.</p> <p><pre><code>t = Tensor([1, 2, 3])\nprint(t.repeat(4, 2).numpy())\n</code></pre> <pre><code>[[1 2 3 1 2 3]\n [1 2 3 1 2 3]\n [1 2 3 1 2 3]\n [1 2 3 1 2 3]]\n</code></pre> <pre><code>print(t.repeat(4, 2, 1).shape)\n</code></pre> <pre><code>(4, 2, 3)\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def repeat(self, repeats, *args) -&gt; Tensor:\n  \"\"\"\n  Repeats tensor number of times along each dimension specified by `repeats`.\n  `repeats` can be passed as a tuple or as separate arguments.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1, 2, 3])\n  print(t.repeat(4, 2).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.repeat(4, 2, 1).shape)\n  ```\n  \"\"\"\n  repeats = argfix(repeats, *args)\n  base_shape = (1,) * (len(repeats) - self.ndim) + self.shape\n  new_shape = [x for b in base_shape for x in [1, b]]\n  expand_shape = [x for rs in zip(repeats, base_shape) for x in rs]\n  final_shape = [r*s for r,s in zip(repeats, base_shape)]\n  return self.reshape(new_shape).expand(expand_shape).reshape(final_shape)\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.repeat_interleave","title":"repeat_interleave","text":"<pre><code>repeat_interleave(\n    repeats: int, dim: Optional[int] = None\n) -&gt; Tensor\n</code></pre> <p>Repeat elements of a tensor.</p> <pre><code>t = Tensor([1, 2, 3])\nprint(t.repeat_interleave(2).numpy())\n</code></pre> <pre><code>[1 1 2 2 3 3]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def repeat_interleave(self, repeats:int, dim:Optional[int]=None) -&gt; Tensor:\n  \"\"\"\n  Repeat elements of a tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1, 2, 3])\n  print(t.repeat_interleave(2).numpy())\n  ```\n  \"\"\"\n  x, dim = (self.flatten(), 0) if dim is None else (self, dim)\n  shp = x.shape\n  return x.reshape(*shp[:dim+1], 1, *shp[dim+1:]).expand(*shp[:dim+1], repeats, *shp[dim+1:]).reshape(*shp[:dim], shp[dim]*repeats, *shp[dim+1:])\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.split","title":"split","text":"<pre><code>split(\n    sizes: Union[int, List[int]], dim: int = 0\n) -&gt; Tuple[Tensor, ...]\n</code></pre> <p>Splits the tensor into chunks along the dimension specified by <code>dim</code>. If <code>sizes</code> is an integer, it splits into equally sized chunks if possible, otherwise the last chunk will be smaller. If <code>sizes</code> is a list, it splits into <code>len(sizes)</code> chunks with size in <code>dim</code> according to <code>size</code>.</p> <p><pre><code>t = Tensor.arange(10).reshape(5, 2)\nprint(t.numpy())\n</code></pre> <pre><code>[[0 1]\n [2 3]\n [4 5]\n [6 7]\n [8 9]]\n</code></pre> <pre><code>split = t.split(2)\nprint(\"\\n\".join([repr(x.numpy()) for x in split]))\n</code></pre> <pre><code>array([[0, 1],\n       [2, 3]], dtype=int32)\narray([[4, 5],\n       [6, 7]], dtype=int32)\narray([[8, 9]], dtype=int32)\n</code></pre> <pre><code>split = t.split([1, 4])\nprint(\"\\n\".join([repr(x.numpy()) for x in split]))\n</code></pre> <pre><code>array([[0, 1]], dtype=int32)\narray([[2, 3],\n       [4, 5],\n       [6, 7],\n       [8, 9]], dtype=int32)\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def split(self, sizes:Union[int, List[int]], dim:int=0) -&gt; Tuple[Tensor, ...]:\n  \"\"\"\n  Splits the tensor into chunks along the dimension specified by `dim`.\n  If `sizes` is an integer, it splits into equally sized chunks if possible, otherwise the last chunk will be smaller.\n  If `sizes` is a list, it splits into `len(sizes)` chunks with size in `dim` according to `size`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(10).reshape(5, 2)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  split = t.split(2)\n  print(\"\\\\n\".join([repr(x.numpy()) for x in split]))\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  split = t.split([1, 4])\n  print(\"\\\\n\".join([repr(x.numpy()) for x in split]))\n  ```\n  \"\"\"\n  assert all_int(self.shape), f\"does not support symbolic shape {self.shape}\"\n  dim = self._resolve_dim(dim)\n  if isinstance(sizes, int): sizes = [min(sizes, self.shape[dim]-i) for i in range(0, max(1, self.shape[dim]), max(1, sizes))]\n  assert sum(sizes) == self.shape[dim], f\"expect sizes to sum exactly to {self.shape[dim]}, but got {sum(sizes)}\"\n  return tuple(self[sl] for sl in [tuple([slice(None)]*dim + [slice(sum(sizes[:i]), sum(sizes[:i + 1]))]) for i in range(len(sizes))])\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.chunk","title":"chunk","text":"<pre><code>chunk(chunks: int, dim: int = 0) -&gt; List[Tensor]\n</code></pre> <p>Splits the tensor into <code>chunks</code> number of chunks along the dimension <code>dim</code>. If the tensor size along <code>dim</code> is not divisible by <code>chunks</code>, all returned chunks will be the same size except the last one. The function may return fewer than the specified number of chunks.</p> <p><pre><code>chunked = Tensor.arange(11).chunk(6)\nprint(\"\\n\".join([repr(x.numpy()) for x in chunked]))\n</code></pre> <pre><code>array([0, 1], dtype=int32)\narray([2, 3], dtype=int32)\narray([4, 5], dtype=int32)\narray([6, 7], dtype=int32)\narray([8, 9], dtype=int32)\narray([10], dtype=int32)\n</code></pre> <pre><code>chunked = Tensor.arange(12).chunk(6)\nprint(\"\\n\".join([repr(x.numpy()) for x in chunked]))\n</code></pre> <pre><code>array([0, 1], dtype=int32)\narray([2, 3], dtype=int32)\narray([4, 5], dtype=int32)\narray([6, 7], dtype=int32)\narray([8, 9], dtype=int32)\narray([10, 11], dtype=int32)\n</code></pre> <pre><code>chunked = Tensor.arange(13).chunk(6)\nprint(\"\\n\".join([repr(x.numpy()) for x in chunked]))\n</code></pre> <pre><code>array([0, 1, 2], dtype=int32)\narray([3, 4, 5], dtype=int32)\narray([6, 7, 8], dtype=int32)\narray([ 9, 10, 11], dtype=int32)\narray([12], dtype=int32)\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def chunk(self, chunks:int, dim:int=0) -&gt; List[Tensor]:\n  \"\"\"\n  Splits the tensor into `chunks` number of chunks along the dimension `dim`.\n  If the tensor size along `dim` is not divisible by `chunks`, all returned chunks will be the same size except the last one.\n  The function may return fewer than the specified number of chunks.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  chunked = Tensor.arange(11).chunk(6)\n  print(\"\\\\n\".join([repr(x.numpy()) for x in chunked]))\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  chunked = Tensor.arange(12).chunk(6)\n  print(\"\\\\n\".join([repr(x.numpy()) for x in chunked]))\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  chunked = Tensor.arange(13).chunk(6)\n  print(\"\\\\n\".join([repr(x.numpy()) for x in chunked]))\n  ```\n  \"\"\"\n  assert all_int(self.shape), f\"does not support symbolic shape {self.shape}\"\n  assert chunks &gt; 0, f\"expect chunks to be greater than 0, got: {chunks}\"\n  dim = self._resolve_dim(dim)\n  return list(self.split(math.ceil(self.shape[dim]/chunks) if self.shape[dim] else [0]*chunks, dim=dim))\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.squeeze","title":"squeeze","text":"<pre><code>squeeze(dim: Optional[int] = None) -&gt; Tensor\n</code></pre> <p>Returns a tensor with specified dimensions of input of size 1 removed. If <code>dim</code> is not specified, all dimensions with size 1 are removed.</p> <p><pre><code>t = Tensor.zeros(2, 1, 2, 1, 2)\nprint(t.squeeze().shape)\n</code></pre> <pre><code>(2, 2, 2)\n</code></pre> <pre><code>print(t.squeeze(0).shape)\n</code></pre> <pre><code>(2, 1, 2, 1, 2)\n</code></pre> <pre><code>print(t.squeeze(1).shape)\n</code></pre> <pre><code>(2, 2, 1, 2)\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def squeeze(self, dim:Optional[int]=None) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor with specified dimensions of input of size 1 removed.\n  If `dim` is not specified, all dimensions with size 1 are removed.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.zeros(2, 1, 2, 1, 2)\n  print(t.squeeze().shape)\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.squeeze(0).shape)\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.squeeze(1).shape)\n  ```\n  \"\"\"\n  if dim is None: return self.reshape(tuple(dim for dim in self.shape if dim != 1))\n  dim = self._resolve_dim(dim)\n  return self if not self.ndim or self.shape[dim] != 1 else self.reshape(self.shape[:dim] + self.shape[dim+1:])\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.unsqueeze","title":"unsqueeze","text":"<pre><code>unsqueeze(dim: int) -&gt; Tensor\n</code></pre> <p>Returns a tensor with a new dimension of size 1 inserted at the specified <code>dim</code>.</p> <p><pre><code>t = Tensor([1, 2, 3, 4])\nprint(t.unsqueeze(0).numpy())\n</code></pre> <pre><code>[[1 2 3 4]]\n</code></pre> <pre><code>print(t.unsqueeze(1).numpy())\n</code></pre> <pre><code>[[1]\n [2]\n [3]\n [4]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def unsqueeze(self, dim:int) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor with a new dimension of size 1 inserted at the specified `dim`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1, 2, 3, 4])\n  print(t.unsqueeze(0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.unsqueeze(1).numpy())\n  ```\n  \"\"\"\n  dim = self._resolve_dim(dim, outer=True)\n  return self.reshape(self.shape[:dim] + (1,) + self.shape[dim:])\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.pad2d","title":"pad2d","text":"<pre><code>pad2d(padding: Sequence[int], value: float = 0.0) -&gt; Tensor\n</code></pre> <p>Returns a tensor that pads the last two axes specified by <code>padding</code> (padding_left, padding_right, padding_top, padding_bottom). If <code>value</code> is specified, the tensor is padded with <code>value</code> instead of <code>0.0</code>.</p> <p><pre><code>t = Tensor.arange(9).reshape(1, 1, 3, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[[[0 1 2]\n   [3 4 5]\n   [6 7 8]]]]\n</code></pre> <pre><code>print(t.pad2d((1, 1, 2, 0), value=-float(\"inf\")).numpy())\n</code></pre> <pre><code>[[[[-inf -inf -inf -inf -inf]\n   [-inf -inf -inf -inf -inf]\n   [-inf   0.   1.   2. -inf]\n   [-inf   3.   4.   5. -inf]\n   [-inf   6.   7.   8. -inf]]]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def pad2d(self, padding:Sequence[int], value:float=0.0) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor that pads the last two axes specified by `padding` (padding_left, padding_right, padding_top, padding_bottom).\n  If `value` is specified, the tensor is padded with `value` instead of `0.0`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(9).reshape(1, 1, 3, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.pad2d((1, 1, 2, 0), value=-float(\"inf\")).numpy())\n  ```\n  \"\"\"\n  slc = [(-p0, s+p1) for p0,p1,s in zip(padding[::2], padding[1::2], self.shape[::-1])][::-1]\n  return self._slice([(0,s) for s in self.shape[:-(len(padding)//2)]] + slc, value=value)\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.T","title":"T  <code>property</code>","text":"<pre><code>T: Tensor\n</code></pre> <p><code>.T</code> is an alias for <code>.transpose()</code>.</p>"},{"location":"tensor/movement/#tinygrad.Tensor.transpose","title":"transpose","text":"<pre><code>transpose(dim0=1, dim1=0) -&gt; Tensor\n</code></pre> <p>Returns a tensor that is a transposed version of the original tensor. The given dimensions <code>dim0</code> and <code>dim1</code> are swapped.</p> <p><pre><code>t = Tensor.arange(6).reshape(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[0 1 2]\n [3 4 5]]\n</code></pre> <pre><code>print(t.transpose(0, 1).numpy())\n</code></pre> <pre><code>[[0 3]\n [1 4]\n [2 5]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def transpose(self, dim0=1, dim1=0) -&gt; Tensor:\n  \"\"\"\n  Returns a tensor that is a transposed version of the original tensor.\n  The given dimensions `dim0` and `dim1` are swapped.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(6).reshape(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.transpose(0, 1).numpy())\n  ```\n  \"\"\"\n  order = list(range(self.ndim))\n  order[dim0], order[dim1] = order[dim1], order[dim0]\n  return self.permute(order)\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.flatten","title":"flatten","text":"<pre><code>flatten(start_dim=0, end_dim=-1)\n</code></pre> <p>Flattens the tensor by reshaping it into a one-dimensional tensor. If <code>start_dim</code> or <code>end_dim</code> are passed, only dimensions starting with <code>start_dim</code> and ending with <code>end_dim</code> are flattened.</p> <p><pre><code>t = Tensor.arange(8).reshape(2, 2, 2)\nprint(t.flatten().numpy())\n</code></pre> <pre><code>[0 1 2 3 4 5 6 7]\n</code></pre> <pre><code>print(t.flatten(start_dim=1).numpy())\n</code></pre> <pre><code>[[0 1 2 3]\n [4 5 6 7]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def flatten(self, start_dim=0, end_dim=-1):\n  \"\"\"\n  Flattens the tensor by reshaping it into a one-dimensional tensor.\n  If `start_dim` or `end_dim` are passed, only dimensions starting with `start_dim` and ending with `end_dim` are flattened.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(8).reshape(2, 2, 2)\n  print(t.flatten().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.flatten(start_dim=1).numpy())\n  ```\n  \"\"\"\n  start_dim, end_dim = self._resolve_dim(start_dim), self._resolve_dim(end_dim)\n  return self.reshape(self.shape[:start_dim] + (prod(self.shape[start_dim:end_dim+1]), ) + self.shape[end_dim+1:])\n</code></pre>"},{"location":"tensor/movement/#tinygrad.Tensor.unflatten","title":"unflatten","text":"<pre><code>unflatten(dim: int, sizes: Tuple[int, ...])\n</code></pre> <p>Unflattens dimension <code>dim</code> of the tensor into multiple dimensions specified by <code>sizes</code>. <code>Tensor.flatten()</code> is the inverse of this function.</p> <p><pre><code>print(Tensor.ones(3, 4, 1).unflatten(1, (2, 2)).shape)\n</code></pre> <pre><code>(3, 2, 2, 1)\n</code></pre> <pre><code>print(Tensor.ones(3, 4, 1).unflatten(1, (-1, 2)).shape)\n</code></pre> <pre><code>(3, 2, 2, 1)\n</code></pre> <pre><code>print(Tensor.ones(5, 12, 3).unflatten(-2, (2, 2, 3, 1, 1)).shape)\n</code></pre> <pre><code>(5, 2, 2, 3, 1, 1, 3)\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def unflatten(self, dim:int, sizes:Tuple[int,...]):\n  \"\"\"\n  Unflattens dimension `dim` of the tensor into multiple dimensions specified by `sizes`. `Tensor.flatten()` is the inverse of this function.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.ones(3, 4, 1).unflatten(1, (2, 2)).shape)\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.ones(3, 4, 1).unflatten(1, (-1, 2)).shape)\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor.ones(5, 12, 3).unflatten(-2, (2, 2, 3, 1, 1)).shape)\n  ```\n  \"\"\"\n  dim = self._resolve_dim(dim)\n  return self.reshape(self.shape[:dim] + sizes + self.shape[dim+1:])\n</code></pre>"},{"location":"tensor/ops/","title":"Ops","text":""},{"location":"tensor/ops/#reduce-ops","title":"Reduce Ops","text":""},{"location":"tensor/ops/#tinygrad.Tensor.sum","title":"sum","text":"<pre><code>sum(\n    axis: Optional[Union[int, Sequence[int]]] = None,\n    keepdim=False,\n    acc_dtype: Optional[DType] = None,\n)\n</code></pre> <p>Sums the elements of the tensor along the specified axis or axes.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the axis along which the maximum is computed and whether the reduced dimensions are retained.</p> <p>You can pass in <code>acc_dtype</code> keyword argument to control the data type of the accumulation. If not specified, the accumulation data type is chosen based on the input tensor's data type.</p> <p><pre><code>t = Tensor.arange(6).reshape(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[0 1 2]\n [3 4 5]]\n</code></pre> <pre><code>print(t.sum().numpy())\n</code></pre> <pre><code>15\n</code></pre> <pre><code>print(t.sum(axis=0).numpy())\n</code></pre> <pre><code>[3 5 7]\n</code></pre> <pre><code>print(t.sum(axis=1).numpy())\n</code></pre> <pre><code>[ 3 12]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sum(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False, acc_dtype:Optional[DType]=None):\n  \"\"\"\n  Sums the elements of the tensor along the specified axis or axes.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the axis along\n  which the maximum is computed and whether the reduced dimensions are retained.\n\n  You can pass in `acc_dtype` keyword argument to control the data type of the accumulation.\n  If not specified, the accumulation data type is chosen based on the input tensor's data type.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(6).reshape(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.sum().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.sum(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.sum(axis=1).numpy())\n  ```\n  \"\"\"\n  ret = self.cast(acc_dtype or sum_acc_dtype(self.dtype))._reduce(F.Sum, axis, keepdim)\n  return ret.cast(self.dtype) if acc_dtype is None and self.dtype in (dtypes.float16, dtypes.bfloat16) else ret\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.max","title":"max","text":"<pre><code>max(\n    axis: Optional[Union[int, Sequence[int]]] = None,\n    keepdim=False,\n)\n</code></pre> <p>Returns the maximum value of the tensor along the specified axis or axes.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the axis along which the maximum is computed and whether the reduced dimensions are retained.</p> <p><pre><code>t = Tensor([[1, 0, 2], [5, 4, 3]])\nprint(t.numpy())\n</code></pre> <pre><code>[[1 0 2]\n [5 4 3]]\n</code></pre> <pre><code>print(t.max().numpy())\n</code></pre> <pre><code>5\n</code></pre> <pre><code>print(t.max(axis=0).numpy())\n</code></pre> <pre><code>[5 4 3]\n</code></pre> <pre><code>print(t.max(axis=1, keepdim=True).numpy())\n</code></pre> <pre><code>[[2]\n [5]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def max(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False):\n  \"\"\"\n  Returns the maximum value of the tensor along the specified axis or axes.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the axis along\n  which the maximum is computed and whether the reduced dimensions are retained.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 0, 2], [5, 4, 3]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.max().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.max(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.max(axis=1, keepdim=True).numpy())\n  ```\n  \"\"\"\n  return self._reduce(F.Max, axis, keepdim)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.min","title":"min","text":"<pre><code>min(\n    axis: Optional[Union[int, Sequence[int]]] = None,\n    keepdim=False,\n)\n</code></pre> <p>Returns the minimum value of the tensor along the specified axis or axes.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the axis along which the minimum is computed and whether the reduced dimensions are retained.</p> <p><pre><code>t = Tensor([[1, 0, 2], [5, 4, 3]])\nprint(t.numpy())\n</code></pre> <pre><code>[[1 0 2]\n [5 4 3]]\n</code></pre> <pre><code>print(t.min().numpy())\n</code></pre> <pre><code>0\n</code></pre> <pre><code>print(t.min(axis=0).numpy())\n</code></pre> <pre><code>[1 0 2]\n</code></pre> <pre><code>print(t.min(axis=1, keepdim=True).numpy())\n</code></pre> <pre><code>[[0]\n [3]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def min(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False):\n  \"\"\"\n  Returns the minimum value of the tensor along the specified axis or axes.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the axis along\n  which the minimum is computed and whether the reduced dimensions are retained.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 0, 2], [5, 4, 3]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.min().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.min(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.min(axis=1, keepdim=True).numpy())\n  ```\n  \"\"\"\n  return -((-self).max(axis=axis, keepdim=keepdim))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.any","title":"any","text":"<pre><code>any(\n    axis: Optional[Union[int, Sequence[int]]] = None,\n    keepdim=False,\n)\n</code></pre> <p>Tests if any element evaluates to <code>True</code> along the specified axis or axes.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the reduce axis and whether the reduced dimensions are retained.</p> <p><pre><code>t = Tensor([[True, True], [True, False], [False, False]])\nprint(t.numpy())\n</code></pre> <pre><code>[[ True  True]\n [ True False]\n [False False]]\n</code></pre> <pre><code>print(t.any().numpy())\n</code></pre> <pre><code>True\n</code></pre> <pre><code>print(t.any(axis=0).numpy())\n</code></pre> <pre><code>[ True  True]\n</code></pre> <pre><code>print(t.any(axis=1, keepdim=True).numpy())\n</code></pre> <pre><code>[[ True]\n [ True]\n [False]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def any(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False):\n  \"\"\"\n  Tests if any element evaluates to `True` along the specified axis or axes.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the reduce axis and whether the reduced dimensions are retained.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[True, True], [True, False], [False, False]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.any().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.any(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.any(axis=1, keepdim=True).numpy())\n  ```\n  \"\"\"\n  return self.bool().max(axis, keepdim)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.all","title":"all","text":"<pre><code>all(\n    axis: Optional[Union[int, Sequence[int]]] = None,\n    keepdim=False,\n)\n</code></pre> <p>Tests if all element evaluates to <code>True</code> along the specified axis or axes.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the reduce axis and whether the reduced dimensions are retained.</p> <p><pre><code>t = Tensor([[True, True], [True, False], [False, False]])\nprint(t.numpy())\n</code></pre> <pre><code>[[ True  True]\n [ True False]\n [False False]]\n</code></pre> <pre><code>print(t.all().numpy())\n</code></pre> <pre><code>False\n</code></pre> <pre><code>print(t.all(axis=0).numpy())\n</code></pre> <pre><code>[False False]\n</code></pre> <pre><code>print(t.all(axis=1, keepdim=True).numpy())\n</code></pre> <pre><code>[[ True]\n [False]\n [False]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def all(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False):\n  \"\"\"\n  Tests if all element evaluates to `True` along the specified axis or axes.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the reduce axis and whether the reduced dimensions are retained.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[True, True], [True, False], [False, False]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.all().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.all(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.all(axis=1, keepdim=True).numpy())\n  ```\n  \"\"\"\n  return self.logical_not().any(axis, keepdim).logical_not()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.mean","title":"mean","text":"<pre><code>mean(\n    axis: Optional[Union[int, Sequence[int]]] = None,\n    keepdim=False,\n)\n</code></pre> <p>Returns the mean value of the tensor along the specified axis or axes.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the axis along which the mean is computed and whether the reduced dimensions are retained.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.normal(2, 3, mean=2.5, std=0.5)\nprint(t.numpy())\n</code></pre> <pre><code>[[2.0979 1.9493 2.0452]\n [3.1401 1.3559 2.8539]]\n</code></pre> <pre><code>print(t.mean().numpy())\n</code></pre> <pre><code>2.2403831\n</code></pre> <pre><code>print(t.mean(axis=0).numpy())\n</code></pre> <pre><code>[2.619  1.6526 2.4496]\n</code></pre> <pre><code>print(t.mean(axis=1).numpy())\n</code></pre> <pre><code>[2.0308 2.4499]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def mean(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False):\n  \"\"\"\n  Returns the mean value of the tensor along the specified axis or axes.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the axis along\n  which the mean is computed and whether the reduced dimensions are retained.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.normal(2, 3, mean=2.5, std=0.5)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.mean().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.mean(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.mean(axis=1).numpy())\n  ```\n  \"\"\"\n  output_dtype = self.dtype if dtypes.is_float(self.dtype) else dtypes.float32\n  numerator = self.cast(sum_acc_dtype(self.dtype)).sum(axis=axis, keepdim=keepdim)\n  return numerator.div(prod([si for si, so in zip(self.shape, self.sum(axis=axis, keepdim=True).shape) if si != so])).cast(output_dtype)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.var","title":"var","text":"<pre><code>var(\n    axis: Optional[Union[int, Sequence[int]]] = None,\n    keepdim=False,\n    correction=1,\n)\n</code></pre> <p>Returns the variance of the tensor along the specified axis or axes.</p> <p>You can pass in <code>axis</code>, <code>keepdim</code>, and <code>correction</code> keyword arguments to control the axis along which the variance is computed, whether the reduced dimensions are retained, and the Bessel's correction applied.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.normal(2, 3, mean=2.5, std=0.5)\nprint(t.numpy())\n</code></pre> <pre><code>[[2.0979 1.9493 2.0452]\n [3.1401 1.3559 2.8539]]\n</code></pre> <pre><code>print(t.var().numpy())\n</code></pre> <pre><code>0.4222705\n</code></pre> <pre><code>print(t.var(axis=0).numpy())\n</code></pre> <pre><code>[0.5431 0.1761 0.327 ]\n</code></pre> <pre><code>print(t.var(axis=1).numpy())\n</code></pre> <pre><code>[0.0057 0.9183]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def var(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False, correction=1):\n  \"\"\"\n  Returns the variance of the tensor along the specified axis or axes.\n\n  You can pass in `axis`, `keepdim`, and `correction` keyword arguments to control the axis along\n  which the variance is computed, whether the reduced dimensions are retained, and the Bessel's correction applied.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.normal(2, 3, mean=2.5, std=0.5)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.var().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.var(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.var(axis=1).numpy())\n  ```\n  \"\"\"\n  squares = (self - self.mean(axis=axis, keepdim=True)).square()\n  n = prod([si for si, so in zip(self.shape, squares.sum(axis=axis, keepdim=True).shape) if si != so])\n  return squares.sum(axis=axis, keepdim=keepdim).div(max(0, n-correction))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.std","title":"std","text":"<pre><code>std(\n    axis: Optional[Union[int, Sequence[int]]] = None,\n    keepdim=False,\n    correction=1,\n)\n</code></pre> <p>Returns the standard deviation of the tensor along the specified axis or axes.</p> <p>You can pass in <code>axis</code>, <code>keepdim</code>, and <code>correction</code> keyword arguments to control the axis along which the standard deviation is computed, whether the reduced dimensions are retained, and the Bessel's correction applied.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.normal(2, 3, mean=2.5, std=0.5)\nprint(t.numpy())\n</code></pre> <pre><code>[[2.0979 1.9493 2.0452]\n [3.1401 1.3559 2.8539]]\n</code></pre> <pre><code>print(t.std().numpy())\n</code></pre> <pre><code>0.6498234\n</code></pre> <pre><code>print(t.std(axis=0).numpy())\n</code></pre> <pre><code>[0.7369 0.4197 0.5718]\n</code></pre> <pre><code>print(t.std(axis=1).numpy())\n</code></pre> <pre><code>[0.0753 0.9583]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def std(self, axis:Optional[Union[int, Sequence[int]]]=None, keepdim=False, correction=1):\n  \"\"\"\n  Returns the standard deviation of the tensor along the specified axis or axes.\n\n  You can pass in `axis`, `keepdim`, and `correction` keyword arguments to control the axis along\n  which the standard deviation is computed, whether the reduced dimensions are retained, and the Bessel's correction applied.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.normal(2, 3, mean=2.5, std=0.5)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.std().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.std(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.std(axis=1).numpy())\n  ```\n  \"\"\"\n  return self.var(axis, keepdim, correction).sqrt()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.softmax","title":"softmax","text":"<pre><code>softmax(axis=-1)\n</code></pre> <p>Applies the softmax function to the tensor along the specified axis.</p> <p>Rescales the elements of the tensor such that they lie in the range [0, 1] and sum to 1.</p> <p>You can pass in the <code>axis</code> keyword argument to control the axis along which the softmax is computed.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.randn(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[-0.8042 -1.1013 -0.9095]\n [ 1.2802 -2.2883  0.7078]]\n</code></pre> <pre><code>print(t.softmax().numpy())\n</code></pre> <pre><code>[[0.3784 0.2811 0.3405]\n [0.628  0.0177 0.3543]]\n</code></pre> <pre><code>print(t.softmax(axis=0).numpy())\n</code></pre> <pre><code>[[0.1106 0.7662 0.1656]\n [0.8894 0.2338 0.8344]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def softmax(self, axis=-1):\n  \"\"\"\n  Applies the softmax function to the tensor along the specified axis.\n\n  Rescales the elements of the tensor such that they lie in the range [0, 1] and sum to 1.\n\n  You can pass in the `axis` keyword argument to control the axis along which the softmax is computed.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.randn(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.softmax().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.softmax(axis=0).numpy())\n  ```\n  \"\"\"\n  _, e, ss = self._softmax(axis)\n  return e.div(ss)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.log_softmax","title":"log_softmax","text":"<pre><code>log_softmax(axis=-1)\n</code></pre> <p>Applies the log-softmax function to the tensor along the specified axis.</p> <p>The log-softmax function is a numerically stable alternative to the softmax function in log space.</p> <p>You can pass in the <code>axis</code> keyword argument to control the axis along which the log-softmax is computed.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.randn(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[-0.8042 -1.1013 -0.9095]\n [ 1.2802 -2.2883  0.7078]]\n</code></pre> <pre><code>print(t.log_softmax().numpy())\n</code></pre> <pre><code>[[-0.9719 -1.269  -1.0772]\n [-0.4652 -4.0337 -1.0376]]\n</code></pre> <pre><code>print(t.log_softmax(axis=0).numpy())\n</code></pre> <pre><code>[[-2.2016 -0.2663 -1.7984]\n [-0.1172 -1.4533 -0.181 ]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def log_softmax(self, axis=-1):\n  \"\"\"\n  Applies the log-softmax function to the tensor along the specified axis.\n\n  The log-softmax function is a numerically stable alternative to the softmax function in log space.\n\n  You can pass in the `axis` keyword argument to control the axis along which the log-softmax is computed.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.randn(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.log_softmax().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.log_softmax(axis=0).numpy())\n  ```\n  \"\"\"\n  m, _, ss = self._softmax(axis)\n  return m - ss.log()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.logsumexp","title":"logsumexp","text":"<pre><code>logsumexp(axis=None, keepdim=False)\n</code></pre> <p>Computes the log-sum-exp of the tensor along the specified axis or axes.</p> <p>The log-sum-exp function is a numerically stable way to compute the logarithm of the sum of exponentials.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the axis along which the log-sum-exp is computed and whether the reduced dimensions are retained.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.randn(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[-0.8042 -1.1013 -0.9095]\n [ 1.2802 -2.2883  0.7078]]\n</code></pre> <pre><code>print(t.logsumexp().numpy())\n</code></pre> <pre><code>1.9330812\n</code></pre> <pre><code>print(t.logsumexp(axis=0).numpy())\n</code></pre> <pre><code>[ 1.3974 -0.835   0.8888]\n</code></pre> <pre><code>print(t.logsumexp(axis=1).numpy())\n</code></pre> <pre><code>[0.1677 1.7454]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def logsumexp(self, axis=None, keepdim=False):\n  \"\"\"\n  Computes the log-sum-exp of the tensor along the specified axis or axes.\n\n  The log-sum-exp function is a numerically stable way to compute the logarithm of the sum of exponentials.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the axis along\n  which the log-sum-exp is computed and whether the reduced dimensions are retained.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.randn(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.logsumexp().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.logsumexp(axis=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.logsumexp(axis=1).numpy())\n  ```\n  \"\"\"\n  m = self.max(axis=axis, keepdim=True)\n  return (self - m).exp().sum(axis=axis, keepdim=keepdim).log() + m.squeeze(axis)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.argmax","title":"argmax","text":"<pre><code>argmax(axis=None, keepdim=False)\n</code></pre> <p>Returns the indices of the maximum value of the tensor along the specified axis.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the axis along which the maximum is computed and whether the reduced dimensions are retained.</p> <p><pre><code>t = Tensor([[1, 0, 2], [5, 4, 3]])\nprint(t.numpy())\n</code></pre> <pre><code>[[1 0 2]\n [5 4 3]]\n</code></pre> <pre><code>print(t.argmax().numpy()) # Returns the index of the maximum value in the flattened tensor.\n</code></pre> <pre><code>3\n</code></pre> <pre><code>print(t.argmax(axis=0).numpy()) # Returns the indices of the maximum values along axis 0.\n</code></pre> <pre><code>[1 1 1]\n</code></pre> <pre><code>print(t.argmax(axis=1).numpy()) # Returns the indices of the maximum values along axis 1.\n</code></pre> <pre><code>[2 0]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def argmax(self, axis=None, keepdim=False):\n  \"\"\"\n  Returns the indices of the maximum value of the tensor along the specified axis.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the axis along\n  which the maximum is computed and whether the reduced dimensions are retained.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 0, 2], [5, 4, 3]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.argmax().numpy()) # Returns the index of the maximum value in the flattened tensor.\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.argmax(axis=0).numpy()) # Returns the indices of the maximum values along axis 0.\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.argmax(axis=1).numpy()) # Returns the indices of the maximum values along axis 1.\n  ```\n  \"\"\"\n  if axis is None: return self.flatten().argmax(0)\n  axis = self._resolve_dim(axis)\n  m = self == self.max(axis=axis, keepdim=True)\n  idx = m * Tensor.arange(self.shape[axis]-1,-1,-1, requires_grad=False, device=self.device).reshape(self.shape[axis], *[1]*(self.ndim-axis-1))\n  return (self.shape[axis]-idx.max(axis=axis, keepdim=keepdim)-1).cast(dtypes.int32)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.argmin","title":"argmin","text":"<pre><code>argmin(axis=None, keepdim=False)\n</code></pre> <p>Returns the indices of the minimum value of the tensor along the specified axis.</p> <p>You can pass in <code>axis</code> and <code>keepdim</code> keyword arguments to control the axis along which the minimum is computed and whether the reduced dimensions are retained.</p> <p><pre><code>t = Tensor([[1, 0, 2], [5, 4, 3]])\nprint(t.numpy())\n</code></pre> <pre><code>[[1 0 2]\n [5 4 3]]\n</code></pre> <pre><code>print(t.argmin().numpy()) # Returns the index of the minimum value in the flattened tensor.\n</code></pre> <pre><code>1\n</code></pre> <pre><code>print(t.argmin(axis=0).numpy()) # Returns the indices of the minimum values along axis 0.\n</code></pre> <pre><code>[0 0 0]\n</code></pre> <pre><code>print(t.argmin(axis=1).numpy()) # Returns the indices of the minimum values along axis 1.\n</code></pre> <pre><code>[1 2]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def argmin(self, axis=None, keepdim=False):\n  \"\"\"\n  Returns the indices of the minimum value of the tensor along the specified axis.\n\n  You can pass in `axis` and `keepdim` keyword arguments to control the axis along\n  which the minimum is computed and whether the reduced dimensions are retained.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 0, 2], [5, 4, 3]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.argmin().numpy()) # Returns the index of the minimum value in the flattened tensor.\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.argmin(axis=0).numpy()) # Returns the indices of the minimum values along axis 0.\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.argmin(axis=1).numpy()) # Returns the indices of the minimum values along axis 1.\n  ```\n  \"\"\"\n  return (-self).argmax(axis=axis, keepdim=keepdim)\n</code></pre>"},{"location":"tensor/ops/#processing-ops","title":"Processing Ops","text":""},{"location":"tensor/ops/#tinygrad.Tensor.avg_pool2d","title":"avg_pool2d","text":"<pre><code>avg_pool2d(\n    kernel_size=(2, 2),\n    stride=None,\n    dilation=1,\n    padding=0,\n    count_include_pad=True,\n)\n</code></pre> <p>Applies average pooling over a tensor.</p> <p>Note</p> <p>unlike PyTorch, this implementation is not limited to only 2d pooling and instead works for any number of dimensions.</p> <p>See: https://paperswithcode.com/method/average-pooling</p> <p><pre><code>t = Tensor.arange(25).reshape(1, 1, 5, 5)\nprint(t.avg_pool2d().numpy())\n</code></pre> <pre><code>[[[[ 3.  5.]\n   [13. 15.]]]]\n</code></pre> <pre><code>print(t.avg_pool2d(padding=1).numpy())\n</code></pre> <pre><code>[[[[ 0.    0.75  1.75]\n   [ 3.75  9.   11.  ]\n   [ 8.75 19.   21.  ]]]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def avg_pool2d(self, kernel_size=(2,2), stride=None, dilation=1, padding=0, count_include_pad=True):\n  \"\"\"\n  Applies average pooling over a tensor.\n\n  NOTE: unlike PyTorch, this implementation is not limited to only 2d pooling and instead works for any number of dimensions.\n\n  See: https://paperswithcode.com/method/average-pooling\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(25).reshape(1, 1, 5, 5)\n  print(t.avg_pool2d().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.avg_pool2d(padding=1).numpy())\n  ```\n  \"\"\"\n  padding_, axis = self._padding2d(padding, len(k_ := make_pair(kernel_size))), tuple(range(-len(k_), 0))\n  def pool(x:Tensor) -&gt; Tensor: return x.pad2d(padding_)._pool(k_, stride if stride is not None else k_, dilation)\n  return pool(self).mean(axis=axis) if count_include_pad else pool(self).sum(axis=axis) / pool(self.ones_like()).sum(axis=axis)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.max_pool2d","title":"max_pool2d","text":"<pre><code>max_pool2d(\n    kernel_size=(2, 2), stride=None, dilation=1, padding=0\n)\n</code></pre> <p>Applies max pooling over a tensor.</p> <p>Note</p> <p>unlike PyTorch, this implementation is not limited to only 2d pooling and instead works for any number of dimensions.</p> <p>See: https://paperswithcode.com/method/max-pooling</p> <p><pre><code>t = Tensor.arange(25).reshape(1, 1, 5, 5)\nprint(t.max_pool2d().numpy())\n</code></pre> <pre><code>[[[[ 6  8]\n   [16 18]]]]\n</code></pre> <pre><code>print(t.max_pool2d(padding=1).numpy())\n</code></pre> <pre><code>[[[[ 0.  2.  4.]\n   [10. 12. 14.]\n   [20. 22. 24.]]]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def max_pool2d(self, kernel_size=(2,2), stride=None, dilation=1, padding=0):\n  \"\"\"\n  Applies max pooling over a tensor.\n\n  NOTE: unlike PyTorch, this implementation is not limited to only 2d pooling and instead works for any number of dimensions.\n\n  See: https://paperswithcode.com/method/max-pooling\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(25).reshape(1, 1, 5, 5)\n  print(t.max_pool2d().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.max_pool2d(padding=1).numpy())\n  ```\n  \"\"\"\n  padding_ = self._padding2d(padding, len(k_ := make_pair(kernel_size)))\n  return self.pad2d(padding_, value=float('-inf'))._pool(k_, stride if stride is not None else k_, dilation).max(axis=tuple(range(-len(k_), 0)))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.conv2d","title":"conv2d","text":"<pre><code>conv2d(\n    weight: Tensor,\n    bias: Optional[Tensor] = None,\n    groups=1,\n    stride=1,\n    dilation=1,\n    padding=0,\n    acc_dtype: Optional[DType] = None,\n) -&gt; Tensor\n</code></pre> <p>Applies a convolution over a tensor with a given <code>weight</code> and optional <code>bias</code>.</p> <p>Note</p> <p>unlike PyTorch, this implementation is not limited to only 2d convolutions and instead works for any number of dimensions.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html</p> <pre><code>t = Tensor.arange(9).reshape(1, 1, 3, 3)\nw = Tensor.ones(1, 1, 2, 2)\nprint(t.conv2d(w).numpy())\n</code></pre> <pre><code>[[[[ 8. 12.]\n   [20. 24.]]]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def conv2d(self, weight:Tensor, bias:Optional[Tensor]=None, groups=1, stride=1, dilation=1, padding=0, acc_dtype:Optional[DType]=None) -&gt; Tensor:\n  \"\"\"\n  Applies a convolution over a tensor with a given `weight` and optional `bias`.\n\n  NOTE: unlike PyTorch, this implementation is not limited to only 2d convolutions and instead works for any number of dimensions.\n\n  See: https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(9).reshape(1, 1, 3, 3)\n  w = Tensor.ones(1, 1, 2, 2)\n  print(t.conv2d(w).numpy())\n  ```\n  \"\"\"\n  (bs,cin_), (cout,cin), HW = self.shape[:2], weight.shape[:2], weight.shape[2:]\n  assert groups*cin == cin_ and len(self.shape) == len(weight.shape), f\"Input Tensor shape {self.shape} does not match the shape of the weights {weight.shape}. ({groups*cin} vs. {cin_})\"  # noqa: E501\n  if isinstance(padding, (tuple,list)): assert len(padding) == 2*len(HW) or len(padding) == len(HW), f\"Expected padding of length {2*len(HW)} or {len(HW)}, but got {len(padding)} for tensor of shape {self.shape}\"  # noqa: E501\n  padding_ = self._padding2d(padding, len(HW))\n\n  # conv2d is a pooling op (with padding)\n  x = self.pad2d(padding_)._pool(HW, stride, dilation)   # (bs, groups*cin, oy, ox, H, W)\n  rcout, oyx = cout//groups, x.shape[2:-len(HW)]\n  if not all(x == 3 for x in HW) or stride != 1 or dilation != 1 or not WINO:\n    # normal conv\n    x = x.reshape(bs, groups, cin, 1, *oyx, *HW).expand(bs, groups, cin, rcout, *oyx, *HW).permute(0,1,3,*[4+i for i in range(len(oyx))],2,*[4+len(oyx)+i for i in range(len(HW))])  # noqa: E501\n\n    # conv! broadcasted to (bs, groups, rcout, *oyx, cin, *HW)\n    ret = (x * weight.reshape(1, groups, rcout, *[1] * len(oyx), cin, *HW)).sum([-1-i for i in range(1+len(oyx))], keepdim=True, acc_dtype=acc_dtype).reshape(bs, cout, *oyx)  # noqa: E501\n    return ret if bias is None else ret.add(bias.reshape(1, -1, *[1] * len(HW)))\n\n  HWI, HWO = (6,) * len(HW), (4,) * len(HW)  # F(4x4,3x3) winograd tiles\n  winograd_G = [[1/4, 0, 0], [-1/6, -1/6, -1/6], [-1/6, 1/6, -1/6], [1/24, 1/12, 1/6], [1/24, -1/12, 1/6], [0, 0, 1]]\n  winograd_Bt = [[4, 0, -5, 0, 1, 0], [0, -4, -4, 1, 1, 0], [0, 4, -4, -1, 1, 0], [0, -2, -1, 2, 1, 0], [0, 2, -1, -2, 1, 0], [0, 4, 0, -5, 0, 1]]\n  winograd_At = [[1, 1, 1, 1, 1, 0], [0, 1, -1, 2, -2, 0], [0, 1, 1, 4, 4, 0], [0, 1, -1, 8, -8, 1]] # applying At in pre-order doubles compile time\n\n  # todo: stride == dilation\n  # use padding to round up to 4x4 output tiles\n  # (bs, cin_, tyx, HWI)\n  d = self.pad2d(sum([[padding_[i*2], padding_[i*2+1] + (-(dim + sum(padding_[i * 2:(i + 1) * 2]) - 2) % 4)] for i, dim in enumerate(self.shape[-len(HW):])], []))._pool(HWI, HWO)  # noqa: E501\n  # move HW to the front: # (HWI, bs, cin_, tyx)\n  d = d.permute(*range(len(d.shape)-len(HW),len(d.shape)), *range(len(d.shape)-len(HW)))\n  tyx = d.shape[-len(HWI):]  # dim of tiling\n\n  g = weight.permute(*range(len(weight.shape)-len(HW),len(weight.shape)), *range(len(weight.shape)-len(HW)))  # move HW to the front\n\n  # compute 6x6 winograd tiles: GgGt, BtdB\n  # (HWI, groups * rcout, cin) -&gt; (HWI, bs=1, groups, rcout, cin, tyx=(1,1))\n  gfactors = _apply_winograd_matrix(winograd_G, g, len(HW)).reshape(*HWI, 1, groups, rcout, cin, *([1]*len(tyx)))\n  # (HWI, bs, cin_, tyx) -&gt; (HWI, bs, groups, 1 ,cin, *tyx)\n  dfactors = _apply_winograd_matrix(winograd_Bt, d, len(HW)).reshape(*HWI, bs, groups, 1, cin, *tyx)\n\n  # matmul; sum across cin: (HWI, bs, groups, rcout, *tyx); then HWI -&gt; HWO: (HWO, bs, groups, rcout, *tyx)\n  ret = _apply_winograd_matrix(winograd_At, (gfactors * dfactors).sum(axis=-1-len(HW), acc_dtype=acc_dtype), len(HW))\n\n  # interleave tyx and HWO: (bs, groups, rcout, oy, HO, ox, WO)\n  ret = ret.permute([*range(len(HW), len(ret.shape)-len(HW)), *[i+o for i in range(len(HW)) for o in [len(ret.shape)-len(HW),0]]])\n  # merge groups and rcout, tyx and HWO: (bs, groups, cout, *yx), shrink to final\n  ret = ret.reshape(bs, cout, *[c * HWO[i] for i, c in enumerate(tyx)]).shrink(tuple((0, s) for s in [bs, cout, *oyx]))\n\n  return (ret if bias is None else ret.add(bias.reshape(1, -1, *[1 for _ in range(len(HW))]))).contiguous().contiguous_backward()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.conv_transpose2d","title":"conv_transpose2d","text":"<pre><code>conv_transpose2d(\n    weight: Tensor,\n    bias: Optional[Tensor] = None,\n    groups=1,\n    stride=1,\n    dilation=1,\n    padding=0,\n    output_padding=0,\n) -&gt; Tensor\n</code></pre> <p>Applies a transposed convolution over a tensor with a given <code>weight</code> and optional <code>bias</code>.</p> <p>Note</p> <p>unlike PyTorch, this implementation is not limited to only 2d transposed convolutions and instead works for any number of dimensions.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.ConvTranspose2d.html</p> <pre><code>t = Tensor.arange(9).reshape(1, 1, 3, 3)\nw = Tensor.ones(1, 1, 2, 2)\nprint(t.conv_transpose2d(w).numpy())\n</code></pre> <pre><code>[[[[ 0.  1.  3.  2.]\n   [ 3.  8. 12.  7.]\n   [ 9. 20. 24. 13.]\n   [ 6. 13. 15.  8.]]]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def conv_transpose2d(self, weight:Tensor, bias:Optional[Tensor]=None, groups=1, stride=1, dilation=1, padding=0, output_padding=0) -&gt; Tensor:\n  \"\"\"\n  Applies a transposed convolution over a tensor with a given `weight` and optional `bias`.\n\n  NOTE: unlike PyTorch, this implementation is not limited to only 2d transposed convolutions and instead works for any number of dimensions.\n\n  See: https://pytorch.org/docs/stable/generated/torch.nn.ConvTranspose2d.html\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.arange(9).reshape(1, 1, 3, 3)\n  w = Tensor.ones(1, 1, 2, 2)\n  print(t.conv_transpose2d(w).numpy())\n  ```\n  \"\"\"\n  x, w = self, weight.unflatten(0, (groups, -1)).transpose(1, 2).flip(*range(3, len(weight.shape)+1))\n  HW = weight.shape[2:]\n  stride, dilation, padding, output_padding = [make_pair(x, len(HW)) for x in (stride, dilation, padding, output_padding)]\n  if any(s&gt;1 for s in stride):\n    # handle strides: (k) -&gt; reshape -&gt; (k,1) -&gt; pad -&gt; (k,s) -&gt; reshape -&gt; (k*s) -&gt; shrink (k-(s-1))\n    x = x.reshape(None, None, *flatten((k,1) for k in x.shape[2:]))\n    x = x.pad((None, None, *flatten((None,(0,s-1)) for s in stride)))\n    x = x.reshape(None, None, *[k*s for k,s in zip(x.shape[2::2], stride)])\n    x = x.shrink((None, None, *[(0,k-(s-1)) for k,s in zip(x.shape[2:], stride)]))\n  padding = flatten((((k-1)*d-p,(k-1)*d-p+op) for k,d,p,op in reversed(list(zip(HW, dilation, padding, output_padding)))))\n  return x.conv2d(w.flatten(end_dim=1), groups=groups, bias=bias, dilation=dilation, padding=padding)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.dot","title":"dot","text":"<pre><code>dot(w: Tensor, acc_dtype: Optional[DType] = None) -&gt; Tensor\n</code></pre> <p>Performs dot product between two tensors.</p> <p>You can pass in the optional <code>acc_dtype</code> keyword argument to control the data type of the accumulation.</p> <pre><code>a = Tensor([[1, 2], [3, 4]])\nb = Tensor([[5, 6], [7, 8]])\nprint(a.dot(b).numpy())\n</code></pre> <pre><code>[[19 22]\n [43 50]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def dot(self, w:Tensor, acc_dtype:Optional[DType]=None) -&gt; Tensor:\n  \"\"\"\n  Performs dot product between two tensors.\n\n  You can pass in the optional `acc_dtype` keyword argument to control the data type of the accumulation.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  a = Tensor([[1, 2], [3, 4]])\n  b = Tensor([[5, 6], [7, 8]])\n  print(a.dot(b).numpy())\n  ```\n  \"\"\"\n  n1, n2 = len(self.shape), len(w.shape)\n  assert n1 != 0 and n2 != 0, f\"both arguments to matmul need to be at least 1D, but they are {n1}D and {n2}D\"\n  assert (L:=self.shape[-1]) == (R:=w.shape[-min(n2, 2)]), f\"Input Tensor shapes {self.shape} and {w.shape} cannot be multiplied ({L} != {R})\"\n  x = self.reshape(*self.shape[0:-1], *[1]*min(n1-1, n2-1, 1), self.shape[-1])\n  w = w.reshape(*w.shape[0:-2], *[1]*min(n1-1, n2-1, 1), *w.shape[-min(n2, 2):]).transpose(-1, -min(n2, 2))\n  return (x*w).sum(-1, acc_dtype=acc_dtype).cast(least_upper_dtype(x.dtype, w.dtype) if acc_dtype is None else acc_dtype)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.matmul","title":"matmul","text":"<pre><code>matmul(\n    x: Tensor,\n    reverse=False,\n    acc_dtype: Optional[DType] = None,\n) -&gt; Tensor\n</code></pre> <p>Performs matrix multiplication between two tensors.</p> <p>You can pass in the <code>reverse</code> keyword argument to control the order of the matrix multiplication. You can pass in the optional <code>acc_dtype</code> keyword argument to control the data type of the accumulation.</p> <pre><code>a = Tensor([[1, 2], [3, 4]])\nb = Tensor([[5, 6], [7, 8]])\nprint(a.matmul(b).numpy())\n</code></pre> <pre><code>[[19 22]\n [43 50]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def matmul(self, x:Tensor, reverse=False, acc_dtype:Optional[DType]=None) -&gt; Tensor:\n  \"\"\"\n  Performs matrix multiplication between two tensors.\n\n  You can pass in the `reverse` keyword argument to control the order of the matrix multiplication.\n  You can pass in the optional `acc_dtype` keyword argument to control the data type of the accumulation.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  a = Tensor([[1, 2], [3, 4]])\n  b = Tensor([[5, 6], [7, 8]])\n  print(a.matmul(b).numpy())\n  ```\n  \"\"\"\n  return x.dot(self, acc_dtype=acc_dtype) if reverse else self.dot(x, acc_dtype=acc_dtype)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.einsum","title":"einsum  <code>staticmethod</code>","text":"<pre><code>einsum(\n    formula: str, *raw_xs, acc_dtype: Optional[DType] = None\n) -&gt; Tensor\n</code></pre> <p>Sums the product of the elements of the input tensors according to a formula based on the Einstein summation convention.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.einsum.html</p> <pre><code>x = Tensor([[1, 2], [3, 4]])\ny = Tensor([[5, 6], [7, 8]])\nprint(Tensor.einsum(\"ij,ij-&gt;\", x, y).numpy())\n</code></pre> <pre><code>70\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>@staticmethod\ndef einsum(formula:str, *raw_xs, acc_dtype:Optional[DType]=None) -&gt; Tensor:\n  \"\"\"\n  Sums the product of the elements of the input tensors according to a formula based on the Einstein summation convention.\n\n  See: https://pytorch.org/docs/stable/generated/torch.einsum.html\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  x = Tensor([[1, 2], [3, 4]])\n  y = Tensor([[5, 6], [7, 8]])\n  print(Tensor.einsum(\"ij,ij-&gt;\", x, y).numpy())\n  ```\n  \"\"\"\n  xs:Tuple[Tensor] = argfix(*raw_xs)\n  formula = formula.replace(\" \", \"\")\n  inputs_str, output = formula.split(\"-&gt;\") if \"-&gt;\" in formula else (formula, \\\n                                                                     ''.join(c for c in sorted(formula) if formula.count(c) == 1 and c.isalpha()))\n  inputs = inputs_str.split(',')\n  assert len(xs) == len(inputs), f\"number of inputs doesn't match number of operands in formula, expected {len(inputs)}, got {len(xs)}\"\n\n  # map the value of each letter in the formula\n  letter_val = sorted(merge_dicts([dict(zip(letters, tensor.shape)) for letters, tensor in zip(inputs, xs)]).items())\n\n  xs_:List[Tensor] = []\n  lhs = [sorted(enumerate(s), key=lambda e:e[1]) for s in inputs]\n  for x,(order,letters) in zip(xs, [list(zip(*l)) for l in lhs]):\n    # permute to the sorted letter order, then reshape/expand to create dimensions for the missing letters\n    xs_.append(x.permute(order).reshape([val if letter in letters else 1 for letter,val in letter_val]).expand([val for _,val in letter_val]))\n\n  # determine the inverse permutation to revert back to original order\n  rhs_letter_order = argsort(list(output))\n  rhs_order = argsort(rhs_letter_order)\n\n  # sum over all axes that's not in the output, then permute to the output order\n  return functools.reduce(lambda a,b:a*b, xs_) \\\n    .sum(axis=[axis for axis,(letter,_) in enumerate(letter_val) if letter not in output],acc_dtype=acc_dtype).permute(rhs_order)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.cumsum","title":"cumsum","text":"<pre><code>cumsum(axis: int = 0) -&gt; Tensor\n</code></pre> <p>Computes the cumulative sum of the tensor along the specified axis.</p> <p>You can pass in the <code>axis</code> keyword argument to control the axis along which the cumulative sum is computed.</p> <p><pre><code>t = Tensor.ones(2, 3)\nprint(t.numpy())\n</code></pre> <pre><code>[[1. 1. 1.]\n [1. 1. 1.]]\n</code></pre> <pre><code>print(t.cumsum(1).numpy())\n</code></pre> <pre><code>[[1. 2. 3.]\n [1. 2. 3.]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def cumsum(self, axis:int=0) -&gt; Tensor:\n  \"\"\"\n  Computes the cumulative sum of the tensor along the specified axis.\n\n  You can pass in the `axis` keyword argument to control the axis along which the cumulative sum is computed.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.ones(2, 3)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.cumsum(1).numpy())\n  ```\n  \"\"\"\n  axis = self._resolve_dim(axis)\n  if self.ndim == 0 or 0 in self.shape: return self\n  # TODO: someday the optimizer will find this on it's own\n  # for now this is a two stage cumsum\n  SPLIT = 256\n  if self.shape[axis] &lt;= SPLIT*2: return self._cumsum(axis)\n  ret = self.transpose(axis,-1).pad2d((round_up(self.shape[axis], SPLIT)-self.shape[axis], 0))\n  ret = ret.unflatten(-1, (-1, SPLIT))._cumsum(-1)\n  base_add = ret[..., -1]._cumsum(-1, _first_zero=True)\n  base_add = base_add.unsqueeze(-1).expand(*base_add.shape, ret.shape[-1])\n  def fix(x:Tensor): return x.flatten(start_dim=-2)[..., -self.shape[axis]:].transpose(axis,-1)\n  return fix(ret) + fix(base_add)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.triu","title":"triu","text":"<pre><code>triu(diagonal: int = 0) -&gt; Tensor\n</code></pre> <p>Returns the upper triangular part of the tensor, the other elements are set to 0.</p> <p>The argument <code>diagonal</code> determines which diagonal is on the boundary. <code>diagonal = 0</code> means the main diagonal. Positive <code>diagonal</code> means above the main diagonal, and negative <code>diagonal</code> means below the main diagonal.</p> <p><pre><code>t = Tensor([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nprint(t.numpy())\n</code></pre> <pre><code>[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n</code></pre> <pre><code>print(t.triu(diagonal=0).numpy())\n</code></pre> <pre><code>[[ 1  2  3  4]\n [ 0  6  7  8]\n [ 0  0 11 12]]\n</code></pre> <pre><code>print(t.triu(diagonal=1).numpy())\n</code></pre> <pre><code>[[ 0  2  3  4]\n [ 0  0  7  8]\n [ 0  0  0 12]]\n</code></pre> <pre><code>print(t.triu(diagonal=-1).numpy())\n</code></pre> <pre><code>[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 0 10 11 12]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def triu(self, diagonal:int=0) -&gt; Tensor:\n  \"\"\"\n  Returns the upper triangular part of the tensor, the other elements are set to 0.\n\n  The argument `diagonal` determines which diagonal is on the boundary. `diagonal = 0` means the main diagonal.\n  Positive `diagonal` means above the main diagonal, and negative `diagonal` means below the main diagonal.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.triu(diagonal=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.triu(diagonal=1).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.triu(diagonal=-1).numpy())\n  ```\n  \"\"\"\n  return Tensor._tri(self.shape[-2], self.shape[-1], diagonal=diagonal, device=self.device, dtype=dtypes.bool).where(self, 0).cast(self.dtype)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.tril","title":"tril","text":"<pre><code>tril(diagonal: int = 0) -&gt; Tensor\n</code></pre> <p>Returns the lower triangular part of the tensor, the other elements are set to 0.</p> <p>The argument <code>diagonal</code> determines which diagonal is on the boundary. <code>diagonal = 0</code> means the main diagonal. Positive <code>diagonal</code> means above the main diagonal, and negative <code>diagonal</code> means below the main diagonal.</p> <p><pre><code>t = Tensor([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\nprint(t.numpy())\n</code></pre> <pre><code>[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n</code></pre> <pre><code>print(t.tril(diagonal=0).numpy())\n</code></pre> <pre><code>[[ 1  0  0  0]\n [ 5  6  0  0]\n [ 9 10 11  0]]\n</code></pre> <pre><code>print(t.tril(diagonal=1).numpy())\n</code></pre> <pre><code>[[ 1  2  0  0]\n [ 5  6  7  0]\n [ 9 10 11 12]]\n</code></pre> <pre><code>print(t.tril(diagonal=-1).numpy())\n</code></pre> <pre><code>[[ 0  0  0  0]\n [ 5  0  0  0]\n [ 9 10  0  0]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def tril(self, diagonal:int=0) -&gt; Tensor:\n  \"\"\"\n  Returns the lower triangular part of the tensor, the other elements are set to 0.\n\n  The argument `diagonal` determines which diagonal is on the boundary. `diagonal = 0` means the main diagonal.\n  Positive `diagonal` means above the main diagonal, and negative `diagonal` means below the main diagonal.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.tril(diagonal=0).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.tril(diagonal=1).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.tril(diagonal=-1).numpy())\n  ```\n  \"\"\"\n  return Tensor._tri(self.shape[-2], self.shape[-1], diagonal=diagonal+1, device=self.device, dtype=dtypes.bool).where(0, self).cast(self.dtype)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.interpolate","title":"interpolate","text":"<pre><code>interpolate(\n    size: Tuple[int, ...],\n    mode: str = \"linear\",\n    align_corners: bool = False,\n) -&gt; Tensor\n</code></pre> <p>Downsamples or Upsamples to the input <code>size</code>, accepts 0 to N batch dimensions.</p> <p>The interpolation algorithm is selected with <code>mode</code> which currently only supports <code>linear</code>. To run <code>bilinear</code> or <code>trilinear</code>, pass in a 2D or 3D size.</p> <p><pre><code>t = Tensor([[1, 2, 3, 4], [21, 22, 23, 24], [41, 42, 43, 44]])\nprint(t.numpy())\n</code></pre> <pre><code>[[ 1  2  3  4]\n [21 22 23 24]\n [41 42 43 44]]\n</code></pre> <pre><code>print(t.interpolate(size=(2,3), mode=\"linear\").numpy())\n</code></pre> <pre><code>[[ 6.1667  7.5     8.8333]\n [36.1667 37.5    38.8333]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def interpolate(self, size:Tuple[int, ...], mode:str=\"linear\", align_corners:bool=False) -&gt; Tensor:\n  \"\"\"\n  Downsamples or Upsamples to the input `size`, accepts 0 to N batch dimensions.\n\n  The interpolation algorithm is selected with `mode` which currently only supports `linear`.\n  To run `bilinear` or `trilinear`, pass in a 2D or 3D size.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 2, 3, 4], [21, 22, 23, 24], [41, 42, 43, 44]])\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.interpolate(size=(2,3), mode=\"linear\").numpy())\n  ```\n  \"\"\"\n  assert isinstance(size, (tuple,list)) and all_int(size) and 0 &lt; len(size) &lt;= self.ndim, f\"invalid {size=}\"\n  assert mode == \"linear\", \"only supports linear interpolate\"\n  x, expand = self, list(self.shape)\n  for i in range(-len(size), 0):\n    scale = (self.shape[i] - int(align_corners)) / (size[i] - int(align_corners))\n    arr, reshape = Tensor.arange(size[i], dtype=dtypes.float32), [1] * self.ndim\n    index = (scale*arr if align_corners else (scale*(arr+0.5))-0.5).clip(0, self.shape[i]-1)\n    reshape[i] = expand[i] = size[i]\n    low, high, perc = [y.reshape(reshape).expand(expand) for y in (index.floor(), index.ceil(), index - index.floor())]\n    x = x.gather(i, low).lerp(x.gather(i, high), perc)\n  return x\n</code></pre>"},{"location":"tensor/ops/#unary-ops-math","title":"Unary Ops (math)","text":""},{"location":"tensor/ops/#tinygrad.Tensor.logical_not","title":"logical_not","text":"<pre><code>logical_not()\n</code></pre> <p>Computes the logical NOT of the tensor element-wise.</p> <pre><code>print(Tensor([False, True]).logical_not().numpy())\n</code></pre> <pre><code>[ True False]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def logical_not(self):\n  \"\"\"\n  Computes the logical NOT of the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([False, True]).logical_not().numpy())\n  ```\n  \"\"\"\n  return F.Neq.apply(*self.cast(dtypes.bool)._broadcasted(True))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.neg","title":"neg","text":"<pre><code>neg()\n</code></pre> <p>Negates the tensor element-wise.</p> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).neg().numpy())\n</code></pre> <pre><code>[ 3.  2.  1. -0. -1. -2. -3.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def neg(self):\n  \"\"\"\n  Negates the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).neg().numpy())\n  ```\n  \"\"\"\n  return F.Neg.apply(self) if self.dtype != dtypes.bool else self.logical_not()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.log","title":"log","text":"<pre><code>log()\n</code></pre> <p>Computes the natural logarithm element-wise.</p> <p>See: https://en.wikipedia.org/wiki/Logarithm</p> <pre><code>print(Tensor([1., 2., 4., 8.]).log().numpy())\n</code></pre> <pre><code>[0.     0.6931 1.3863 2.0794]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def log(self):\n  \"\"\"\n  Computes the natural logarithm element-wise.\n\n  See: https://en.wikipedia.org/wiki/Logarithm\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1., 2., 4., 8.]).log().numpy())\n  ```\n  \"\"\"\n  return F.Log.apply(self.cast(least_upper_float(self.dtype)))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.log2","title":"log2","text":"<pre><code>log2()\n</code></pre> <p>Computes the base-2 logarithm element-wise.</p> <p>See: https://en.wikipedia.org/wiki/Logarithm</p> <pre><code>print(Tensor([1., 2., 4., 8.]).log2().numpy())\n</code></pre> <pre><code>[0. 1. 2. 3.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def log2(self):\n  \"\"\"\n  Computes the base-2 logarithm element-wise.\n\n  See: https://en.wikipedia.org/wiki/Logarithm\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1., 2., 4., 8.]).log2().numpy())\n  ```\n  \"\"\"\n  return self.log()/math.log(2)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.exp","title":"exp","text":"<pre><code>exp()\n</code></pre> <p>Computes the exponential function element-wise.</p> <p>See: https://en.wikipedia.org/wiki/Exponential_function</p> <pre><code>print(Tensor([0., 1., 2., 3.]).exp().numpy())\n</code></pre> <pre><code>[ 1.      2.7183  7.3891 20.0855]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def exp(self):\n  \"\"\"\n  Computes the exponential function element-wise.\n\n  See: https://en.wikipedia.org/wiki/Exponential_function\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([0., 1., 2., 3.]).exp().numpy())\n  ```\n  \"\"\"\n  return F.Exp.apply(self.cast(least_upper_float(self.dtype)))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.exp2","title":"exp2","text":"<pre><code>exp2()\n</code></pre> <p>Computes the base-2 exponential function element-wise.</p> <p>See: https://en.wikipedia.org/wiki/Exponential_function</p> <pre><code>print(Tensor([0., 1., 2., 3.]).exp2().numpy())\n</code></pre> <pre><code>[1. 2. 4. 8.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def exp2(self):\n  \"\"\"\n  Computes the base-2 exponential function element-wise.\n\n  See: https://en.wikipedia.org/wiki/Exponential_function\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([0., 1., 2., 3.]).exp2().numpy())\n  ```\n  \"\"\"\n  return F.Exp.apply(self*math.log(2))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.sqrt","title":"sqrt","text":"<pre><code>sqrt()\n</code></pre> <p>Computes the square root of the tensor element-wise.</p> <pre><code>print(Tensor([1., 2., 3., 4.]).sqrt().numpy())\n</code></pre> <pre><code>[1.     1.4142 1.7321 2.    ]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sqrt(self):\n  \"\"\"\n  Computes the square root of the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1., 2., 3., 4.]).sqrt().numpy())\n  ```\n  \"\"\"\n  return F.Sqrt.apply(self.cast(least_upper_float(self.dtype)))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.rsqrt","title":"rsqrt","text":"<pre><code>rsqrt()\n</code></pre> <p>Computes the reciprocal of the square root of the tensor element-wise.</p> <pre><code>print(Tensor([1., 2., 3., 4.]).rsqrt().numpy())\n</code></pre> <pre><code>[1.     0.7071 0.5774 0.5   ]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def rsqrt(self):\n  \"\"\"\n  Computes the reciprocal of the square root of the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1., 2., 3., 4.]).rsqrt().numpy())\n  ```\n  \"\"\"\n  return self.reciprocal().sqrt()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.sin","title":"sin","text":"<pre><code>sin()\n</code></pre> <p>Computes the sine of the tensor element-wise.</p> <pre><code>print(Tensor([0., math.pi/2, math.pi, 3*math.pi/2, 2*math.pi]).sin().numpy())\n</code></pre> <pre><code>[ 0.  1. -0. -1.  0.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sin(self):\n  \"\"\"\n  Computes the sine of the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([0., math.pi/2, math.pi, 3*math.pi/2, 2*math.pi]).sin().numpy())\n  ```\n  \"\"\"\n  return F.Sin.apply(self.cast(least_upper_float(self.dtype)))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.cos","title":"cos","text":"<pre><code>cos()\n</code></pre> <p>Computes the cosine of the tensor element-wise.</p> <pre><code>print(Tensor([0., math.pi/2, math.pi, 3*math.pi/2, 2*math.pi]).cos().numpy())\n</code></pre> <pre><code>[ 1.0000e+00  0.0000e+00 -1.0000e+00 -2.3842e-07  1.0000e+00]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def cos(self):\n  \"\"\"\n  Computes the cosine of the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([0., math.pi/2, math.pi, 3*math.pi/2, 2*math.pi]).cos().numpy())\n  ```\n  \"\"\"\n  return ((math.pi/2)-self).sin()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.tan","title":"tan","text":"<pre><code>tan()\n</code></pre> <p>Computes the tangent of the tensor element-wise.</p> <pre><code>print(Tensor([0., math.pi/4, math.pi/2, 3*math.pi/4, math.pi]).tan().numpy())\n</code></pre> <pre><code>[ 0.  1. inf -1.  0.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def tan(self):\n  \"\"\"\n  Computes the tangent of the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([0., math.pi/4, math.pi/2, 3*math.pi/4, math.pi]).tan().numpy())\n  ```\n  \"\"\"\n  return self.sin() / self.cos()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.trunc","title":"trunc","text":"<pre><code>trunc() -&gt; Tensor\n</code></pre> <p>Truncates the tensor element-wise.</p> <pre><code>print(Tensor([-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]).trunc().numpy())\n</code></pre> <pre><code>[-3. -2. -1.  0.  0.  1.  2.  3.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def trunc(self: Tensor) -&gt; Tensor:\n  \"\"\"\n  Truncates the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]).trunc().numpy())\n  ```\n  \"\"\"\n  return self.cast(dtypes.int32).cast(self.dtype)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.ceil","title":"ceil","text":"<pre><code>ceil() -&gt; Tensor\n</code></pre> <p>Rounds the tensor element-wise towards positive infinity.</p> <pre><code>print(Tensor([-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]).ceil().numpy())\n</code></pre> <pre><code>[-3. -2. -1.  0.  1.  2.  3.  4.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def ceil(self: Tensor) -&gt; Tensor:\n  \"\"\"\n  Rounds the tensor element-wise towards positive infinity.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]).ceil().numpy())\n  ```\n  \"\"\"\n  return (self &gt; (b := self.trunc())).where(b+1, b)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.floor","title":"floor","text":"<pre><code>floor() -&gt; Tensor\n</code></pre> <p>Rounds the tensor element-wise towards negative infinity.</p> <pre><code>print(Tensor([-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]).floor().numpy())\n</code></pre> <pre><code>[-4. -3. -2. -1.  0.  1.  2.  3.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def floor(self: Tensor) -&gt; Tensor:\n  \"\"\"\n  Rounds the tensor element-wise towards negative infinity.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]).floor().numpy())\n  ```\n  \"\"\"\n  return (self &lt; (b := self.trunc())).where(b-1, b)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.round","title":"round","text":"<pre><code>round() -&gt; Tensor\n</code></pre> <p>Rounds the tensor element-wise with rounding half to even.</p> <pre><code>print(Tensor([-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]).round().numpy())\n</code></pre> <pre><code>[-4. -2. -2.  0.  0.  2.  2.  4.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def round(self: Tensor) -&gt; Tensor:\n  \"\"\"\n  Rounds the tensor element-wise with rounding half to even.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5]).round().numpy())\n  ```\n  \"\"\"\n  return ((self &gt; 0) == ((b := self.cast(dtypes.int32) / 2.0).cast(dtypes.int32) == b)).where((self - 0.5).ceil(), (self + 0.5).floor())\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.lerp","title":"lerp","text":"<pre><code>lerp(end: Tensor, weight: Union[Tensor, float]) -&gt; Tensor\n</code></pre> <p>Linearly interpolates between <code>self</code> and <code>end</code> by <code>weight</code>.</p> <pre><code>print(Tensor([1., 2., 3.]).lerp(Tensor([4., 5., 6.]), 0.5).numpy())\n</code></pre> <pre><code>[2.5 3.5 4.5]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def lerp(self, end: Tensor, weight: Union[Tensor, float]) -&gt; Tensor:\n  \"\"\"\n  Linearly interpolates between `self` and `end` by `weight`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1., 2., 3.]).lerp(Tensor([4., 5., 6.]), 0.5).numpy())\n  ```\n  \"\"\"\n  return self + (end - self) * weight\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.square","title":"square","text":"<pre><code>square()\n</code></pre> <p>Squares the tensor element-wise. Equivalent to <code>self*self</code>.</p> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).square().numpy())\n</code></pre> <pre><code>[9. 4. 1. 0. 1. 4. 9.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def square(self):\n  \"\"\"\n  Squares the tensor element-wise.\n  Equivalent to `self*self`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).square().numpy())\n  ```\n  \"\"\"\n  return self*self\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.clip","title":"clip","text":"<pre><code>clip(min_=None, max_=None)\n</code></pre> <p>Clips (clamps) the values in the tensor between <code>min_</code> and <code>max_</code> element-wise. If <code>min_</code> is <code>None</code>, there is no lower bound. If <code>max_</code> is None, there is no upper bound.</p> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).clip(-1, 1).numpy())\n</code></pre> <pre><code>[-1. -1. -1.  0.  1.  1.  1.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def clip(self, min_=None, max_=None):\n  \"\"\"\n  Clips (clamps) the values in the tensor between `min_` and `max_` element-wise.\n  If `min_` is `None`, there is no lower bound. If `max_` is None, there is no upper bound.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).clip(-1, 1).numpy())\n  ```\n  \"\"\"\n  if min_ is None and max_ is None: raise RuntimeError(\"at least one of 'min_' or 'max_' must not be None\")\n  ret = self.maximum(min_) if min_ is not None else self\n  return ret.minimum(max_) if max_ is not None else ret\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.sign","title":"sign","text":"<pre><code>sign()\n</code></pre> <p>Returns the sign of the tensor element-wise.</p> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).sign().numpy())\n</code></pre> <pre><code>[-1. -1. -1.  0.  1.  1.  1.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sign(self):\n  \"\"\"\n  Returns the sign of the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).sign().numpy())\n  ```\n  \"\"\"\n  return F.Sign.apply(self)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.abs","title":"abs","text":"<pre><code>abs()\n</code></pre> <p>Computes the absolute value of the tensor element-wise.</p> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).abs().numpy())\n</code></pre> <pre><code>[3. 2. 1. 0. 1. 2. 3.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def abs(self):\n  \"\"\"\n  Computes the absolute value of the tensor element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).abs().numpy())\n  ```\n  \"\"\"\n  return self * self.sign()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.reciprocal","title":"reciprocal","text":"<pre><code>reciprocal()\n</code></pre> <p>Compute <code>1/x</code> element-wise.</p> <pre><code>print(Tensor([1., 2., 3., 4.]).reciprocal().numpy())\n</code></pre> <pre><code>[1.     0.5    0.3333 0.25  ]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def reciprocal(self):\n  \"\"\"\n  Compute `1/x` element-wise.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1., 2., 3., 4.]).reciprocal().numpy())\n  ```\n  \"\"\"\n  return F.Reciprocal.apply(self.cast(least_upper_float(self.dtype)))\n</code></pre>"},{"location":"tensor/ops/#unary-ops-activation","title":"Unary Ops (activation)","text":""},{"location":"tensor/ops/#tinygrad.Tensor.relu","title":"relu","text":"<pre><code>relu()\n</code></pre> <p>Applies the Rectified Linear Unit (ReLU) function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/relu</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).relu().numpy())\n</code></pre> <pre><code>[0. 0. 0. 0. 1. 2. 3.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def relu(self):\n  \"\"\"\n  Applies the Rectified Linear Unit (ReLU) function element-wise.\n\n  - Described: https://paperswithcode.com/method/relu\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).relu().numpy())\n  ```\n  \"\"\"\n  return F.Relu.apply(self)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.sigmoid","title":"sigmoid","text":"<pre><code>sigmoid()\n</code></pre> <p>Applies the Sigmoid function element-wise.</p> <ul> <li>Described: https://en.wikipedia.org/wiki/Sigmoid_function</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).sigmoid().numpy())\n</code></pre> <pre><code>[0.0474 0.1192 0.2689 0.5    0.7311 0.8808 0.9526]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sigmoid(self):\n  \"\"\"\n  Applies the Sigmoid function element-wise.\n\n  - Described: https://en.wikipedia.org/wiki/Sigmoid_function\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).sigmoid().numpy())\n  ```\n  \"\"\"\n  return F.Sigmoid.apply(self.cast(least_upper_float(self.dtype)))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.elu","title":"elu","text":"<pre><code>elu(alpha=1.0)\n</code></pre> <p>Applies the Exponential Linear Unit (ELU) function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/elu</li> <li>Paper: https://arxiv.org/abs/1511.07289v5</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).elu().numpy())\n</code></pre> <pre><code>[-0.9502 -0.8647 -0.6321  0.      1.      2.      3.    ]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def elu(self, alpha=1.0):\n  \"\"\"\n  Applies the Exponential Linear Unit (ELU) function element-wise.\n\n  - Described: https://paperswithcode.com/method/elu\n  - Paper: https://arxiv.org/abs/1511.07289v5\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).elu().numpy())\n  ```\n  \"\"\"\n  return self.relu() - alpha*(1-self.exp()).relu()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.celu","title":"celu","text":"<pre><code>celu(alpha=1.0)\n</code></pre> <p>Applies the Continuously differentiable Exponential Linear Unit (CELU) function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/celu</li> <li>Paper: https://arxiv.org/abs/1704.07483</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).celu().numpy())\n</code></pre> <pre><code>[-0.9502 -0.8647 -0.6321  0.      1.      2.      3.    ]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def celu(self, alpha=1.0):\n  \"\"\"\n  Applies the Continuously differentiable Exponential Linear Unit (CELU) function element-wise.\n\n  - Described: https://paperswithcode.com/method/celu\n  - Paper: https://arxiv.org/abs/1704.07483\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).celu().numpy())\n  ```\n  \"\"\"\n  return self.maximum(0) + (alpha * ((self / alpha).exp() - 1)).minimum(0)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.swish","title":"swish","text":"<pre><code>swish()\n</code></pre> <p>See <code>.silu()</code></p> <ul> <li>Paper: https://arxiv.org/abs/1710.05941v1</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).swish().numpy())\n</code></pre> <pre><code>[-0.1423 -0.2384 -0.2689  0.      0.7311  1.7616  2.8577]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def swish(self):\n  \"\"\"\n  See `.silu()`\n\n  - Paper: https://arxiv.org/abs/1710.05941v1\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).swish().numpy())\n  ```\n  \"\"\"\n  return self * self.sigmoid()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.silu","title":"silu","text":"<pre><code>silu()\n</code></pre> <p>Applies the Sigmoid Linear Unit (SiLU) function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/silu</li> <li>Paper: https://arxiv.org/abs/1606.08415</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).silu().numpy())\n</code></pre> <pre><code>[-0.1423 -0.2384 -0.2689  0.      0.7311  1.7616  2.8577]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def silu(self):\n  \"\"\"\n  Applies the Sigmoid Linear Unit (SiLU) function element-wise.\n\n  - Described: https://paperswithcode.com/method/silu\n  - Paper: https://arxiv.org/abs/1606.08415\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).silu().numpy())\n  ```\n  \"\"\"\n  return self.swish()   # The SiLU function is also known as the swish function.\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.relu6","title":"relu6","text":"<pre><code>relu6()\n</code></pre> <p>Applies the ReLU6 function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/relu6</li> <li>Paper: https://arxiv.org/abs/1704.04861v1</li> </ul> <pre><code>print(Tensor([-9., -6., -3., 0., 3., 6., 9.]).relu6().numpy())\n</code></pre> <pre><code>[0. 0. 0. 0. 3. 6. 6.]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def relu6(self):\n  \"\"\"\n  Applies the ReLU6 function element-wise.\n\n  - Described: https://paperswithcode.com/method/relu6\n  - Paper: https://arxiv.org/abs/1704.04861v1\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-9., -6., -3., 0., 3., 6., 9.]).relu6().numpy())\n  ```\n  \"\"\"\n  return self.relu() - (self-6).relu()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.hardswish","title":"hardswish","text":"<pre><code>hardswish()\n</code></pre> <p>Applies the Hardswish function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/hard-swish</li> <li>Paper: https://arxiv.org/abs/1905.02244v5</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).hardswish().numpy())\n</code></pre> <pre><code>[-0.     -0.3333 -0.3333  0.      0.6667  1.6667  3.    ]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def hardswish(self):\n  \"\"\"\n  Applies the Hardswish function element-wise.\n\n  - Described: https://paperswithcode.com/method/hard-swish\n  - Paper: https://arxiv.org/abs/1905.02244v5\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).hardswish().numpy())\n  ```\n  \"\"\"\n  return self * (self+3).relu6() * (1/6)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.tanh","title":"tanh","text":"<pre><code>tanh()\n</code></pre> <p>Applies the Hyperbolic Tangent (tanh) function element-wise.</p> <ul> <li>Described: https://en.wikipedia.org/wiki/Hyperbolic_functions#Tanh</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).tanh().numpy())\n</code></pre> <pre><code>[-0.9951 -0.964  -0.7616  0.      0.7616  0.964   0.9951]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def tanh(self):\n  \"\"\"\n  Applies the Hyperbolic Tangent (tanh) function element-wise.\n\n  - Described: https://en.wikipedia.org/wiki/Hyperbolic_functions#Tanh\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).tanh().numpy())\n  ```\n  \"\"\"\n  return 2.0 * ((2.0 * self).sigmoid()) - 1.0\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.sinh","title":"sinh","text":"<pre><code>sinh()\n</code></pre> <p>Applies the Hyperbolic Sine (sinh) function element-wise.</p> <ul> <li>Described: https://en.wikipedia.org/wiki/Hyperbolic_functions#Sinh</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).sinh().numpy())\n</code></pre> <pre><code>[-10.0179  -3.6269  -1.1752   0.       1.1752   3.6269  10.0179]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sinh(self):\n  \"\"\"\n  Applies the Hyperbolic Sine (sinh) function element-wise.\n\n  - Described: https://en.wikipedia.org/wiki/Hyperbolic_functions#Sinh\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).sinh().numpy())\n  ```\n  \"\"\"\n  return (self.exp() - self.neg().exp()) / 2\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.cosh","title":"cosh","text":"<pre><code>cosh()\n</code></pre> <p>Applies the Hyperbolic Cosine (cosh) function element-wise.</p> <ul> <li>Described: https://en.wikipedia.org/wiki/Hyperbolic_functions#Cosh</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).cosh().numpy())\n</code></pre> <pre><code>[10.0677  3.7622  1.5431  1.      1.5431  3.7622 10.0677]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def cosh(self):\n  \"\"\"\n  Applies the Hyperbolic Cosine (cosh) function element-wise.\n\n  - Described: https://en.wikipedia.org/wiki/Hyperbolic_functions#Cosh\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).cosh().numpy())\n  ```\n  \"\"\"\n  return (self.exp() + self.neg().exp()) / 2\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.atanh","title":"atanh","text":"<pre><code>atanh()\n</code></pre> <p>Applies the Inverse Hyperbolic Tangent (atanh) function element-wise.</p> <ul> <li>Described: https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#atanh</li> </ul> <pre><code>print(Tensor([-0.9, -0.6, -0.3, 0., 0.3, 0.6, 0.9]).atanh().numpy())\n</code></pre> <pre><code>[-1.4722 -0.6931 -0.3095  0.      0.3095  0.6931  1.4722]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def atanh(self):\n  \"\"\"\n  Applies the Inverse Hyperbolic Tangent (atanh) function element-wise.\n\n  - Described: https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#atanh\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-0.9, -0.6, -0.3, 0., 0.3, 0.6, 0.9]).atanh().numpy())\n  ```\n  \"\"\"\n  return ((1 + self)/(1 - self)).log() / 2\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.asinh","title":"asinh","text":"<pre><code>asinh()\n</code></pre> <p>Applies the Inverse Hyperbolic Sine (asinh) function element-wise.</p> <ul> <li>Described: https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#asinh</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).asinh().numpy())\n</code></pre> <pre><code>[-1.8184 -1.4436 -0.8814  0.      0.8814  1.4436  1.8184]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def asinh(self):\n  \"\"\"\n  Applies the Inverse Hyperbolic Sine (asinh) function element-wise.\n\n  - Described: https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#asinh\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).asinh().numpy())\n  ```\n  \"\"\"\n  return (self + (self.square() + 1).sqrt()).log()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.acosh","title":"acosh","text":"<pre><code>acosh()\n</code></pre> <p>Applies the Inverse Hyperbolic Cosine (acosh) function element-wise.</p> <ul> <li>Described: https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#acosh</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).acosh().numpy())\n</code></pre> <pre><code>[   nan    nan    nan    nan 0.     1.317  1.7627]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def acosh(self):\n  \"\"\"\n  Applies the Inverse Hyperbolic Cosine (acosh) function element-wise.\n\n  - Described: https://en.wikipedia.org/wiki/Inverse_hyperbolic_functions#acosh\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).acosh().numpy())\n  ```\n  \"\"\"\n  return (self + (self.square() - 1).sqrt()).log()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.hardtanh","title":"hardtanh","text":"<pre><code>hardtanh(min_val=-1, max_val=1)\n</code></pre> <p>Applies the Hardtanh function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/hardtanh-activation</li> </ul> <pre><code>print(Tensor([-1.5, -1.0, -0.5, 0., 0.5, 1.0, 1.5]).hardtanh().numpy())\n</code></pre> <pre><code>[-1.  -1.  -0.5  0.   0.5  1.   1. ]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def hardtanh(self, min_val=-1, max_val=1):\n  \"\"\"\n  Applies the Hardtanh function element-wise.\n\n  - Described: https://paperswithcode.com/method/hardtanh-activation\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-1.5, -1.0, -0.5, 0., 0.5, 1.0, 1.5]).hardtanh().numpy())\n  ```\n  \"\"\"\n  return self.clip(min_val, max_val)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.gelu","title":"gelu","text":"<pre><code>gelu()\n</code></pre> <p>Applies the Gaussian Error Linear Unit (GELU) function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/gelu</li> <li>Paper: https://arxiv.org/abs/1606.08415v5</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).gelu().numpy())\n</code></pre> <pre><code>[-0.0036 -0.0454 -0.1588  0.      0.8412  1.9546  2.9964]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def gelu(self):\n  \"\"\"\n  Applies the Gaussian Error Linear Unit (GELU) function element-wise.\n\n  - Described: https://paperswithcode.com/method/gelu\n  - Paper: https://arxiv.org/abs/1606.08415v5\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).gelu().numpy())\n  ```\n  \"\"\"\n  return 0.5 * self * (1 + (math.sqrt(2 / math.pi) * (self + 0.044715 * self ** 3)).tanh())\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.quick_gelu","title":"quick_gelu","text":"<pre><code>quick_gelu()\n</code></pre> <p>Applies the Sigmoid GELU approximation element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/gelu</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).quick_gelu().numpy())\n</code></pre> <pre><code>[-0.0181 -0.0643 -0.1542  0.      0.8458  1.9357  2.9819]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def quick_gelu(self):\n  \"\"\"\n  Applies the Sigmoid GELU approximation element-wise.\n\n  - Described: https://paperswithcode.com/method/gelu\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).quick_gelu().numpy())\n  ```\n  \"\"\"\n  return self * (self * 1.702).sigmoid()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.leakyrelu","title":"leakyrelu","text":"<pre><code>leakyrelu(neg_slope=0.01)\n</code></pre> <p>Applies the Leaky ReLU function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/leaky-relu</li> </ul> <p><pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).leakyrelu().numpy())\n</code></pre> <pre><code>[-0.03 -0.02 -0.01  0.    1.    2.    3.  ]\n</code></pre> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).leakyrelu(neg_slope=0.42).numpy())\n</code></pre> <pre><code>[-1.26 -0.84 -0.42  0.    1.    2.    3.  ]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def leakyrelu(self, neg_slope=0.01):\n  \"\"\"\n  Applies the Leaky ReLU function element-wise.\n\n  - Described: https://paperswithcode.com/method/leaky-relu\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).leakyrelu().numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).leakyrelu(neg_slope=0.42).numpy())\n  ```\n  \"\"\"\n  return self.relu() - (-neg_slope*self).relu()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.mish","title":"mish","text":"<pre><code>mish()\n</code></pre> <p>Applies the Mish function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/mish</li> <li>Paper: https://arxiv.org/abs/1908.08681v3</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).mish().numpy())\n</code></pre> <pre><code>[-0.1456 -0.2525 -0.3034  0.      0.8651  1.944   2.9865]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def mish(self):\n  \"\"\"\n  Applies the Mish function element-wise.\n\n  - Described: https://paperswithcode.com/method/mish\n  - Paper: https://arxiv.org/abs/1908.08681v3\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).mish().numpy())\n  ```\n  \"\"\"\n  return self * self.softplus().tanh()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.softplus","title":"softplus","text":"<pre><code>softplus(beta=1)\n</code></pre> <p>Applies the Softplus function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/softplus</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).softplus().numpy())\n</code></pre> <pre><code>[0.0486 0.1269 0.3133 0.6931 1.3133 2.1269 3.0486]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def softplus(self, beta=1):\n  \"\"\"\n  Applies the Softplus function element-wise.\n\n  - Described: https://paperswithcode.com/method/softplus\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).softplus().numpy())\n  ```\n  \"\"\"\n  return (1/beta) * (1 + (self*beta).exp()).log()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.softsign","title":"softsign","text":"<pre><code>softsign()\n</code></pre> <p>Applies the Softsign function element-wise.</p> <ul> <li>Described: https://paperswithcode.com/method/softsign</li> </ul> <pre><code>print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).softsign().numpy())\n</code></pre> <pre><code>[-0.75   -0.6667 -0.5     0.      0.5     0.6667  0.75  ]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def softsign(self):\n  \"\"\"\n  Applies the Softsign function element-wise.\n\n  - Described: https://paperswithcode.com/method/softsign\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-3., -2., -1., 0., 1., 2., 3.]).softsign().numpy())\n  ```\n  \"\"\"\n  return self / (1 + self.abs())\n</code></pre>"},{"location":"tensor/ops/#elementwise-ops-broadcasted","title":"Elementwise Ops (broadcasted)","text":""},{"location":"tensor/ops/#tinygrad.Tensor.add","title":"add","text":"<pre><code>add(x: Union[Tensor, ConstType], reverse=False) -&gt; Tensor\n</code></pre> <p>Adds <code>self</code> and <code>x</code>. Equivalent to <code>self + x</code>. Supports broadcasting to a common shape, type promotion, and integer, float, boolean inputs.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.randn(4)\nprint(t.numpy())\n</code></pre> <pre><code>[-1.3113 -0.1159 -0.6549  1.84  ]\n</code></pre> <pre><code>print(t.add(20).numpy())\n</code></pre> <pre><code>[18.6887 19.8841 19.3451 21.84  ]\n</code></pre> <pre><code>print(t.add(Tensor([[2.0], [3.5]])).numpy())\n</code></pre> <pre><code>[[0.6887 1.8841 1.3451 3.84  ]\n [2.1887 3.3841 2.8451 5.34  ]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def add(self, x:Union[Tensor, ConstType], reverse=False) -&gt; Tensor:\n  \"\"\"\n  Adds `self` and `x`.\n  Equivalent to `self + x`.\n  Supports broadcasting to a common shape, type promotion, and integer, float, boolean inputs.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.randn(4)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.add(20).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.add(Tensor([[2.0], [3.5]])).numpy())\n  ```\n  \"\"\"\n  return F.Add.apply(*self._broadcasted(x, reverse))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.sub","title":"sub","text":"<pre><code>sub(x: Union[Tensor, ConstType], reverse=False) -&gt; Tensor\n</code></pre> <p>Subtracts <code>x</code> from <code>self</code>. Equivalent to <code>self - x</code>. Supports broadcasting to a common shape, type promotion, and integer, float, boolean inputs.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.randn(4)\nprint(t.numpy())\n</code></pre> <pre><code>[-1.3113 -0.1159 -0.6549  1.84  ]\n</code></pre> <pre><code>print(t.sub(20).numpy())\n</code></pre> <pre><code>[-21.3113 -20.1159 -20.6549 -18.16  ]\n</code></pre> <pre><code>print(t.sub(Tensor([[2.0], [3.5]])).numpy())\n</code></pre> <pre><code>[[-3.3113 -2.1159 -2.6549 -0.16  ]\n [-4.8113 -3.6159 -4.1549 -1.66  ]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sub(self, x:Union[Tensor, ConstType], reverse=False) -&gt; Tensor:\n  \"\"\"\n  Subtracts `x` from `self`.\n  Equivalent to `self - x`.\n  Supports broadcasting to a common shape, type promotion, and integer, float, boolean inputs.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.randn(4)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.sub(20).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.sub(Tensor([[2.0], [3.5]])).numpy())\n  ```\n  \"\"\"\n  a, b = self._broadcasted(x, reverse)\n  return a + (-b)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.mul","title":"mul","text":"<pre><code>mul(x: Union[Tensor, ConstType], reverse=False) -&gt; Tensor\n</code></pre> <p>Multiplies <code>self</code> and <code>x</code>. Equivalent to <code>self * x</code>. Supports broadcasting to a common shape, type promotion, and integer, float, boolean inputs.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.randn(4)\nprint(t.numpy())\n</code></pre> <pre><code>[-1.3113 -0.1159 -0.6549  1.84  ]\n</code></pre> <pre><code>print(t.mul(3).numpy())\n</code></pre> <pre><code>[-3.934  -0.3476 -1.9646  5.5201]\n</code></pre> <pre><code>print(t.mul(Tensor([[-1.0], [2.0]])).numpy())\n</code></pre> <pre><code>[[ 1.3113  0.1159  0.6549 -1.84  ]\n [-2.6226 -0.2318 -1.3097  3.6801]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def mul(self, x:Union[Tensor, ConstType], reverse=False) -&gt; Tensor:\n  \"\"\"\n  Multiplies `self` and `x`.\n  Equivalent to `self * x`.\n  Supports broadcasting to a common shape, type promotion, and integer, float, boolean inputs.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.randn(4)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.mul(3).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.mul(Tensor([[-1.0], [2.0]])).numpy())\n  ```\n  \"\"\"\n  return F.Mul.apply(*self._broadcasted(x, reverse))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.div","title":"div","text":"<pre><code>div(\n    x: Union[Tensor, ConstType], reverse=False, upcast=True\n) -&gt; Tensor\n</code></pre> <p>Divides <code>self</code> by <code>x</code>. Equivalent to <code>self / x</code>. Supports broadcasting to a common shape, type promotion, and integer, float, boolean inputs. By default, <code>div</code> performs true division. Set <code>upcast</code> to <code>False</code> for integer division.</p> <p><pre><code>Tensor.manual_seed(42)\nt = Tensor.randn(4)\nprint(t.numpy())\n</code></pre> <pre><code>[-1.3113 -0.1159 -0.6549  1.84  ]\n</code></pre> <pre><code>print(t.div(3).numpy())\n</code></pre> <pre><code>[-0.4371 -0.0386 -0.2183  0.6133]\n</code></pre> <pre><code>print(Tensor([1, 4, 10]).div(Tensor([2, 3, 4])).numpy())\n</code></pre> <pre><code>[0.5    1.3333 2.5   ]\n</code></pre> <pre><code>print(Tensor([1, 4, 10]).div(Tensor([2, 3, 4]), upcast=False).numpy())\n</code></pre> <pre><code>[0 1 2]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def div(self, x:Union[Tensor, ConstType], reverse=False, upcast=True) -&gt; Tensor:\n  \"\"\"\n  Divides `self` by `x`.\n  Equivalent to `self / x`.\n  Supports broadcasting to a common shape, type promotion, and integer, float, boolean inputs.\n  By default, `div` performs true division. Set `upcast` to `False` for integer division.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.randn(4)\n  print(t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(t.div(3).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1, 4, 10]).div(Tensor([2, 3, 4])).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1, 4, 10]).div(Tensor([2, 3, 4]), upcast=False).numpy())\n  ```\n  \"\"\"\n  numerator, denominator = self._broadcasted(x, reverse)\n  if upcast: numerator, denominator = numerator.cast(least_upper_float(numerator.dtype)), denominator.cast(least_upper_float(denominator.dtype))\n  return F.Div.apply(numerator, denominator)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.xor","title":"xor","text":"<pre><code>xor(x: Union[Tensor, ConstType], reverse=False) -&gt; Tensor\n</code></pre> <p>Computes bitwise xor of <code>self</code> and <code>x</code>. Equivalent to <code>self ^ x</code>. Supports broadcasting to a common shape, type promotion, and integer, boolean inputs.</p> <p><pre><code>print(Tensor([-1, -2, 3]).xor(Tensor([1, 0, 3])).numpy())\n</code></pre> <pre><code>[-2 -2  0]\n</code></pre> <pre><code>print(Tensor([True, True, False, False]).xor(Tensor([True, False, True, False])).numpy())\n</code></pre> <pre><code>[False  True  True False]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def xor(self, x:Union[Tensor, ConstType], reverse=False) -&gt; Tensor:\n  \"\"\"\n  Computes bitwise xor of `self` and `x`.\n  Equivalent to `self ^ x`.\n  Supports broadcasting to a common shape, type promotion, and integer, boolean inputs.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-1, -2, 3]).xor(Tensor([1, 0, 3])).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([True, True, False, False]).xor(Tensor([True, False, True, False])).numpy())\n  ```\n  \"\"\"\n  return F.Xor.apply(*self._broadcasted(x, reverse))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.lshift","title":"lshift","text":"<pre><code>lshift(x: int)\n</code></pre> <p>Computes left arithmetic shift of <code>self</code> by <code>x</code> bits. <code>self</code> must have unsigned dtype. Equivalent to <code>self &lt;&lt; x</code>.</p> <pre><code>print(Tensor([1, 3, 31], dtype=dtypes.uint8).lshift(2).numpy())\n</code></pre> <pre><code>[  4  12 124]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def lshift(self, x:int):\n  \"\"\"\n  Computes left arithmetic shift of `self` by `x` bits. `self` must have unsigned dtype.\n  Equivalent to `self &lt;&lt; x`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([1, 3, 31], dtype=dtypes.uint8).lshift(2).numpy())\n  ```\n  \"\"\"\n  assert dtypes.is_unsigned(self.dtype) and isinstance(x, int) and x &gt;= 0, f\"not supported {self.dtype=} {x=}\"\n  return self.mul(2 ** x)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.rshift","title":"rshift","text":"<pre><code>rshift(x: int)\n</code></pre> <p>Computes right arithmetic shift of <code>self</code> by <code>x</code> bits. <code>self</code> must have unsigned dtype. Equivalent to <code>self &gt;&gt; x</code>.</p> <pre><code>print(Tensor([4, 13, 125], dtype=dtypes.uint8).rshift(2).numpy())\n</code></pre> <pre><code>[ 1  3 31]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def rshift(self, x:int):\n  \"\"\"\n  Computes right arithmetic shift of `self` by `x` bits. `self` must have unsigned dtype.\n  Equivalent to `self &gt;&gt; x`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([4, 13, 125], dtype=dtypes.uint8).rshift(2).numpy())\n  ```\n  \"\"\"\n  assert dtypes.is_unsigned(self.dtype) and isinstance(x, int) and x &gt;= 0, f\"not supported {self.dtype=} {x=}\"\n  return self.div(2 ** x, upcast=False)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.pow","title":"pow","text":"<pre><code>pow(x: Union[Tensor, ConstType], reverse=False) -&gt; Tensor\n</code></pre> <p>Computes power of <code>self</code> with <code>x</code>. Equivalent to <code>self ** x</code>.</p> <p><pre><code>print(Tensor([-1, 2, 3]).pow(2).numpy())\n</code></pre> <pre><code>[1 4 9]\n</code></pre> <pre><code>print(Tensor([-1, 2, 3]).pow(Tensor([-1.5, 0.5, 1.5])).numpy())\n</code></pre> <pre><code>[   nan 1.4142 5.1962]\n</code></pre> <pre><code>print((2 ** Tensor([-1, 2, 3])).numpy())\n</code></pre> <pre><code>[0.5 4.  8. ]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def pow(self, x:Union[Tensor, ConstType], reverse=False) -&gt; Tensor:\n  \"\"\"\n  Computes power of `self` with `x`.\n  Equivalent to `self ** x`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-1, 2, 3]).pow(2).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-1, 2, 3]).pow(Tensor([-1.5, 0.5, 1.5])).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print((2 ** Tensor([-1, 2, 3])).numpy())\n  ```\n  \"\"\"\n  x = self._to_const_val(x)\n  if not isinstance(x, Tensor) and not reverse:\n    # simple pow identities\n    if x &lt; 0: return self.reciprocal().pow(-x)\n    if x == 0: return 1 + self * 0\n    if int(x - 0.5) + 0.5 == x: return self.pow(int(x - 0.5)) * self.sqrt()\n    if int(x) == x: return self.pow(x // 2).square() * (1 if x % 2 == 0 else self)\n\n  # positive const ** self\n  if not isinstance(x, Tensor) and reverse and x &gt; 0: return self.mul(math.log(x)).exp()\n\n  base, exponent = self._broadcasted(x, reverse=reverse)\n  # start with b ** e = exp(e * log(b))\n  ret = base.abs().log().mul(exponent).exp()\n  # correct sign of negative base with odd exponent (cos has a period of 2pi so we use it here to get the oddness of the exponent)\n  negative_base = (base &lt; 0).detach().where(1, 0)\n  # 1 for non-negative base or negative even exponent, -1 for negative odd exponent, don't care about non-integer exponent\n  correct_sign = 1 + negative_base * ((exponent * math.pi).cos() - 1)\n  # inject nan for negative base and non-integer exponent\n  inject_nan = (negative_base * (exponent != exponent.trunc())).detach().where(math.nan, 1)\n  # apply correct_sign inject_nan, and fix 0 ** 0 = 1\n  return ((base == 0) * (exponent == 0)).detach().where(1, ret * correct_sign * inject_nan)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.maximum","title":"maximum","text":"<pre><code>maximum(x: Union[Tensor, ConstType]) -&gt; Tensor\n</code></pre> <p>Computes element-wise maximum of <code>self</code> and <code>x</code>.</p> <p><pre><code>print(Tensor([-1, 2, 3]).maximum(1).numpy())\n</code></pre> <pre><code>[1 2 3]\n</code></pre> <pre><code>print(Tensor([-1, 2, 3]).maximum(Tensor([-4, -2, 9])).numpy())\n</code></pre> <pre><code>[-1  2  9]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def maximum(self, x:Union[Tensor, ConstType]) -&gt; Tensor:\n  \"\"\"\n  Computes element-wise maximum of `self` and `x`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-1, 2, 3]).maximum(1).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-1, 2, 3]).maximum(Tensor([-4, -2, 9])).numpy())\n  ```\n  \"\"\"\n  return (self&lt;x).detach().where(x, (self==x).detach().where(((self * 0.5 + x * 0.5).cast(self.dtype)), self))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.minimum","title":"minimum","text":"<pre><code>minimum(x: Union[Tensor, ConstType]) -&gt; Tensor\n</code></pre> <p>Computes element-wise minimum of <code>self</code> and <code>x</code>.</p> <p><pre><code>print(Tensor([-1, 2, 3]).minimum(1).numpy())\n</code></pre> <pre><code>[-1  1  1]\n</code></pre> <pre><code>print(Tensor([-1, 2, 3]).minimum(Tensor([-4, -2, 9])).numpy())\n</code></pre> <pre><code>[-4 -2  3]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def minimum(self, x:Union[Tensor, ConstType]) -&gt; Tensor:\n  \"\"\"\n  Computes element-wise minimum of `self` and `x`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-1, 2, 3]).minimum(1).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print(Tensor([-1, 2, 3]).minimum(Tensor([-4, -2, 9])).numpy())\n  ```\n  \"\"\"\n  return -((-self).maximum(-x))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.where","title":"where","text":"<pre><code>where(\n    x: Union[Tensor, ConstType], y: Union[Tensor, ConstType]\n)\n</code></pre> <p>Return a tensor of elements selected from either <code>x</code> or <code>y</code>, depending on <code>self</code>. <code>output_i = x_i if self_i else y_i</code>.</p> <p><pre><code>cond = Tensor([[True, True, False], [True, False, False]])\nprint(cond.where(1, 3).numpy())\n</code></pre> <pre><code>[[1 1 3]\n [1 3 3]]\n</code></pre> <pre><code>Tensor.manual_seed(42)\ncond = Tensor.randn(2, 3)\nprint(cond.numpy())\n</code></pre> <pre><code>[[-0.8042 -1.1013 -0.9095]\n [ 1.2802 -2.2883  0.7078]]\n</code></pre> <pre><code>print((cond &gt; 0).where(cond, -float(\"inf\")).numpy())\n</code></pre> <pre><code>[[  -inf   -inf   -inf]\n [1.2802   -inf 0.7078]]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def where(self:Tensor, x:Union[Tensor, ConstType], y:Union[Tensor, ConstType]):\n  \"\"\"\n  Return a tensor of elements selected from either `x` or `y`, depending on `self`.\n  `output_i = x_i if self_i else y_i`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  cond = Tensor([[True, True, False], [True, False, False]])\n  print(cond.where(1, 3).numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  cond = Tensor.randn(2, 3)\n  print(cond.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  print((cond &gt; 0).where(cond, -float(\"inf\")).numpy())\n  ```\n  \"\"\"\n  if isinstance(x, Tensor): x, y = x._broadcasted(y)\n  elif isinstance(y, Tensor): y, x = y._broadcasted(x)\n  cond, x = self._broadcasted(x, match_dtype=False)\n  cond, y = cond._broadcasted(y, match_dtype=False)\n  return F.Where.apply(cond.cast(dtypes.bool), *x._broadcasted(y))\n</code></pre>"},{"location":"tensor/ops/#neural-network-ops-functional","title":"Neural Network Ops (functional)","text":""},{"location":"tensor/ops/#tinygrad.Tensor.linear","title":"linear","text":"<pre><code>linear(weight: Tensor, bias: Optional[Tensor] = None)\n</code></pre> <p>Applies a linear transformation to <code>self</code> using <code>weight</code> and <code>bias</code>.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.Linear.html</p> <pre><code>t = Tensor([[1, 2], [3, 4]])\nweight = Tensor([[1, 2], [3, 4]])\nbias = Tensor([1, 2])\nprint(t.linear(weight, bias).numpy())\n</code></pre> <pre><code>[[ 8 12]\n [16 24]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def linear(self, weight:Tensor, bias:Optional[Tensor]=None):\n  \"\"\"\n  Applies a linear transformation to `self` using `weight` and `bias`.\n\n  See: https://pytorch.org/docs/stable/generated/torch.nn.Linear.html\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[1, 2], [3, 4]])\n  weight = Tensor([[1, 2], [3, 4]])\n  bias = Tensor([1, 2])\n  print(t.linear(weight, bias).numpy())\n  ```\n  \"\"\"\n  x = self.mul(weight) if len(weight.shape) == 1 else self.dot(weight)\n  return x.add(bias) if bias is not None else x\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.sequential","title":"sequential","text":"<pre><code>sequential(ll: List[Callable[[Tensor], Tensor]])\n</code></pre> <p>Applies a sequence of functions to <code>self</code> chaining the output of each function to the input of the next.</p> <pre><code>t = Tensor([1, 2, 3])\nprint(t.sequential([lambda x: x * 2, lambda x: x + 1]).numpy())\n</code></pre> <pre><code>[3 5 7]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sequential(self, ll:List[Callable[[Tensor], Tensor]]):\n  \"\"\"\n  Applies a sequence of functions to `self` chaining the output of each function to the input of the next.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([1, 2, 3])\n  print(t.sequential([lambda x: x * 2, lambda x: x + 1]).numpy())\n  ```\n  \"\"\"\n  return functools.reduce(lambda x,f: f(x), ll, self)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.layernorm","title":"layernorm","text":"<pre><code>layernorm(axis=-1, eps: float = 1e-05) -&gt; Tensor\n</code></pre> <p>Applies Layer Normalization over a mini-batch of inputs.</p> <ul> <li>Described: https://paperswithcode.com/method/layer-normalization</li> <li>Paper: https://arxiv.org/abs/1607.06450v1</li> </ul> <p><pre><code>t = Tensor.randn(8, 10, 16) * 2 + 8\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>8.071009635925293 1.948869228363037\n</code></pre> <pre><code>t = t.layernorm()\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>-4.0756870101077425e-10 1.0003892183303833\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def layernorm(self, axis=-1, eps:float=1e-5) -&gt; Tensor:\n  \"\"\"\n  Applies Layer Normalization over a mini-batch of inputs.\n\n  - Described: https://paperswithcode.com/method/layer-normalization\n  - Paper: https://arxiv.org/abs/1607.06450v1\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.randn(8, 10, 16) * 2 + 8\n  print(t.mean().item(), t.std().item())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = t.layernorm()\n  print(t.mean().item(), t.std().item())\n  ```\n  \"\"\"\n  y = (self - self.mean(axis, keepdim=True))\n  return y.mul((y*y).mean(axis, keepdim=True).add(eps).rsqrt())\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.batchnorm","title":"batchnorm","text":"<pre><code>batchnorm(\n    weight: Optional[Tensor],\n    bias: Optional[Tensor],\n    mean: Tensor,\n    invstd: Tensor,\n    axis: Union[int, Tuple[int, ...]] = 1,\n) -&gt; Tensor\n</code></pre> <p>Applies Batch Normalization over a mini-batch of inputs.</p> <ul> <li>Described: https://paperswithcode.com/method/batch-normalization</li> <li>Paper: https://arxiv.org/abs/1502.03167</li> </ul> <p><pre><code>t = Tensor.randn(8, 4, 16, 16) * 2 + 8\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>7.981653690338135 2.002044677734375\n</code></pre> <pre><code>t = t.batchnorm(None, None, t.mean(axis=(0,2,3)), t.var(axis=(0,2,3)).add(1e-5).rsqrt())\nprint(t.mean().item(), t.std().item())\n</code></pre> <pre><code>1.0505208365430008e-06 0.9998155832290649\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def batchnorm(self, weight:Optional[Tensor], bias:Optional[Tensor], mean:Tensor, invstd:Tensor, axis:Union[int,Tuple[int,...]]=1) -&gt; Tensor:\n  \"\"\"\n  Applies Batch Normalization over a mini-batch of inputs.\n\n  - Described: https://paperswithcode.com/method/batch-normalization\n  - Paper: https://arxiv.org/abs/1502.03167\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor.randn(8, 4, 16, 16) * 2 + 8\n  print(t.mean().item(), t.std().item())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = t.batchnorm(None, None, t.mean(axis=(0,2,3)), t.var(axis=(0,2,3)).add(1e-5).rsqrt())\n  print(t.mean().item(), t.std().item())\n  ```\n  \"\"\"\n  axis_ = argfix(axis)\n  shape = tuple(s if ax in axis_ else 1 for ax, s in enumerate(self.shape))\n  x = self - mean.reshape(shape)\n  if weight is not None: x = x * weight.reshape(shape)\n  ret = x.mul(invstd.reshape(shape) if len(invstd.shape) == len(axis_) else invstd)\n  return (ret + bias.reshape(shape)) if bias is not None else ret\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.dropout","title":"dropout","text":"<pre><code>dropout(p=0.5) -&gt; Tensor\n</code></pre> <p>Applies dropout to <code>self</code>.</p> <p>Note</p> <p>dropout is only applied when <code>Tensor.training</code> is <code>True</code>.</p> <ul> <li>Described: https://paperswithcode.com/method/dropout</li> <li>Paper: https://jmlr.org/papers/v15/srivastava14a.html</li> </ul> <pre><code>Tensor.manual_seed(42)\nt = Tensor.randn(2, 2)\nwith Tensor.train():\n  print(t.dropout().numpy())\n</code></pre> <pre><code>[[-2.6226 -0.    ]\n [-1.3097  0.    ]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def dropout(self, p=0.5) -&gt; Tensor:\n  \"\"\"\n  Applies dropout to `self`.\n\n  NOTE: dropout is only applied when `Tensor.training` is `True`.\n\n  - Described: https://paperswithcode.com/method/dropout\n  - Paper: https://jmlr.org/papers/v15/srivastava14a.html\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  Tensor.manual_seed(42)\n  t = Tensor.randn(2, 2)\n  with Tensor.train():\n    print(t.dropout().numpy())\n  ```\n  \"\"\"\n  if not Tensor.training or p == 0: return self\n  return self * (Tensor.rand(*self.shape, requires_grad=False, dtype=dtypes.default_float, device=self.device) &gt;= p) * (1/(1.0 - p))\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.one_hot","title":"one_hot","text":"<pre><code>one_hot(num_classes: int) -&gt; Tensor\n</code></pre> <p>Converts <code>self</code> to a one-hot tensor.</p> <pre><code>t = Tensor([0, 1, 3, 3, 4])\nprint(t.one_hot(5).numpy())\n</code></pre> <pre><code>[[1 0 0 0 0]\n [0 1 0 0 0]\n [0 0 0 1 0]\n [0 0 0 1 0]\n [0 0 0 0 1]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def one_hot(self, num_classes:int) -&gt; Tensor:\n  \"\"\"\n  Converts `self` to a one-hot tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([0, 1, 3, 3, 4])\n  print(t.one_hot(5).numpy())\n  ```\n  \"\"\"\n  return (self[..., None] == Tensor.arange(num_classes, requires_grad=False, device=self.device)).where(1, 0)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.scaled_dot_product_attention","title":"scaled_dot_product_attention","text":"<pre><code>scaled_dot_product_attention(\n    key: Tensor,\n    value: Tensor,\n    attn_mask: Optional[Tensor] = None,\n    dropout_p: float = 0.0,\n    is_causal: bool = False,\n) -&gt; Tensor\n</code></pre> <p>Computes scaled dot-product attention. <code>self</code> is the query tensor, <code>key</code> is the key tensor, and <code>value</code> is the value tensor.</p> <ul> <li>Described: https://paperswithcode.com/method/scaled</li> <li>Paper: https://arxiv.org/abs/1706.03762v7</li> </ul> <pre><code>q = Tensor.randn(2, 4, 8)\nk = Tensor.randn(2, 4, 8)\nv = Tensor.randn(2, 4, 8)\nprint(q.scaled_dot_product_attention(k, v).numpy())\n</code></pre> <pre><code>[[[ 0.7096 -1.3188 -0.5629  0.6426 -0.025  -0.0636 -0.1879  0.3882]\n  [ 0.6264 -0.7172 -0.3801  0.3077 -0.5498 -1.1599 -0.0885  0.3348]\n  [ 0.6083 -0.5665 -0.2999  0.2557 -0.1295 -0.5506 -0.3255  0.1949]\n  [ 0.7322 -1.4959 -0.6557  0.7118 -0.4007 -0.5873  0.0327  0.5346]]\n\n [[ 0.1278 -0.3112 -0.4018  0.0586 -0.3478 -0.0718 -0.904  -0.1595]\n  [ 0.284  -0.2957 -0.5639 -0.1012 -0.5746 -0.4352 -1.0691 -0.2931]\n  [-0.4256 -0.2026  0.4066  0.694   0.2838  0.494  -0.1331 -0.0593]\n  [ 0.1401 -0.4061 -0.429   0.0877 -0.3795  0.037  -0.9037 -0.0037]]]\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def scaled_dot_product_attention(self, key:Tensor, value:Tensor, attn_mask:Optional[Tensor]=None,\n                                 dropout_p:float=0.0, is_causal:bool=False) -&gt; Tensor:\n  \"\"\"\n  Computes scaled dot-product attention.\n  `self` is the query tensor, `key` is the key tensor, and `value` is the value tensor.\n\n  - Described: https://paperswithcode.com/method/scaled\n  - Paper: https://arxiv.org/abs/1706.03762v7\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  q = Tensor.randn(2, 4, 8)\n  k = Tensor.randn(2, 4, 8)\n  v = Tensor.randn(2, 4, 8)\n  print(q.scaled_dot_product_attention(k, v).numpy())\n  ```\n  \"\"\"\n  # NOTE: it also works when `key` and `value` have symbolic shape.\n  assert all_int(self.shape), f\"does not support symbolic shape {self.shape}\"\n  if is_causal: attn_mask = Tensor.ones(self.shape[-2], key.shape[-2], requires_grad=False, device=self.device).tril(0).cast(dtypes.bool)\n  if attn_mask is not None and attn_mask.dtype == dtypes.bool: attn_mask = (attn_mask == 0).where(-float(\"inf\"), 0)\n  qk = self.matmul(key.transpose(-2,-1), acc_dtype=least_upper_dtype(self.dtype, key.dtype, dtypes.float32)) / math.sqrt(self.shape[-1])\n  return ((qk+attn_mask) if attn_mask is not None else qk).softmax(-1).cast(self.dtype).dropout(dropout_p) @ value\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.binary_crossentropy","title":"binary_crossentropy","text":"<pre><code>binary_crossentropy(y: Tensor) -&gt; Tensor\n</code></pre> <p>Computes the binary cross-entropy loss between <code>self</code> and <code>y</code>.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.BCELoss.html</p> <pre><code>t = Tensor([0.1, 0.9, 0.2])\ny = Tensor([0, 1, 0])\nprint(t.binary_crossentropy(y).item())\n</code></pre> <pre><code>0.14462155103683472\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def binary_crossentropy(self, y:Tensor) -&gt; Tensor:\n  \"\"\"\n  Computes the binary cross-entropy loss between `self` and `y`.\n\n  See: https://pytorch.org/docs/stable/generated/torch.nn.BCELoss.html\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([0.1, 0.9, 0.2])\n  y = Tensor([0, 1, 0])\n  print(t.binary_crossentropy(y).item())\n  ```\n  \"\"\"\n  return (-y*self.log() - (1-y)*(1-self).log()).mean()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.binary_crossentropy_logits","title":"binary_crossentropy_logits","text":"<pre><code>binary_crossentropy_logits(y: Tensor) -&gt; Tensor\n</code></pre> <p>Computes the binary cross-entropy loss between <code>self</code> and <code>y</code> where <code>self</code> is logits.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.BCEWithLogitsLoss.html</p> <pre><code>t = Tensor([-1, 2, -3])\ny = Tensor([0, 1, 0])\nprint(t.binary_crossentropy_logits(y).item())\n</code></pre> <pre><code>0.16292566061019897\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def binary_crossentropy_logits(self, y:Tensor) -&gt; Tensor:\n  \"\"\"\n  Computes the binary cross-entropy loss between `self` and `y` where `self` is logits.\n\n  See: https://pytorch.org/docs/stable/generated/torch.nn.BCEWithLogitsLoss.html\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([-1, 2, -3])\n  y = Tensor([0, 1, 0])\n  print(t.binary_crossentropy_logits(y).item())\n  ```\n  \"\"\"\n  return (self.maximum(0) - y * self + (1 + self.abs().neg().exp()).log()).mean()\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.sparse_categorical_crossentropy","title":"sparse_categorical_crossentropy","text":"<pre><code>sparse_categorical_crossentropy(\n    Y: Tensor, ignore_index=-1, label_smoothing=0.0\n) -&gt; Tensor\n</code></pre> <p>Computes the sparse categorical cross-entropy loss between <code>self</code> and <code>Y</code>.</p> <p>Note</p> <p><code>self</code> is logits and <code>Y</code> is the target labels.</p> <p>See: https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html</p> <pre><code>t = Tensor([[-1, 2, -3], [1, -2, 3]])\nY = Tensor([1, 2])\nprint(t.sparse_categorical_crossentropy(Y).item())\n</code></pre> <pre><code>0.09391524642705917\n</code></pre> Source code in <code>tinygrad/tensor.py</code> <pre><code>def sparse_categorical_crossentropy(self, Y:Tensor, ignore_index=-1, label_smoothing=0.0) -&gt; Tensor:\n  \"\"\"\n  Computes the sparse categorical cross-entropy loss between `self` and `Y`.\n\n  NOTE: `self` is logits and `Y` is the target labels.\n\n  See: https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([[-1, 2, -3], [1, -2, 3]])\n  Y = Tensor([1, 2])\n  print(t.sparse_categorical_crossentropy(Y).item())\n  ```\n  \"\"\"\n  assert 0.0 &lt;= label_smoothing &lt;= 1.0, \"label_smoothing must be in [0.0, 1.0]\"\n  log_probs, loss_mask = self.log_softmax(), (Y != ignore_index)\n  y_counter = Tensor.arange(self.shape[-1], requires_grad=False, device=self.device).unsqueeze(0).expand(Y.numel(), self.shape[-1])\n  y = ((y_counter == Y.flatten().reshape(-1, 1)) * loss_mask.reshape(-1, 1)).reshape(*Y.shape, self.shape[-1])\n  smoothing = label_smoothing * (log_probs.mean(-1) * loss_mask).sum()\n  return -((1 - label_smoothing) * (log_probs * y).sum() + smoothing) / loss_mask.sum()\n</code></pre>"},{"location":"tensor/ops/#casting-ops","title":"Casting Ops","text":""},{"location":"tensor/ops/#tinygrad.Tensor.cast","title":"cast","text":"<pre><code>cast(dtype: DType) -&gt; Tensor\n</code></pre> <p>Casts <code>self</code> to the given <code>dtype</code>.</p> <p><pre><code>t = Tensor([-1, 2.5, 3], dtype=dtypes.float)\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.float [-1.   2.5  3. ]\n</code></pre> <pre><code>t = t.cast(dtypes.int32)\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.int [-1  2  3]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def cast(self, dtype:DType) -&gt; Tensor:\n  \"\"\"\n  Casts `self` to the given `dtype`.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([-1, 2.5, 3], dtype=dtypes.float)\n  print(t.dtype, t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = t.cast(dtypes.int32)\n  print(t.dtype, t.numpy())\n  ```\n  \"\"\"\n  return self if self.dtype == dtype else F.Cast.apply(self, dtype=dtype)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.bitcast","title":"bitcast","text":"<pre><code>bitcast(dtype: DType) -&gt; Tensor\n</code></pre> <p>Bitcasts <code>self</code> to the given <code>dtype</code> of the same itemsize.</p> <p><code>self</code> must not require a gradient.</p> <p><pre><code>t = Tensor([-1, 2, 3], dtype=dtypes.int32)\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.int [-1  2  3]\n</code></pre> <pre><code>t = t.bitcast(dtypes.uint32)\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.uint [4294967295          2          3]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def bitcast(self, dtype:DType) -&gt; Tensor:\n  \"\"\"\n  Bitcasts `self` to the given `dtype` of the same itemsize.\n\n  `self` must not require a gradient.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([-1, 2, 3], dtype=dtypes.int32)\n  print(t.dtype, t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = t.bitcast(dtypes.uint32)\n  print(t.dtype, t.numpy())\n  ```\n  \"\"\"\n  if self.requires_grad: raise RuntimeError(\"can't backprop through bitcast\")\n  return F.Cast.apply(self, dtype=dtype, bitcast=True) if self.dtype != dtype else self\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.float","title":"float","text":"<pre><code>float() -&gt; Tensor\n</code></pre> <p>Convenience method to cast <code>self</code> to a <code>float32</code> Tensor.</p> <p><pre><code>t = Tensor([-1, 2, 3], dtype=dtypes.int32)\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.int [-1  2  3]\n</code></pre> <pre><code>t = t.float()\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.float [-1.  2.  3.]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def float(self) -&gt; Tensor:\n  \"\"\"\n  Convenience method to cast `self` to a `float32` Tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([-1, 2, 3], dtype=dtypes.int32)\n  print(t.dtype, t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = t.float()\n  print(t.dtype, t.numpy())\n  ```\n  \"\"\"\n  return self.cast(dtypes.float32)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.half","title":"half","text":"<pre><code>half() -&gt; Tensor\n</code></pre> <p>Convenience method to cast <code>self</code> to a <code>float16</code> Tensor.</p> <p><pre><code>t = Tensor([-1, 2, 3], dtype=dtypes.int32)\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.int [-1  2  3]\n</code></pre> <pre><code>t = t.half()\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.half [-1.  2.  3.]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def half(self) -&gt; Tensor:\n  \"\"\"\n  Convenience method to cast `self` to a `float16` Tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([-1, 2, 3], dtype=dtypes.int32)\n  print(t.dtype, t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = t.half()\n  print(t.dtype, t.numpy())\n  ```\n  \"\"\"\n  return self.cast(dtypes.float16)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.int","title":"int","text":"<pre><code>int() -&gt; Tensor\n</code></pre> <p>Convenience method to cast <code>self</code> to a <code>int32</code> Tensor.</p> <p><pre><code>t = Tensor([-1.5, -0.5, 0.0, 0.5, 1.5])\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.float [-1.5 -0.5  0.   0.5  1.5]\n</code></pre> <pre><code>t = t.int()\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.int [-1  0  0  0  1]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def int(self) -&gt; Tensor:\n  \"\"\"\n  Convenience method to cast `self` to a `int32` Tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([-1.5, -0.5, 0.0, 0.5, 1.5])\n  print(t.dtype, t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = t.int()\n  print(t.dtype, t.numpy())\n  ```\n  \"\"\"\n  return self.cast(dtypes.int32)\n</code></pre>"},{"location":"tensor/ops/#tinygrad.Tensor.bool","title":"bool","text":"<pre><code>bool() -&gt; Tensor\n</code></pre> <p>Convenience method to cast <code>self</code> to a <code>bool</code> Tensor.</p> <p><pre><code>t = Tensor([-1, 0, 1])\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.int [-1  0  1]\n</code></pre> <pre><code>t = t.bool()\nprint(t.dtype, t.numpy())\n</code></pre> <pre><code>dtypes.bool [ True False  True]\n</code></pre></p> Source code in <code>tinygrad/tensor.py</code> <pre><code>def bool(self) -&gt; Tensor:\n  \"\"\"\n  Convenience method to cast `self` to a `bool` Tensor.\n\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = Tensor([-1, 0, 1])\n  print(t.dtype, t.numpy())\n  ```\n  ```python exec=\"true\" source=\"above\" session=\"tensor\" result=\"python\"\n  t = t.bool()\n  print(t.dtype, t.numpy())\n  ```\n  \"\"\"\n  return self.cast(dtypes.bool)\n</code></pre>"}]}